{"changed":true,"filter":false,"title":"yaya_param.java","tooltip":"/src/created/ParseTree/Yaya/yaya_param.java","ace":{"folds":[],"scrolltop":60,"scrollleft":0,"selection":{"start":{"row":37,"column":39},"end":{"row":37,"column":39},"isBackwards":false},"options":{"guessTabSize":true,"useWrapMode":false,"wrapToView":true},"firstLineState":{"row":3,"state":"start","mode":"ace/mode/java"}},"value":"package created.ParseTree.Yaya;\n\nimport created.ParseTree.Array.*;\nimport created.ParseTree.Arte.*;\nimport created.ParseTree.Literals.*;\nimport created.ParseTree.Program.*;\nimport created.ParseTree.SabiSabi.*;\nimport created.ParseTree.SubYaya.*;\nimport created.ParseTree.Utos.*;\nimport created.Sym.*;\nimport error.*;\n\npublic abstract class yaya_param implements created.iNode  \n{\n    public static class yayaParam extends yaya_param\n    {\n        public data_type dt;\n        public String id;\n        \n        public yayaParam(data_type dt, String id)\n        {\n            this.dt = dt;\n            this.id = id;\n        }\n        \n        public String toString()\n        {\n            return dt.toString() + \" \" + id;\n        }\n        \n        public void setSymList(SymList sl)\n        {\n            if(dt instanceof data_type.datatypePrimitive)\n            {\n                Boolean avail = sl.addToList(id, new SymVar(id, dt, null));\n                if(!avail)\n                {\n                    ErrorReport.error(\"Duplicate parameter!: \" + id);\n                }\n                // ((data_type.datatypePrimitive) dt).setSymList(sl);\n            }\n            else if(dt instanceof data_type.datatypeReference)\n            {\n                Boolean avail = sl.addToList(id, new SymVar(id, dt, null));\n                if(!avail)\n                {\n                    ErrorReport.error(\"Duplicate parameter!: \" + id);\n                }\n                // ((data_type.datatypeReference) dt).setSymList(sl);\n            }\n        }\n        \n        public void checkContext(SymList sl)\n        {\n            Boolean avail = sl.addToList(id, new SymVar(id, dt, null));\n            if(!avail)\n            {\n                ErrorReport.error(\"Duplicate variable name!: \" + id);\n            }\n        }\n        \n        public void preInterpret(SymList sl)\n        {\n            if(dt instanceof data_type.datatypePrimitive)\n            {\n                ((data_type.datatypePrimitive) dt).preInterpret(sl);\n            }\n            else if(dt instanceof data_type.datatypeReference)\n            {\n                ((data_type.datatypeReference) dt).preInterpret(sl);\n            }\n        }\n    }\n    \n}","undoManager":{"mark":0,"position":-1,"stack":[]},"timestamp":1416198071000}