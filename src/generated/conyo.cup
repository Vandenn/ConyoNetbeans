import java_cup.runtime.*;
import created.*;
import created.OMG.*;
import created.sabisabi.*;

parser code {:
	StringBuilder sb = new StringBuilder();
	
	/*Error reporting*/
	public void report_error(String message, Object info) {
		sb.append("ERROR! ");
		
		/*Code borrowed from ycalc.cup*/
        if (info instanceof java_cup.runtime.Symbol) 
		{
            java_cup.runtime.Symbol s = ((java_cup.runtime.Symbol) info);
   
			/*Line number*/
            if (s.left >= 0) 
			{                
                sb.append("Line: " +(s.left+1));   
				/*Column number*/
                if (s.right >= 0)                    
                    sb.append(", Column: " +(s.right+1));
            }
        }
		 
		sb.append(" - " +message);
	}   
	public void report_fatal_error(String message, Object info) {
		report_error(message, info);
		throw new RuntimeException("Fatal Syntax Error");
	}
	
	public void addText(String text)
	{
		sb.append(text);
		//sb.append(" - Line " + MainConyo.s.lineNo());
		sb.append("\t\n");
	}
	public void printText()
	{
		if(sb.length() > 0)
			System.out.println(sb);
		else
			System.out.println("DONE.");
	}
:};

/* Terminals */
terminal            OMG, HIRE_YAYA, BAYAD, MAKE_BALIK;
terminal			SUPER_YAYA, MAKE_ARTE, BRAND_NEW, MAKE_UTUSAN, BREAKUP, MAKEUP;
terminal			MAKE_TAWAG, MAKE_SULAT, MAKE_BASA, LIKE_KAPAG, THIS_NALANG, THIS_NALANG_KAPAG;
terminal			MAKE_PALIT, MRW, MDR, LIKE_HABANG, MAKE_GAWA, MAKE_ULIT;
terminal String		INTY, FLOATY, CHARY, STRINGY, BOOLY, POOR;
terminal			MAKE_KUHA, MAKE_SIMULA, MAKE_SABI, DB;
terminal			COMMA, COLON, DOLLAR_SIGN, LEFT_PAREN, RIGHT_PAREN, LEFT_BRACE, RIGHT_BRACE;
terminal			LEFT_CURLY, RIGHT_CURLY; 
terminal			PERIOD, PLUS, MINUS, TIMES, DIVIDE, MODULO;
terminal			NOT_EQUAL, LESS_THAN, LT_EQUAL, GREATER_THAN, GT_EQUAL, EQUAL_EQUAL, AND, OR, NOT;
terminal 			POS_INC, NEG_INC;
terminal String		IDENTIFIER;
terminal String		STRING_LITERAL;
terminal String 	CHAR_LITERAL;
terminal String		FLOAT_LITERAL;			
terminal String		INT_LITERAL;
terminal String		BOOL_LITERAL;
terminal String		WALEY;
/*Terminals for precedence*/
terminal			LONG_NAME, SHORT_NAME;

/* Non terminals */
/*Program*/
non terminal Conyogram	conyogram;
/*Program Breakdown*/
non terminal OMGlist	OMG_section;
non terminal OMGlist	OMG_list;
non terminal OMG		OMG_dec;
non terminal			yaya_section;
non terminal			yaya_list;
non terminal			sub_yaya_section;
non terminal			sub_yaya_list;
non terminal			super_yaya;
/*Literals, Data Types, Names*/
non terminal			literal;
non terminal String		data_type;
non terminal			primitive_dt;
non terminal			reference_dt;
non terminal			array_dt;
non terminal String		valid_name;
non terminal			valid_var;
/*Class Declaration Productions*/
non terminal			sub_yaya;
non terminal			sy_body;
non terminal			sy_opt;
non terminal			sy_cont_list;
non terminal			sy_cont;
non terminal			constructor;
non terminal			sy_init;
/*Variable Declaration Productions*/
non terminal			arte_dec;
non terminal			arte_assign;
non terminal			arte_init;
/*Function Declaration Productions*/
non terminal			yaya;
non terminal			yaya_header;
non terminal			yaya_param_sec;
non terminal			yaya_param_list;
non terminal			yaya_param;
/*Array Productions*/
non terminal			array_init;
non terminal			arte_init_list;
non terminal			arte_init_opt;
non terminal			brackets;
non terminal			ref_brackets;
/*Program Code Productions*/
non terminal			utos_block;
non terminal			utos_block_opt;
non terminal			block_content;
non terminal			utos_dec;
non terminal			utos_dec_nodb;
non terminal			utos_dec_db;
non terminal			utos_dec_val;
non terminal			utos_makeKuha;
non terminal			utos_makeTawag;
non terminal			utos_makeSulat;
non terminal			utos_makeBasa;
non terminal			utos_likeKapag;
non terminal			utos_thisNalang;
non terminal			utos_makePalit;
non terminal			makePalit_MRW;
non terminal			utos_likeHabang;
non terminal			utos_makeGawaHabang;
non terminal			utos_makeUlit;
non terminal			utos_makeArte;
non terminal			utos_makeSabi;
/*Expression Relations*/
non terminal SabiSabi	sabi_sabi;
non terminal			sabi_sabi_end;
non terminal			sabi_sabi_for;
non terminal			ss_OR;
non terminal			ss_AND;
non terminal			ss_equality;
non terminal			ss_comparison;
non terminal			ss_a1;
non terminal			ss_a2;
non terminal			ss_unary_1;
non terminal			ss_unary_2;
non terminal			ss_paren;
non terminal			equality;
non terminal			comparison;
non terminal			arithmetic_1;
non terminal			arithmetic_2;

/*Precedences*/
precedence left SHORT_NAME;
precedence left LONG_NAME;

/*Start*/
start with conyogram;

/**
 * CONYO++ GRAMMAR RULES 
 */
 
/*Program*/

conyogram ::= OMG_section:o yaya_section:y sub_yaya_section super_yaya 
				{: 
					RESULT = new Conyogram(o, y);
					printText(); 
				:};

/*Program Breakdown*/

OMG_section ::= OMG_list:o {: RESULT = o; :}
			| {: RESULT = new OMGlist(); :};
OMG_list ::= OMG_dec:o {: RESULT = new OMGlist(o); :}
			| OMG_dec:o OMG_list:l {: RESULT = new OMGlist(o, l); :};
			
OMG_dec ::= OMG IDENTIFIER:id MAKE_KUHA sabi_sabi:ss DB {: RESULT = new OMG(id, ss); :}
			| OMG error DB {: RESULT = null; addText(" in Constant Declaration"); :}
			| error DB {: RESULT = null; addText(" before main and function declarations"); :}
;

yaya_section ::= yaya_list:y {: RESULT = y; :}
| {: RESULT = new YayaList(); :};
yaya_list ::= yaya:y {: RESULT = new YayaList(y); :}
			| yaya:y yaya_list:l {: RESULT = new YayaList(y, l); :};

sub_yaya_section ::= sub_yaya_list:s {: RESULT = new SubYayaList(s); :}
			| {: RESULT = new SubYayaList(); :};
sub_yaya_list ::= sub_yaya:s {: RESULT = new SubYayaList(s); :}
				| sub_yaya:s sub_yaya_list:l {: RESULT = new SubYayaList(s, l); :};
				
super_yaya ::= SUPER_YAYA utos_block:u {: RESULT = new SuperYaya(u); :};

/*Literals, Data Types, Names*/

literal ::= INT_LITERAL:i {: RESULT = new Inty(i); :}
			| FLOAT_LITERAL:f {: RESULT = new Floaty(f); :}
			| STRING_LITERAL:s {: RESULT = new Stringy(s); :}
			| CHAR_LITERAL:c {: RESULT = new Chary(c); :}
			| BOOL_LITERAL:b {: RESULT = new Booly(b); :}
			| WALEY:w {: RESULT = new Waley(w); :}; 

data_type ::= primitive_dt:p {: RESULT = p; :}
			| reference_dt:r {: RESULT = r; :};
primitive_dt ::= INTY:i {: RESULT = i; :}
			| FLOATY:f {: RESULT = f; :}
			| STRINGY:s {: RESULT = s; :}
			| CHARY:c {: RESULT = c; :}
			| BOOLY:b {: RESULT = b; :};
reference_dt ::= valid_name:vn {: RESULT = vn; :} 
				| array_dt:a {: RESULT = a; :};
array_dt ::= primitive_dt:p brackets:b {: RESULT = p + b; :}
			| valid_name:vn brackets:b {: RESULT = vn + b; :};
			
valid_name ::= IDENTIFIER:id {:RESULT = id;:}
			| valid_name:vn COLON IDENTIFIER:id {:RESULT = vn + ":" + id;:} %prec LONG_NAME;
valid_var ::= valid_name:vn {: RESULT = new validVar(vn); :} %prec SHORT_NAME 
			| valid_name:vn ref_brackets:rb {: RESULT = new validVar(vn, rb); :};
			
/*Class Declaration Productions*/

sub_yaya ::= MAKE_UTUSAN IDENTIFIER:id sy_body:body {: RESULT = new SubYaya(id, body); :};
sy_body ::= DOLLAR_SIGN sy_opt:opt DOLLAR_SIGN {: RESULT = new SubYayaBodyList(opt); :};
sy_opt ::= sy_cont_list:l {: RESULT = new SubYayaBodyList(l); :}
			| {: RESULT = new SubYayaBodyList(); :};
sy_cont_list ::= sy_cont:c sy_cont_list:l {: RESULT = new SubYayaBodyList(c, l); :}
			| sy_cont:c {: RESULT = new SubYayaBodyList(c); :};
sy_cont ::= arte_dec
			| yaya
			| constructor;
constructor ::= MAKE_SIMULA IDENTIFIER:id utos_block:u {: RESULT = new mSimula(id, u); :};
sy_init ::= BRAND_NEW reference_dt LEFT_PAREN arte_init_list RIGHT_PAREN;

/*Variable Declaration Productions*/

arte_dec ::= MAKE_ARTE data_type IDENTIFIER:id arte_assign DB
			| MAKE_ARTE error DB {: addText(" in Variable Declaration"); :};
arte_assign ::= MAKE_KUHA arte_init
			| ;
arte_init ::= array_init
			| sy_init
			| sabi_sabi;

/*Function Declaration Productions*/

yaya ::= yaya_header utos_block;

yaya_header ::= HIRE_YAYA IDENTIFIER:id BAYAD LEFT_PAREN yaya_param_sec RIGHT_PAREN MAKE_BALIK data_type IDENTIFIER
			| HIRE_YAYA IDENTIFIER:id BAYAD LEFT_PAREN yaya_param_sec RIGHT_PAREN MAKE_BALIK POOR;

yaya_param_sec ::= yaya_param_list | ;
yaya_param_list ::= yaya_param COMMA yaya_param_list
				| yaya_param;
yaya_param ::= data_type IDENTIFIER;

/*Array Productions*/

array_init ::= LEFT_CURLY arte_init_list RIGHT_CURLY;
arte_init_list ::= arte_init_opt
				| ;
arte_init_opt ::= arte_init COMMA arte_init_opt
				| arte_init;
				
brackets ::= LEFT_BRACE RIGHT_BRACE {: RESULT = "[]"; :};
ref_brackets ::= LEFT_BRACE sabi_sabi RIGHT_BRACE;

/*Program Code Productions*/

utos_block ::= DOLLAR_SIGN utos_block_opt DOLLAR_SIGN
				| error {: addText(" in code block"); :};
utos_block_opt ::= block_content | ;
block_content ::= utos_dec block_content
				| utos_dec;
utos_dec ::= utos_dec_db 
			| utos_dec_val DB
			| utos_dec_nodb
			| error {: addText(""); :};
utos_dec_nodb ::= utos_likeKapag
			| utos_makePalit
			| utos_likeHabang
			| utos_makeGawaHabang
			| utos_makeUlit
			| utos_makeArte
			| LIKE_KAPAG error {: addText(" in IF statement"); :}
			| MAKE_PALIT error DB{: addText(" in SWITCH statement"); :}
			| LIKE_HABANG error DB{: addText(" in WHILE LOOP"); :}
			| MAKE_GAWA error DB{: addText(" in DO WHILE LOOP"); :}
			| MAKE_ULIT error DB{: addText(" in FOR LOOP"); :};
utos_dec_db ::= utos_makeKuha DB
			| utos_makeSulat DB
			| utos_makeSabi DB
			| BREAKUP DB
			| MAKEUP DB
			| MAKE_SULAT error DB{: addText(" in OUTPUT function"); :}
			| MAKE_SABI error DB{: addText(" in MAKESABI function"); :};
utos_dec_val ::= utos_makeTawag
			| utos_makeBasa
			| MAKE_TAWAG error {: addText(" in FUNCTION CALL"); :}
			| MAKE_BASA error {: addText(" in SCAN function"); :};
utos_makeKuha ::= valid_var arte_assign;
utos_makeTawag ::= MAKE_TAWAG valid_name:vn LEFT_PAREN arte_init_list RIGHT_PAREN;
utos_makeSulat ::= MAKE_SULAT LEFT_PAREN sabi_sabi RIGHT_PAREN;
utos_makeBasa ::= MAKE_BASA LEFT_PAREN data_type RIGHT_PAREN;
utos_likeKapag ::= LIKE_KAPAG LEFT_PAREN sabi_sabi RIGHT_PAREN utos_block utos_thisNalang;
utos_thisNalang ::= THIS_NALANG utos_block
				| THIS_NALANG_KAPAG LEFT_PAREN sabi_sabi RIGHT_PAREN utos_block utos_thisNalang
				|
				| THIS_NALANG error DB {: addText(" in ELSE statement"); :}
				| THIS_NALANG_KAPAG error DB {: addText(" in ELSE IF statement"); :};
utos_makePalit ::= MAKE_PALIT LEFT_PAREN sabi_sabi RIGHT_PAREN DOLLAR_SIGN makePalit_MRW DOLLAR_SIGN;
makePalit_MRW ::= MRW sabi_sabi COLON utos_block_opt makePalit_MRW
				| MRW error DB {: addText(" in one of the cases of a SWITCH statement"); :}
				| MDR COLON utos_block_opt
				| MDR error DB {: addText(" in the last case of a SWITCH statement"); :}
				| ;

utos_likeHabang ::= LIKE_HABANG LEFT_PAREN sabi_sabi RIGHT_PAREN utos_block
				| LIKE_HABANG LEFT_PAREN sabi_sabi RIGHT_PAREN DB;
utos_makeGawaHabang ::= MAKE_GAWA utos_block LIKE_HABANG LEFT_PAREN sabi_sabi RIGHT_PAREN DB;
utos_makeUlit ::= MAKE_ULIT LEFT_PAREN utos_makeKuha DB sabi_sabi_for utos_makeKuha RIGHT_PAREN utos_block 
				| MAKE_ULIT LEFT_PAREN utos_makeKuha DB sabi_sabi_for sabi_sabi_for RIGHT_PAREN utos_block;
utos_makeArte ::= arte_dec;
utos_makeSabi ::= MAKE_SABI sabi_sabi;

/*Expression Productions*/

sabi_sabi_end ::= valid_var:v {: RESULT = new ssEnd(v); :}
				| utos_dec_val:u {: RESULT = new ssEnd(u); :}
				| literal:l {: RESULT = new ssEnd(l); :};

sabi_sabi_for ::= sabi_sabi:s DB {: RESULT = new SabiSabiFor(s); :};	
sabi_sabi ::= ss_OR:o {: RESULT = new SabiSabi(o); :};
ss_OR ::= ss_AND:a OR OR ss_OR:o {: RESULT = new ssOR(a, o); :}
		| ss_AND:a {: RESULT = new ssOR(a); :};
ss_AND ::= ss_equality:e AND AND ss_AND:a {: RESULT = new ssAND(e, a); :}
		| ss_equality:e {: RESULT = new ssAND(e); :};
ss_equality ::= ss_comparison:c equality ss_equality:e {: RESULT = new ssEquality(c, e); :}
			| ss_comparison:c {: RESULT = new ssEquality(c); :};
ss_comparison ::= ss_a1:a comparison ss_comparison:c {: RESULT = new ssComparison(a, c); :}
			|	ss_a1:a {: RESULT = new ssComparison(a); :};
ss_a1 ::= ss_a2:a2 arithmetic_1 ss_a1:a1 {: RESULT = new ssA1(a2, a1); :}
		| ss_a2:a2 {: RESULT = new ssA1(a2); :};
ss_a2 ::= ss_unary_1:u arithmetic_2 ss_a2:a {: RESULT = new ssA2(u, a); :}
		| ss_unary_1:u {: RESULT = new ssA2(u); :};
ss_unary_1 ::= NOT ss_unary_1:u {: RESULT = new ssU1("!", u); :}
			| PLUS PLUS ss_unary_1:u {: RESULT = new ssU1("++", u); :}
			| MINUS MINUS ss_unary_1:u {: RESULT = new ssU1("--", u); :}
			| ss_unary_2:u {: RESULT = new ssU1(u); :};
ss_unary_2 ::= ss_unary_2:u POS_INC {: RESULT = new ssU2(u, "++"); :}
			| ss_unary_2:u NEG_INC {: RESULT = new ssU2(u, "--"); :}
			| ss_paren:p {: RESULT = new ssU2(p); :};
ss_paren ::= LEFT_PAREN ss_paren:p RIGHT_PAREN {: RESULT = new ssParen(p); :}
			| sabi_sabi_end:e {: RESULT = new ssParen(e); :};
			
equality ::= EQUAL_EQUAL
			| NOT_EQUAL;

comparison ::= GT_EQUAL
			| LT_EQUAL
			| GREATER_THAN
			| LESS_THAN;
			
arithmetic_1 ::= PLUS
			| MINUS;

arithmetic_2 ::= TIMES
			| DIVIDE
			| MODULO;

