
//----------------------------------------------------
// The following code was generated by CUP v0.11b 20140808 (SVN rev 54)
//----------------------------------------------------

package generated;

import java_cup.runtime.*;
import created.*;
import created.ParseTree.Array.*;
import created.ParseTree.Arte.*;
import created.ParseTree.Literals.*;
import created.ParseTree.Program.*;
import created.ParseTree.SabiSabi.*;
import created.ParseTree.SubYaya.*;
import created.ParseTree.Utos.*;
import created.ParseTree.Yaya.*;
import java_cup.runtime.XMLElement;

/** CUP v0.11b 20140808 (SVN rev 54) generated parser.
  */
@SuppressWarnings({"rawtypes"})
public class Parser extends java_cup.runtime.lr_parser {

 public final Class getSymbolContainer() {
    return sym.class;
}

  /** Default constructor. */
  public Parser() {super();}

  /** Constructor which sets the default scanner. */
  public Parser(java_cup.runtime.Scanner s) {super(s);}

  /** Constructor which sets the default scanner. */
  public Parser(java_cup.runtime.Scanner s, java_cup.runtime.SymbolFactory sf) {super(s,sf);}

  /** Production table. */
  protected static final short _production_table[][] = 
    unpackFromStrings(new String[] {
    "\000\244\000\002\002\004\000\002\002\006\000\002\003" +
    "\003\000\002\003\002\000\002\004\003\000\002\004\004" +
    "\000\002\005\007\000\002\005\005\000\002\005\004\000" +
    "\002\006\003\000\002\006\002\000\002\007\003\000\002" +
    "\007\004\000\002\010\003\000\002\010\002\000\002\011" +
    "\003\000\002\011\004\000\002\012\004\000\002\013\003" +
    "\000\002\013\003\000\002\013\003\000\002\013\003\000" +
    "\002\013\003\000\002\013\003\000\002\014\003\000\002" +
    "\014\003\000\002\015\003\000\002\015\003\000\002\015" +
    "\003\000\002\015\003\000\002\015\003\000\002\016\003" +
    "\000\002\016\003\000\002\017\004\000\002\017\004\000" +
    "\002\020\003\000\002\020\005\000\002\021\003\000\002" +
    "\021\004\000\002\022\005\000\002\023\005\000\002\024" +
    "\003\000\002\024\002\000\002\025\004\000\002\025\003" +
    "\000\002\026\003\000\002\026\003\000\002\026\003\000" +
    "\002\027\005\000\002\030\007\000\002\031\007\000\002" +
    "\031\005\000\002\032\004\000\002\032\002\000\002\033" +
    "\003\000\002\033\003\000\002\033\003\000\002\034\004" +
    "\000\002\035\013\000\002\035\012\000\002\036\003\000" +
    "\002\036\002\000\002\037\005\000\002\037\003\000\002" +
    "\040\004\000\002\041\005\000\002\042\003\000\002\042" +
    "\002\000\002\043\005\000\002\043\003\000\002\044\004" +
    "\000\002\045\005\000\002\046\005\000\002\046\003\000" +
    "\002\047\003\000\002\047\002\000\002\050\004\000\002" +
    "\050\003\000\002\051\003\000\002\051\004\000\002\051" +
    "\003\000\002\051\003\000\002\051\003\000\002\052\003" +
    "\000\002\052\003\000\002\052\003\000\002\052\003\000" +
    "\002\052\003\000\002\052\003\000\002\052\004\000\002" +
    "\052\005\000\002\052\005\000\002\052\005\000\002\052" +
    "\005\000\002\053\004\000\002\053\004\000\002\053\004" +
    "\000\002\053\004\000\002\053\004\000\002\053\005\000" +
    "\002\053\005\000\002\054\003\000\002\054\003\000\002" +
    "\054\004\000\002\054\004\000\002\055\005\000\002\055" +
    "\005\000\002\055\005\000\002\055\005\000\002\056\004" +
    "\000\002\057\007\000\002\060\006\000\002\061\006\000" +
    "\002\062\010\000\002\063\004\000\002\063\010\000\002" +
    "\063\002\000\002\063\005\000\002\063\005\000\002\064" +
    "\011\000\002\065\007\000\002\065\005\000\002\065\005" +
    "\000\002\065\005\000\002\065\002\000\002\066\007\000" +
    "\002\066\007\000\002\067\011\000\002\070\012\000\002" +
    "\070\012\000\002\071\003\000\002\072\004\000\002\074" +
    "\003\000\002\074\003\000\002\074\003\000\002\075\004" +
    "\000\002\073\003\000\002\076\005\000\002\076\003\000" +
    "\002\077\005\000\002\077\003\000\002\100\005\000\002" +
    "\100\003\000\002\101\005\000\002\101\003\000\002\102" +
    "\005\000\002\102\003\000\002\103\005\000\002\103\003" +
    "\000\002\104\004\000\002\104\003\000\002\105\005\000" +
    "\002\105\003\000\002\106\003\000\002\106\003\000\002" +
    "\107\003\000\002\107\003\000\002\107\003\000\002\107" +
    "\003\000\002\110\003\000\002\110\003\000\002\111\003" +
    "\000\002\111\003\000\002\111\003" });

  /** Access to production table. */
  public short[][] production_table() {return _production_table;}

  /** Parse-action table. */
  protected static final short[][] _action_table = 
    unpackFromStrings(new String[] {
    "\000\u0123\000\014\003\007\004\010\005\ufffe\010\ufffe\013" +
    "\ufffe\001\002\000\004\002\u0125\001\002\000\010\005\uffff" +
    "\010\uffff\013\uffff\001\002\000\014\003\007\004\010\005" +
    "\ufffd\010\ufffd\013\ufffd\001\002\000\004\043\u0123\001\002" +
    "\000\006\003\u011d\076\u011e\001\002\000\010\005\012\010" +
    "\ufff7\013\ufff7\001\002\000\004\076\u010e\001\002\000\006" +
    "\010\ufff8\013\ufff8\001\002\000\006\010\ufff3\013\373\001" +
    "\002\000\006\003\020\046\022\001\002\000\010\005\012" +
    "\010\ufff6\013\ufff6\001\002\000\006\010\ufff5\013\ufff5\001" +
    "\002\000\066\002\uffb8\003\uffb8\005\uffb8\010\uffb8\011\uffb8" +
    "\013\uffb8\014\uffb8\015\uffb8\016\uffb8\017\uffb8\020\uffb8\021" +
    "\uffb8\022\uffb8\023\uffb8\024\uffb8\025\uffb8\026\uffb8\027\uffb8" +
    "\030\uffb8\031\uffb8\041\uffb8\042\uffb8\046\uffb8\074\uffb8\075" +
    "\uffb8\076\uffb8\001\002\000\016\005\uffc8\010\uffc8\011\uffc8" +
    "\013\uffc8\041\uffc8\046\uffc8\001\002\000\044\003\045\011" +
    "\054\014\023\015\033\016\037\017\024\020\043\021\061" +
    "\024\025\027\051\030\034\031\027\042\062\046\uffb6\074" +
    "\050\075\057\076\067\001\002\000\004\043\367\001\002" +
    "\000\006\003\362\047\363\001\002\000\006\003\336\047" +
    "\337\001\002\000\004\046\335\001\002\000\006\003\315" +
    "\047\316\001\002\000\050\043\uff9c\044\uff9c\045\uff9c\050" +
    "\uff9c\052\uff9c\054\uff9c\056\uff9c\057\uff9c\060\uff9c\061\uff9c" +
    "\062\uff9c\063\uff9c\064\uff9c\065\uff9c\066\uff9c\067\uff9c\070" +
    "\uff9c\071\uff9c\072\uff9c\001\002\000\050\003\uffb1\011\uffb1" +
    "\014\uffb1\015\uffb1\016\uffb1\017\uffb1\020\uffb1\021\uffb1\024" +
    "\uffb1\025\uffb1\026\uffb1\027\uffb1\030\uffb1\031\uffb1\042\uffb1" +
    "\046\uffb1\074\uffb1\075\uffb1\076\uffb1\001\002\000\010\025" +
    "\uffb7\026\uffb7\046\uffb7\001\002\000\004\043\314\001\002" +
    "\000\006\003\304\046\022\001\002\000\050\003\uffa9\011" +
    "\uffa9\014\uffa9\015\uffa9\016\uffa9\017\uffa9\020\uffa9\021\uffa9" +
    "\024\uffa9\025\uffa9\026\uffa9\027\uffa9\030\uffa9\031\uffa9\042" +
    "\uffa9\046\uffa9\074\uffa9\075\uffa9\076\uffa9\001\002\000\050" +
    "\003\uffb0\011\uffb0\014\uffb0\015\uffb0\016\uffb0\017\uffb0\020" +
    "\uffb0\021\uffb0\024\uffb0\025\uffb0\026\uffb0\027\uffb0\030\uffb0" +
    "\031\uffb0\042\uffb0\046\uffb0\074\uffb0\075\uffb0\076\uffb0\001" +
    "\002\000\006\003\300\076\067\001\002\000\060\040\uffdc" +
    "\043\uffdc\044\uffdc\045\uffdc\050\uffdc\051\273\052\uffdc\054" +
    "\uffdc\056\uffdc\057\uffdc\060\uffdc\061\uffdc\062\uffdc\063\uffdc" +
    "\064\uffdc\065\uffdc\066\uffdc\067\uffdc\070\uffdc\071\uffdc\072" +
    "\uffdc\074\uffdc\075\uffdc\001\002\000\004\043\272\001\002" +
    "\000\012\040\214\043\uffcc\074\266\075\265\001\002\000" +
    "\006\003\261\047\262\001\002\000\050\003\uff7f\011\uff7f" +
    "\014\uff7f\015\uff7f\016\uff7f\017\uff7f\020\uff7f\021\uff7f\024" +
    "\uff7f\025\uff7f\026\uff7f\027\uff7f\030\uff7f\031\uff7f\042\uff7f" +
    "\046\uff7f\074\uff7f\075\uff7f\076\uff7f\001\002\000\050\003" +
    "\uffaf\011\uffaf\014\uffaf\015\uffaf\016\uffaf\017\uffaf\020\uffaf" +
    "\021\uffaf\024\uffaf\025\uffaf\026\uffaf\027\uffaf\030\uffaf\031" +
    "\uffaf\042\uffaf\046\uffaf\074\uffaf\075\uffaf\076\uffaf\001\002" +
    "\000\050\003\uffaa\011\uffaa\014\uffaa\015\uffaa\016\uffaa\017" +
    "\uffaa\020\uffaa\021\uffaa\024\uffaa\025\uffaa\026\uffaa\027\uffaa" +
    "\030\uffaa\031\uffaa\042\uffaa\046\uffaa\074\uffaa\075\uffaa\076" +
    "\uffaa\001\002\000\050\003\uffae\011\uffae\014\uffae\015\uffae" +
    "\016\uffae\017\uffae\020\uffae\021\uffae\024\uffae\025\uffae\026" +
    "\uffae\027\uffae\030\uffae\031\uffae\042\uffae\046\uffae\074\uffae" +
    "\075\uffae\076\uffae\001\002\000\004\076\067\001\002\000" +
    "\006\003\250\047\251\001\002\000\050\003\uffb3\011\uffb3" +
    "\014\uffb3\015\uffb3\016\uffb3\017\uffb3\020\uffb3\021\uffb3\024" +
    "\uffb3\025\uffb3\026\uffb3\027\uffb3\030\uffb3\031\uffb3\042\uffb3" +
    "\046\uffb3\074\uffb3\075\uffb3\076\uffb3\001\002\000\050\003" +
    "\045\011\054\014\023\015\033\016\037\017\024\020\043" +
    "\021\061\024\025\025\uffb4\026\uffb4\027\051\030\034\031" +
    "\027\042\062\046\uffb4\074\050\075\057\076\067\001\002" +
    "\000\020\003\206\032\207\033\202\034\201\035\212\036" +
    "\205\076\067\001\002\000\004\043\177\001\002\000\050" +
    "\003\uffad\011\uffad\014\uffad\015\uffad\016\uffad\017\uffad\020" +
    "\uffad\021\uffad\024\uffad\025\uffad\026\uffad\027\uffad\030\uffad" +
    "\031\uffad\042\uffad\046\uffad\074\uffad\075\uffad\076\uffad\001" +
    "\002\000\004\076\067\001\002\000\050\003\uffac\011\uffac" +
    "\014\uffac\015\uffac\016\uffac\017\uffac\020\uffac\021\uffac\024" +
    "\uffac\025\uffac\026\uffac\027\uffac\030\uffac\031\uffac\042\uffac" +
    "\046\uffac\074\uffac\075\uffac\076\uffac\001\002\000\006\003" +
    "\153\047\154\001\002\000\032\003\111\016\037\020\043" +
    "\047\073\073\075\076\067\077\103\100\107\101\116\102" +
    "\102\103\072\104\117\001\002\000\050\003\uffab\011\uffab" +
    "\014\uffab\015\uffab\016\uffab\017\uffab\020\uffab\021\uffab\024" +
    "\uffab\025\uffab\026\uffab\027\uffab\030\uffab\031\uffab\042\uffab" +
    "\046\uffab\074\uffab\075\uffab\076\uffab\001\002\000\004\043" +
    "\071\001\002\000\004\043\070\001\002\000\050\043\uff9b" +
    "\044\uff9b\045\uff9b\050\uff9b\052\uff9b\054\uff9b\056\uff9b\057" +
    "\uff9b\060\uff9b\061\uff9b\062\uff9b\063\uff9b\064\uff9b\065\uff9b" +
    "\066\uff9b\067\uff9b\070\uff9b\071\uff9b\072\uff9b\001\002\000" +
    "\064\040\uffde\043\uffde\044\uffde\045\uffde\047\uffde\050\uffde" +
    "\051\uffde\052\uffde\054\uffde\056\uffde\057\uffde\060\uffde\061" +
    "\uffde\062\uffde\063\uffde\064\uffde\065\uffde\066\uffde\067\uffde" +
    "\070\uffde\071\uffde\072\uffde\074\uffde\075\uffde\076\uffde\001" +
    "\002\000\050\003\uffb2\011\uffb2\014\uffb2\015\uffb2\016\uffb2" +
    "\017\uffb2\020\uffb2\021\uffb2\024\uffb2\025\uffb2\026\uffb2\027" +
    "\uffb2\030\uffb2\031\uffb2\042\uffb2\046\uffb2\074\uffb2\075\uffb2" +
    "\076\uffb2\001\002\000\050\003\uffa3\011\uffa3\014\uffa3\015" +
    "\uffa3\016\uffa3\017\uffa3\020\uffa3\021\uffa3\024\uffa3\025\uffa3" +
    "\026\uffa3\027\uffa3\030\uffa3\031\uffa3\042\uffa3\046\uffa3\074" +
    "\uffa3\075\uffa3\076\uffa3\001\002\000\050\043\uffeb\044\uffeb" +
    "\045\uffeb\050\uffeb\052\uffeb\054\uffeb\056\uffeb\057\uffeb\060" +
    "\uffeb\061\uffeb\062\uffeb\063\uffeb\064\uffeb\065\uffeb\066\uffeb" +
    "\067\uffeb\070\uffeb\071\uffeb\072\uffeb\001\002\000\030\016" +
    "\037\020\043\047\073\073\075\076\067\077\103\100\107" +
    "\101\116\102\102\103\072\104\117\001\002\000\050\043" +
    "\uff6b\044\uff6b\045\uff6b\050\uff6b\052\uff6b\054\uff6b\056\uff6b" +
    "\057\uff6b\060\uff6b\061\uff6b\062\uff6b\063\uff6b\064\uff6b\065" +
    "\uff6b\066\uff6b\067\uff6b\070\uff6b\071\uff6b\072\uff6b\001\002" +
    "\000\030\016\037\020\043\047\073\073\075\076\067\077" +
    "\103\100\107\101\116\102\102\103\072\104\117\001\002" +
    "\000\050\043\uff7d\044\uff7d\045\uff7d\050\uff7d\052\uff7d\054" +
    "\uff7d\056\uff7d\057\uff7d\060\uff7d\061\uff7d\062\uff7d\063\uff7d" +
    "\064\uff7d\065\uff7d\066\uff7d\067\uff7d\070\uff7d\071\uff7d\072" +
    "\uff7d\001\002\000\020\043\uff77\044\uff77\045\uff77\050\uff77" +
    "\052\uff77\054\uff77\072\146\001\002\000\050\043\uff69\044" +
    "\uff69\045\uff69\050\uff69\052\uff69\054\uff69\056\uff69\057\uff69" +
    "\060\uff69\061\uff69\062\uff69\063\uff69\064\uff69\065\uff69\066" +
    "\uff69\067\uff69\070\uff69\071\uff69\072\uff69\001\002\000\026" +
    "\043\uff73\044\uff73\045\uff73\050\uff73\052\uff73\054\uff73\063" +
    "\142\070\144\071\uff73\072\uff73\001\002\000\050\043\uffef" +
    "\044\uffef\045\uffef\050\uffef\052\uffef\054\uffef\056\uffef\057" +
    "\uffef\060\uffef\061\uffef\062\uffef\063\uffef\064\uffef\065\uffef" +
    "\066\uffef\067\uffef\070\uffef\071\uffef\072\uffef\001\002\000" +
    "\050\043\uffed\044\uffed\045\uffed\050\uffed\052\uffed\054\uffed" +
    "\056\uffed\057\uffed\060\uffed\061\uffed\062\uffed\063\uffed\064" +
    "\uffed\065\uffed\066\uffed\067\uffed\070\uffed\071\uffed\072\uffed" +
    "\001\002\000\050\043\uff7c\044\uff7c\045\uff7c\050\uff7c\052" +
    "\uff7c\054\uff7c\056\uff7c\057\uff7c\060\uff7c\061\uff7c\062\uff7c" +
    "\063\uff7c\064\uff7c\065\uff7c\066\uff7c\067\uff7c\070\uff7c\071" +
    "\uff7c\072\uff7c\001\002\000\042\043\uff6f\044\uff6f\045\uff6f" +
    "\050\uff6f\052\uff6f\054\uff6f\056\137\057\140\063\uff6f\064" +
    "\uff6f\065\uff6f\066\uff6f\067\uff6f\070\uff6f\071\uff6f\072\uff6f" +
    "\001\002\000\036\043\uff71\044\uff71\045\uff71\050\uff71\052" +
    "\uff71\054\uff71\063\uff71\064\131\065\134\066\132\067\130" +
    "\070\uff71\071\uff71\072\uff71\001\002\000\050\043\uffec\044" +
    "\uffec\045\uffec\050\uffec\052\uffec\054\uffec\056\uffec\057\uffec" +
    "\060\uffec\061\uffec\062\uffec\063\uffec\064\uffec\065\uffec\066" +
    "\uffec\067\uffec\070\uffec\071\uffec\072\uffec\001\002\000\022" +
    "\043\uff75\044\uff75\045\uff75\050\uff75\052\uff75\054\uff75\071" +
    "\126\072\uff75\001\002\000\004\043\125\001\002\000\050" +
    "\043\uff7b\044\uff7b\045\uff7b\050\uff7b\052\uff7b\054\uff7b\056" +
    "\uff7b\057\uff7b\060\uff7b\061\uff7b\062\uff7b\063\uff7b\064\uff7b" +
    "\065\uff7b\066\uff7b\067\uff7b\070\uff7b\071\uff7b\072\uff7b\001" +
    "\002\000\016\043\uff79\044\uff79\045\uff79\050\uff79\052\uff79" +
    "\054\uff79\001\002\000\050\043\uff6d\044\uff6d\045\uff6d\050" +
    "\uff6d\052\uff6d\054\uff6d\056\uff6d\057\uff6d\060\123\061\122" +
    "\062\121\063\uff6d\064\uff6d\065\uff6d\066\uff6d\067\uff6d\070" +
    "\uff6d\071\uff6d\072\uff6d\001\002\000\004\043\uff7e\001\002" +
    "\000\050\043\uffee\044\uffee\045\uffee\050\uffee\052\uffee\054" +
    "\uffee\056\uffee\057\uffee\060\uffee\061\uffee\062\uffee\063\uffee" +
    "\064\uffee\065\uffee\066\uffee\067\uffee\070\uffee\071\uffee\072" +
    "\uffee\001\002\000\050\043\uffea\044\uffea\045\uffea\050\uffea" +
    "\052\uffea\054\uffea\056\uffea\057\uffea\060\uffea\061\uffea\062" +
    "\uffea\063\uffea\064\uffea\065\uffea\066\uffea\067\uffea\070\uffea" +
    "\071\uffea\072\uffea\001\002\000\030\016\037\020\043\047" +
    "\073\073\075\076\067\077\103\100\107\101\116\102\102" +
    "\103\072\104\117\001\002\000\030\016\uff5e\020\uff5e\047" +
    "\uff5e\073\uff5e\076\uff5e\077\uff5e\100\uff5e\101\uff5e\102\uff5e" +
    "\103\uff5e\104\uff5e\001\002\000\030\016\uff5f\020\uff5f\047" +
    "\uff5f\073\uff5f\076\uff5f\077\uff5f\100\uff5f\101\uff5f\102\uff5f" +
    "\103\uff5f\104\uff5f\001\002\000\030\016\uff60\020\uff60\047" +
    "\uff60\073\uff60\076\uff60\077\uff60\100\uff60\101\uff60\102\uff60" +
    "\103\uff60\104\uff60\001\002\000\042\043\uff6e\044\uff6e\045" +
    "\uff6e\050\uff6e\052\uff6e\054\uff6e\056\uff6e\057\uff6e\063\uff6e" +
    "\064\uff6e\065\uff6e\066\uff6e\067\uff6e\070\uff6e\071\uff6e\072" +
    "\uff6e\001\002\000\050\003\uff9d\011\uff9d\014\uff9d\015\uff9d" +
    "\016\uff9d\017\uff9d\020\uff9d\021\uff9d\024\uff9d\025\uff9d\026" +
    "\uff9d\027\uff9d\030\uff9d\031\uff9d\042\uff9d\046\uff9d\074\uff9d" +
    "\075\uff9d\076\uff9d\001\002\000\030\016\037\020\043\047" +
    "\073\073\075\076\067\077\103\100\107\101\116\102\102" +
    "\103\072\104\117\001\002\000\020\043\uff76\044\uff76\045" +
    "\uff76\050\uff76\052\uff76\054\uff76\072\uff76\001\002\000\030" +
    "\016\uff66\020\uff66\047\uff66\073\uff66\076\uff66\077\uff66\100" +
    "\uff66\101\uff66\102\uff66\103\uff66\104\uff66\001\002\000\030" +
    "\016\uff63\020\uff63\047\uff63\073\uff63\076\uff63\077\uff63\100" +
    "\uff63\101\uff63\102\uff63\103\uff63\104\uff63\001\002\000\030" +
    "\016\uff64\020\uff64\047\uff64\073\uff64\076\uff64\077\uff64\100" +
    "\uff64\101\uff64\102\uff64\103\uff64\104\uff64\001\002\000\030" +
    "\016\037\020\043\047\073\073\075\076\067\077\103\100" +
    "\107\101\116\102\102\103\072\104\117\001\002\000\030" +
    "\016\uff65\020\uff65\047\uff65\073\uff65\076\uff65\077\uff65\100" +
    "\uff65\101\uff65\102\uff65\103\uff65\104\uff65\001\002\000\026" +
    "\043\uff72\044\uff72\045\uff72\050\uff72\052\uff72\054\uff72\063" +
    "\uff72\070\uff72\071\uff72\072\uff72\001\002\000\030\016\037" +
    "\020\043\047\073\073\075\076\067\077\103\100\107\101" +
    "\116\102\102\103\072\104\117\001\002\000\030\016\uff62" +
    "\020\uff62\047\uff62\073\uff62\076\uff62\077\uff62\100\uff62\101" +
    "\uff62\102\uff62\103\uff62\104\uff62\001\002\000\030\016\uff61" +
    "\020\uff61\047\uff61\073\uff61\076\uff61\077\uff61\100\uff61\101" +
    "\uff61\102\uff61\103\uff61\104\uff61\001\002\000\036\043\uff70" +
    "\044\uff70\045\uff70\050\uff70\052\uff70\054\uff70\063\uff70\064" +
    "\uff70\065\uff70\066\uff70\067\uff70\070\uff70\071\uff70\072\uff70" +
    "\001\002\000\030\016\uff67\020\uff67\047\uff67\073\uff67\076" +
    "\uff67\077\uff67\100\uff67\101\uff67\102\uff67\103\uff67\104\uff67" +
    "\001\002\000\030\016\037\020\043\047\073\073\075\076" +
    "\067\077\103\100\107\101\116\102\102\103\072\104\117" +
    "\001\002\000\030\016\uff68\020\uff68\047\uff68\073\uff68\076" +
    "\uff68\077\uff68\100\uff68\101\uff68\102\uff68\103\uff68\104\uff68" +
    "\001\002\000\022\043\uff74\044\uff74\045\uff74\050\uff74\052" +
    "\uff74\054\uff74\071\uff74\072\uff74\001\002\000\030\016\037" +
    "\020\043\047\073\073\075\076\067\077\103\100\107\101" +
    "\116\102\102\103\072\104\117\001\002\000\016\043\uff78" +
    "\044\uff78\045\uff78\050\uff78\052\uff78\054\uff78\001\002\000" +
    "\050\043\uff6c\044\uff6c\045\uff6c\050\uff6c\052\uff6c\054\uff6c" +
    "\056\uff6c\057\uff6c\060\uff6c\061\uff6c\062\uff6c\063\uff6c\064" +
    "\uff6c\065\uff6c\066\uff6c\067\uff6c\070\uff6c\071\uff6c\072\uff6c" +
    "\001\002\000\004\050\152\001\002\000\050\043\uff6a\044" +
    "\uff6a\045\uff6a\050\uff6a\052\uff6a\054\uff6a\056\uff6a\057\uff6a" +
    "\060\uff6a\061\uff6a\062\uff6a\063\uff6a\064\uff6a\065\uff6a\066" +
    "\uff6a\067\uff6a\070\uff6a\071\uff6a\072\uff6a\001\002\000\050" +
    "\003\uffa8\011\uffa8\014\uffa8\015\uffa8\016\uffa8\017\uffa8\020" +
    "\uffa8\021\uffa8\024\uffa8\025\uffa8\026\uffa8\027\uffa8\030\uffa8" +
    "\031\uffa8\042\uffa8\046\uffa8\074\uffa8\075\uffa8\076\uffa8\001" +
    "\002\000\030\016\037\020\043\047\073\073\075\076\067" +
    "\077\103\100\107\101\116\102\102\103\072\104\117\001" +
    "\002\000\004\050\156\001\002\000\006\003\020\046\022" +
    "\001\002\000\054\003\uff8d\011\uff8d\014\uff8d\015\uff8d\016" +
    "\uff8d\017\uff8d\020\uff8d\021\uff8d\022\161\023\162\024\uff8d" +
    "\025\uff8d\026\uff8d\027\uff8d\030\uff8d\031\uff8d\042\uff8d\046" +
    "\uff8d\074\uff8d\075\uff8d\076\uff8d\001\002\000\050\003\uff90" +
    "\011\uff90\014\uff90\015\uff90\016\uff90\017\uff90\020\uff90\021" +
    "\uff90\024\uff90\025\uff90\026\uff90\027\uff90\030\uff90\031\uff90" +
    "\042\uff90\046\uff90\074\uff90\075\uff90\076\uff90\001\002\000" +
    "\006\003\172\046\022\001\002\000\006\003\163\047\164" +
    "\001\002\000\004\043\171\001\002\000\030\016\037\020" +
    "\043\047\073\073\075\076\067\077\103\100\107\101\116" +
    "\102\102\103\072\104\117\001\002\000\004\050\166\001" +
    "\002\000\006\003\020\046\022\001\002\000\054\003\uff8d" +
    "\011\uff8d\014\uff8d\015\uff8d\016\uff8d\017\uff8d\020\uff8d\021" +
    "\uff8d\022\161\023\162\024\uff8d\025\uff8d\026\uff8d\027\uff8d" +
    "\030\uff8d\031\uff8d\042\uff8d\046\uff8d\074\uff8d\075\uff8d\076" +
    "\uff8d\001\002\000\050\003\uff8e\011\uff8e\014\uff8e\015\uff8e" +
    "\016\uff8e\017\uff8e\020\uff8e\021\uff8e\024\uff8e\025\uff8e\026" +
    "\uff8e\027\uff8e\030\uff8e\031\uff8e\042\uff8e\046\uff8e\074\uff8e" +
    "\075\uff8e\076\uff8e\001\002\000\050\003\uff8b\011\uff8b\014" +
    "\uff8b\015\uff8b\016\uff8b\017\uff8b\020\uff8b\021\uff8b\024\uff8b" +
    "\025\uff8b\026\uff8b\027\uff8b\030\uff8b\031\uff8b\042\uff8b\046" +
    "\uff8b\074\uff8b\075\uff8b\076\uff8b\001\002\000\052\003\uffb8" +
    "\011\uffb8\014\uffb8\015\uffb8\016\uffb8\017\uffb8\020\uffb8\021" +
    "\uffb8\024\uffb8\025\uffb8\026\uffb8\027\uffb8\030\uffb8\031\uffb8" +
    "\042\uffb8\043\174\046\uffb8\074\uffb8\075\uffb8\076\uffb8\001" +
    "\002\000\050\003\uff8f\011\uff8f\014\uff8f\015\uff8f\016\uff8f" +
    "\017\uff8f\020\uff8f\021\uff8f\024\uff8f\025\uff8f\026\uff8f\027" +
    "\uff8f\030\uff8f\031\uff8f\042\uff8f\046\uff8f\074\uff8f\075\uff8f" +
    "\076\uff8f\001\002\000\050\003\uff8c\011\uff8c\014\uff8c\015" +
    "\uff8c\016\uff8c\017\uff8c\020\uff8c\021\uff8c\024\uff8c\025\uff8c" +
    "\026\uff8c\027\uff8c\030\uff8c\031\uff8c\042\uff8c\046\uff8c\074" +
    "\uff8c\075\uff8c\076\uff8c\001\002\000\004\043\176\001\002" +
    "\000\050\003\uff97\011\uff97\014\uff97\015\uff97\016\uff97\017" +
    "\uff97\020\uff97\021\uff97\024\uff97\025\uff97\026\uff97\027\uff97" +
    "\030\uff97\031\uff97\042\uff97\046\uff97\074\uff97\075\uff97\076" +
    "\uff97\001\002\000\050\003\uffa2\011\uffa2\014\uffa2\015\uffa2" +
    "\016\uffa2\017\uffa2\020\uffa2\021\uffa2\024\uffa2\025\uffa2\026" +
    "\uffa2\027\uffa2\030\uffa2\031\uffa2\042\uffa2\046\uffa2\074\uffa2" +
    "\075\uffa2\076\uffa2\001\002\000\010\050\uffe9\051\237\076" +
    "\uffe9\001\002\000\010\050\uffe4\051\uffe4\076\uffe4\001\002" +
    "\000\010\050\uffe6\051\uffe6\076\uffe6\001\002\000\010\047" +
    "\uffe1\050\uffe1\076\uffe1\001\002\000\014\045\244\047\uffe2" +
    "\050\uffe2\051\237\076\uffe2\001\002\000\010\050\uffe3\051" +
    "\uffe3\076\uffe3\001\002\000\004\043\243\001\002\000\010" +
    "\050\uffe7\051\uffe7\076\uffe7\001\002\000\004\076\213\001" +
    "\002\000\006\050\uffe8\076\uffe8\001\002\000\010\050\uffe5" +
    "\051\uffe5\076\uffe5\001\002\000\006\040\214\043\uffcc\001" +
    "\002\000\034\012\220\016\037\020\043\047\073\053\217" +
    "\073\075\076\067\077\103\100\107\101\116\102\102\103" +
    "\072\104\117\001\002\000\004\043\216\001\002\000\054" +
    "\003\uffcf\005\uffcf\011\uffcf\014\uffcf\015\uffcf\016\uffcf\017" +
    "\uffcf\020\uffcf\021\uffcf\024\uffcf\025\uffcf\026\uffcf\027\uffcf" +
    "\030\uffcf\031\uffcf\041\uffcf\042\uffcf\046\uffcf\074\uffcf\075" +
    "\uffcf\076\uffcf\001\002\000\036\012\220\016\037\020\043" +
    "\047\073\053\217\054\uffbe\073\075\076\067\077\103\100" +
    "\107\101\116\102\102\103\072\104\117\001\002\000\016" +
    "\032\207\033\202\034\201\035\212\036\205\076\067\001" +
    "\002\000\012\043\uffcb\044\uffcb\050\uffcb\054\uffcb\001\002" +
    "\000\006\043\uffcd\050\uffcd\001\002\000\012\043\uffc9\044" +
    "\uffc9\050\uffc9\054\uffc9\001\002\000\012\043\uffca\044\uffca" +
    "\050\uffca\054\uffca\001\002\000\004\051\237\001\002\000" +
    "\004\047\227\001\002\000\036\012\220\016\037\020\043" +
    "\047\073\050\uffbe\053\217\073\075\076\067\077\103\100" +
    "\107\101\116\102\102\103\072\104\117\001\002\000\006" +
    "\050\uffbf\054\uffbf\001\002\000\010\044\234\050\uffbc\054" +
    "\uffbc\001\002\000\004\050\233\001\002\000\012\043\uffd0" +
    "\044\uffd0\050\uffd0\054\uffd0\001\002\000\034\012\220\016" +
    "\037\020\043\047\073\053\217\073\075\076\067\077\103" +
    "\100\107\101\116\102\102\103\072\104\117\001\002\000" +
    "\006\050\uffbd\054\uffbd\001\002\000\010\047\uffe0\050\uffe0" +
    "\076\uffe0\001\002\000\004\052\240\001\002\000\010\047" +
    "\uffbb\050\uffbb\076\uffbb\001\002\000\004\054\242\001\002" +
    "\000\012\043\uffc0\044\uffc0\050\uffc0\054\uffc0\001\002\000" +
    "\054\003\uffce\005\uffce\011\uffce\014\uffce\015\uffce\016\uffce" +
    "\017\uffce\020\uffce\021\uffce\024\uffce\025\uffce\026\uffce\027" +
    "\uffce\030\uffce\031\uffce\041\uffce\042\uffce\046\uffce\074\uffce" +
    "\075\uffce\076\uffce\001\002\000\004\076\246\001\002\000" +
    "\010\047\uffdf\050\uffdf\076\uffdf\001\002\000\064\040\uffdd" +
    "\043\uffdd\044\uffdd\045\uffdd\047\uffdd\050\uffdd\051\uffdd\052" +
    "\uffdd\054\uffdd\056\uffdd\057\uffdd\060\uffdd\061\uffdd\062\uffdd" +
    "\063\uffdd\064\uffdd\065\uffdd\066\uffdd\067\uffdd\070\uffdd\071" +
    "\uffdd\072\uffdd\074\uffdd\075\uffdd\076\uffdd\001\002\000\010" +
    "\025\uffb5\026\uffb5\046\uffb5\001\002\000\004\043\256\001" +
    "\002\000\030\016\037\020\043\047\073\073\075\076\067" +
    "\077\103\100\107\101\116\102\102\103\072\104\117\001" +
    "\002\000\004\050\253\001\002\000\010\003\020\043\254" +
    "\046\022\001\002\000\050\003\uff83\011\uff83\014\uff83\015" +
    "\uff83\016\uff83\017\uff83\020\uff83\021\uff83\024\uff83\025\uff83" +
    "\026\uff83\027\uff83\030\uff83\031\uff83\042\uff83\046\uff83\074" +
    "\uff83\075\uff83\076\uff83\001\002\000\050\003\uff84\011\uff84" +
    "\014\uff84\015\uff84\016\uff84\017\uff84\020\uff84\021\uff84\024" +
    "\uff84\025\uff84\026\uff84\027\uff84\030\uff84\031\uff84\042\uff84" +
    "\046\uff84\074\uff84\075\uff84\076\uff84\001\002\000\050\003" +
    "\uffa6\011\uffa6\014\uffa6\015\uffa6\016\uffa6\017\uffa6\020\uffa6" +
    "\021\uffa6\024\uffa6\025\uffa6\026\uffa6\027\uffa6\030\uffa6\031" +
    "\uffa6\042\uffa6\046\uffa6\074\uffa6\075\uffa6\076\uffa6\001\002" +
    "\000\004\043\260\001\002\000\050\003\uff98\011\uff98\014" +
    "\uff98\015\uff98\016\uff98\017\uff98\020\uff98\021\uff98\024\uff98" +
    "\025\uff98\026\uff98\027\uff98\030\uff98\031\uff98\042\uff98\046" +
    "\uff98\074\uff98\075\uff98\076\uff98\001\002\000\050\043\uff99" +
    "\044\uff99\045\uff99\050\uff99\052\uff99\054\uff99\056\uff99\057" +
    "\uff99\060\uff99\061\uff99\062\uff99\063\uff99\064\uff99\065\uff99" +
    "\066\uff99\067\uff99\070\uff99\071\uff99\072\uff99\001\002\000" +
    "\016\032\207\033\202\034\201\035\212\036\205\076\067" +
    "\001\002\000\004\050\264\001\002\000\050\043\uff91\044" +
    "\uff91\045\uff91\050\uff91\052\uff91\054\uff91\056\uff91\057\uff91" +
    "\060\uff91\061\uff91\062\uff91\063\uff91\064\uff91\065\uff91\066" +
    "\uff91\067\uff91\070\uff91\071\uff91\072\uff91\001\002\000\004" +
    "\043\271\001\002\000\004\043\270\001\002\000\006\043" +
    "\uff94\050\uff94\001\002\000\050\003\uff96\011\uff96\014\uff96" +
    "\015\uff96\016\uff96\017\uff96\020\uff96\021\uff96\024\uff96\025" +
    "\uff96\026\uff96\027\uff96\030\uff96\031\uff96\042\uff96\046\uff96" +
    "\074\uff96\075\uff96\076\uff96\001\002\000\050\003\uff95\011" +
    "\uff95\014\uff95\015\uff95\016\uff95\017\uff95\020\uff95\021\uff95" +
    "\024\uff95\025\uff95\026\uff95\027\uff95\030\uff95\031\uff95\042" +
    "\uff95\046\uff95\074\uff95\075\uff95\076\uff95\001\002\000\050" +
    "\003\uffa1\011\uffa1\014\uffa1\015\uffa1\016\uffa1\017\uffa1\020" +
    "\uffa1\021\uffa1\024\uffa1\025\uffa1\026\uffa1\027\uffa1\030\uffa1" +
    "\031\uffa1\042\uffa1\046\uffa1\074\uffa1\075\uffa1\076\uffa1\001" +
    "\002\000\030\016\037\020\043\047\073\073\075\076\067" +
    "\077\103\100\107\101\116\102\102\103\072\104\117\001" +
    "\002\000\056\040\uffdb\043\uffdb\044\uffdb\045\uffdb\050\uffdb" +
    "\052\uffdb\054\uffdb\056\uffdb\057\uffdb\060\uffdb\061\uffdb\062" +
    "\uffdb\063\uffdb\064\uffdb\065\uffdb\066\uffdb\067\uffdb\070\uffdb" +
    "\071\uffdb\072\uffdb\074\uffdb\075\uffdb\001\002\000\004\052" +
    "\276\001\002\000\056\040\uffba\043\uffba\044\uffba\045\uffba" +
    "\050\uffba\052\uffba\054\uffba\056\uffba\057\uffba\060\uffba\061" +
    "\uffba\062\uffba\063\uffba\064\uffba\065\uffba\066\uffba\067\uffba" +
    "\070\uffba\071\uffba\072\uffba\074\uffba\075\uffba\001\002\000" +
    "\006\045\244\047\301\001\002\000\050\043\uff9a\044\uff9a" +
    "\045\uff9a\050\uff9a\052\uff9a\054\uff9a\056\uff9a\057\uff9a\060" +
    "\uff9a\061\uff9a\062\uff9a\063\uff9a\064\uff9a\065\uff9a\066\uff9a" +
    "\067\uff9a\070\uff9a\071\uff9a\072\uff9a\001\002\000\036\012" +
    "\220\016\037\020\043\047\073\050\uffbe\053\217\073\075" +
    "\076\067\077\103\100\107\101\116\102\102\103\072\104" +
    "\117\001\002\000\004\050\303\001\002\000\050\043\uff93" +
    "\044\uff93\045\uff93\050\uff93\052\uff93\054\uff93\056\uff93\057" +
    "\uff93\060\uff93\061\uff93\062\uff93\063\uff93\064\uff93\065\uff93" +
    "\066\uff93\067\uff93\070\uff93\071\uff93\072\uff93\001\002\000" +
    "\006\027\uffb8\043\313\001\002\000\004\027\306\001\002" +
    "\000\004\047\307\001\002\000\030\016\037\020\043\047" +
    "\073\073\075\076\067\077\103\100\107\101\116\102\102" +
    "\103\072\104\117\001\002\000\004\050\311\001\002\000" +
    "\004\043\312\001\002\000\050\003\uff82\011\uff82\014\uff82" +
    "\015\uff82\016\uff82\017\uff82\020\uff82\021\uff82\024\uff82\025" +
    "\uff82\026\uff82\027\uff82\030\uff82\031\uff82\042\uff82\046\uff82" +
    "\074\uff82\075\uff82\076\uff82\001\002\000\050\003\uffa5\011" +
    "\uffa5\014\uffa5\015\uffa5\016\uffa5\017\uffa5\020\uffa5\021\uffa5" +
    "\024\uffa5\025\uffa5\026\uffa5\027\uffa5\030\uffa5\031\uffa5\042" +
    "\uffa5\046\uffa5\074\uffa5\075\uffa5\076\uffa5\001\002\000\050" +
    "\003\uff9f\011\uff9f\014\uff9f\015\uff9f\016\uff9f\017\uff9f\020" +
    "\uff9f\021\uff9f\024\uff9f\025\uff9f\026\uff9f\027\uff9f\030\uff9f" +
    "\031\uff9f\042\uff9f\046\uff9f\074\uff9f\075\uff9f\076\uff9f\001" +
    "\002\000\004\043\334\001\002\000\004\076\067\001\002" +
    "\000\006\040\214\043\uffcc\001\002\000\004\043\321\001" +
    "\002\000\030\016\037\020\043\047\073\073\075\076\067" +
    "\077\103\100\107\101\116\102\102\103\072\104\117\001" +
    "\002\000\030\016\037\020\043\047\073\073\075\076\067" +
    "\077\103\100\107\101\116\102\102\103\072\104\117\001" +
    "\002\000\004\043\324\001\002\000\032\016\uff7a\020\uff7a" +
    "\047\uff7a\050\uff7a\073\uff7a\076\uff7a\077\uff7a\100\uff7a\101" +
    "\uff7a\102\uff7a\103\uff7a\104\uff7a\001\002\000\004\050\332" +
    "\001\002\000\042\040\214\043\uff7d\050\uffcc\056\uff7d\057" +
    "\uff7d\060\uff7d\061\uff7d\062\uff7d\063\uff7d\064\uff7d\065\uff7d" +
    "\066\uff7d\067\uff7d\070\uff7d\071\uff7d\072\uff7d\001\002\000" +
    "\004\050\330\001\002\000\006\003\020\046\022\001\002" +
    "\000\050\003\uff81\011\uff81\014\uff81\015\uff81\016\uff81\017" +
    "\uff81\020\uff81\021\uff81\024\uff81\025\uff81\026\uff81\027\uff81" +
    "\030\uff81\031\uff81\042\uff81\046\uff81\074\uff81\075\uff81\076" +
    "\uff81\001\002\000\006\003\020\046\022\001\002\000\050" +
    "\003\uff80\011\uff80\014\uff80\015\uff80\016\uff80\017\uff80\020" +
    "\uff80\021\uff80\024\uff80\025\uff80\026\uff80\027\uff80\030\uff80" +
    "\031\uff80\042\uff80\046\uff80\074\uff80\075\uff80\076\uff80\001" +
    "\002\000\050\003\uffa4\011\uffa4\014\uffa4\015\uffa4\016\uffa4" +
    "\017\uffa4\020\uffa4\021\uffa4\024\uffa4\025\uffa4\026\uffa4\027" +
    "\uffa4\030\uffa4\031\uffa4\042\uffa4\046\uffa4\074\uffa4\075\uffa4" +
    "\076\uffa4\001\002\000\066\002\uffb9\003\uffb9\005\uffb9\010" +
    "\uffb9\011\uffb9\013\uffb9\014\uffb9\015\uffb9\016\uffb9\017\uffb9" +
    "\020\uffb9\021\uffb9\022\uffb9\023\uffb9\024\uffb9\025\uffb9\026" +
    "\uffb9\027\uffb9\030\uffb9\031\uffb9\041\uffb9\042\uffb9\046\uffb9" +
    "\074\uffb9\075\uffb9\076\uffb9\001\002\000\004\043\361\001" +
    "\002\000\030\016\037\020\043\047\073\073\075\076\067" +
    "\077\103\100\107\101\116\102\102\103\072\104\117\001" +
    "\002\000\004\050\341\001\002\000\004\046\342\001\002" +
    "\000\010\025\345\026\344\046\uff85\001\002\000\004\046" +
    "\360\001\002\000\006\003\354\045\355\001\002\000\032" +
    "\003\346\016\037\020\043\047\073\073\075\076\067\077" +
    "\103\100\107\101\116\102\102\103\072\104\117\001\002" +
    "\000\004\043\353\001\002\000\004\045\350\001\002\000" +
    "\050\003\045\011\054\014\023\015\033\016\037\017\024" +
    "\020\043\021\061\024\025\025\uffb6\026\uffb6\027\051\030" +
    "\034\031\027\042\062\046\uffb6\074\050\075\057\076\067" +
    "\001\002\000\010\025\345\026\344\046\uff85\001\002\000" +
    "\004\046\uff89\001\002\000\004\046\uff88\001\002\000\004" +
    "\043\357\001\002\000\044\003\045\011\054\014\023\015" +
    "\033\016\037\017\024\020\043\021\061\024\025\027\051" +
    "\030\034\031\027\042\062\046\uffb6\074\050\075\057\076" +
    "\067\001\002\000\004\046\uff87\001\002\000\004\046\uff86" +
    "\001\002\000\050\003\uff8a\011\uff8a\014\uff8a\015\uff8a\016" +
    "\uff8a\017\uff8a\020\uff8a\021\uff8a\024\uff8a\025\uff8a\026\uff8a" +
    "\027\uff8a\030\uff8a\031\uff8a\042\uff8a\046\uff8a\074\uff8a\075" +
    "\uff8a\076\uff8a\001\002\000\050\003\uffa7\011\uffa7\014\uffa7" +
    "\015\uffa7\016\uffa7\017\uffa7\020\uffa7\021\uffa7\024\uffa7\025" +
    "\uffa7\026\uffa7\027\uffa7\030\uffa7\031\uffa7\042\uffa7\046\uffa7" +
    "\074\uffa7\075\uffa7\076\uffa7\001\002\000\004\043\366\001" +
    "\002\000\030\016\037\020\043\047\073\073\075\076\067" +
    "\077\103\100\107\101\116\102\102\103\072\104\117\001" +
    "\002\000\004\050\365\001\002\000\004\043\uff92\001\002" +
    "\000\050\003\uff9e\011\uff9e\014\uff9e\015\uff9e\016\uff9e\017" +
    "\uff9e\020\uff9e\021\uff9e\024\uff9e\025\uff9e\026\uff9e\027\uff9e" +
    "\030\uff9e\031\uff9e\042\uff9e\046\uff9e\074\uff9e\075\uff9e\076" +
    "\uff9e\001\002\000\050\003\uffa0\011\uffa0\014\uffa0\015\uffa0" +
    "\016\uffa0\017\uffa0\020\uffa0\021\uffa0\024\uffa0\025\uffa0\026" +
    "\uffa0\027\uffa0\030\uffa0\031\uffa0\042\uffa0\046\uffa0\074\uffa0" +
    "\075\uffa0\076\uffa0\001\002\000\006\010\ufff2\013\373\001" +
    "\002\000\004\010\u010a\001\002\000\004\010\ufff4\001\002" +
    "\000\004\076\374\001\002\000\004\046\376\001\002\000" +
    "\006\010\uffda\013\uffda\001\002\000\012\005\012\011\054" +
    "\041\u0101\046\uffd7\001\002\000\004\046\u0109\001\002\000" +
    "\012\005\uffd3\011\uffd3\041\uffd3\046\uffd3\001\002\000\004" +
    "\076\u0107\001\002\000\012\005\uffd2\011\uffd2\041\uffd2\046" +
    "\uffd2\001\002\000\012\005\012\011\054\041\u0101\046\uffd5" +
    "\001\002\000\004\046\uffd8\001\002\000\012\005\uffd4\011" +
    "\uffd4\041\uffd4\046\uffd4\001\002\000\004\046\uffd6\001\002" +
    "\000\006\003\020\046\022\001\002\000\012\005\uffd1\011" +
    "\uffd1\041\uffd1\046\uffd1\001\002\000\006\010\uffd9\013\uffd9" +
    "\001\002\000\006\003\020\046\022\001\002\000\004\002" +
    "\000\001\002\000\004\002\ufff0\001\002\000\004\010\ufff1" +
    "\001\002\000\004\006\u010f\001\002\000\004\047\u0110\001" +
    "\002\000\020\032\207\033\202\034\201\035\212\036\205" +
    "\050\uffc4\076\067\001\002\000\004\050\uffc5\001\002\000" +
    "\004\076\u011c\001\002\000\004\050\u0117\001\002\000\006" +
    "\044\u0115\050\uffc2\001\002\000\016\032\207\033\202\034" +
    "\201\035\212\036\205\076\067\001\002\000\004\050\uffc3" +
    "\001\002\000\004\007\u0118\001\002\000\020\032\207\033" +
    "\202\034\201\035\212\036\205\037\u0119\076\067\001\002" +
    "\000\006\003\uffc6\046\uffc6\001\002\000\004\076\u011b\001" +
    "\002\000\006\003\uffc7\046\uffc7\001\002\000\006\044\uffc1" +
    "\050\uffc1\001\002\000\004\043\u0122\001\002\000\004\040" +
    "\u011f\001\002\000\030\016\037\020\043\047\073\073\075" +
    "\076\067\077\103\100\107\101\116\102\102\103\072\104" +
    "\117\001\002\000\004\043\u0121\001\002\000\014\003\ufffb" +
    "\004\ufffb\005\ufffb\010\ufffb\013\ufffb\001\002\000\014\003" +
    "\ufffa\004\ufffa\005\ufffa\010\ufffa\013\ufffa\001\002\000\014" +
    "\003\ufff9\004\ufff9\005\ufff9\010\ufff9\013\ufff9\001\002\000" +
    "\010\005\ufffc\010\ufffc\013\ufffc\001\002\000\004\002\001" +
    "\001\002" });

  /** Access to parse-action table. */
  public short[][] action_table() {return _action_table;}

  /** <code>reduce_goto</code> table. */
  protected static final short[][] _reduce_table = 
    unpackFromStrings(new String[] {
    "\000\u0123\000\012\002\003\003\010\004\004\005\005\001" +
    "\001\000\002\001\001\000\002\001\001\000\006\004\u0123" +
    "\005\005\001\001\000\002\001\001\000\002\001\001\000" +
    "\012\006\013\007\012\034\015\035\014\001\001\000\002" +
    "\001\001\000\002\001\001\000\010\010\370\011\371\022" +
    "\367\001\001\000\004\046\020\001\001\000\010\007\016" +
    "\034\015\035\014\001\001\000\002\001\001\000\002\001" +
    "\001\000\002\001\001\000\054\020\037\021\041\031\043" +
    "\047\025\050\031\051\052\052\030\053\051\054\064\055" +
    "\035\056\063\057\027\060\054\061\065\062\046\064\055" +
    "\066\057\067\062\070\045\071\034\072\040\001\001\000" +
    "\002\001\001\000\002\001\001\000\002\001\001\000\002" +
    "\001\001\000\002\001\001\000\002\001\001\000\002\001" +
    "\001\000\002\001\001\000\002\001\001\000\004\046\304" +
    "\001\001\000\002\001\001\000\002\001\001\000\004\020" +
    "\276\001\001\000\004\045\273\001\001\000\002\001\001" +
    "\000\004\032\266\001\001\000\002\001\001\000\002\001" +
    "\001\000\002\001\001\000\002\001\001\000\002\001\001" +
    "\000\006\020\037\021\256\001\001\000\002\001\001\000" +
    "\002\001\001\000\052\020\037\021\041\031\043\050\246" +
    "\051\052\052\030\053\051\054\064\055\035\056\063\057" +
    "\027\060\054\061\065\062\046\064\055\066\057\067\062" +
    "\070\045\071\034\072\040\001\001\000\014\014\207\015" +
    "\177\016\210\017\202\020\203\001\001\000\002\001\001" +
    "\000\002\001\001\000\006\020\037\021\174\001\001\000" +
    "\002\001\001\000\002\001\001\000\042\013\111\020\037" +
    "\021\075\054\103\057\027\061\065\073\114\074\077\076" +
    "\112\077\076\100\107\101\100\102\105\103\104\104\113" +
    "\105\073\001\001\000\002\001\001\000\002\001\001\000" +
    "\002\001\001\000\002\001\001\000\002\001\001\000\002" +
    "\001\001\000\002\001\001\000\002\001\001\000\030\013" +
    "\111\020\037\021\075\054\103\057\027\061\065\074\077" +
    "\102\150\103\104\104\113\105\073\001\001\000\002\001" +
    "\001\000\024\013\111\020\037\021\075\054\103\057\027" +
    "\061\065\074\077\104\147\105\073\001\001\000\002\001" +
    "\001\000\002\001\001\000\002\001\001\000\004\106\142" +
    "\001\001\000\002\001\001\000\002\001\001\000\002\001" +
    "\001\000\004\110\135\001\001\000\004\107\132\001\001" +
    "\000\002\001\001\000\002\001\001\000\002\001\001\000" +
    "\002\001\001\000\002\001\001\000\004\111\117\001\001" +
    "\000\002\001\001\000\002\001\001\000\002\001\001\000" +
    "\026\013\111\020\037\021\075\054\103\057\027\061\065" +
    "\074\077\103\123\104\113\105\073\001\001\000\002\001" +
    "\001\000\002\001\001\000\002\001\001\000\002\001\001" +
    "\000\002\001\001\000\036\013\111\020\037\021\075\054" +
    "\103\057\027\061\065\074\077\077\126\100\107\101\100" +
    "\102\105\103\104\104\113\105\073\001\001\000\002\001" +
    "\001\000\002\001\001\000\002\001\001\000\002\001\001" +
    "\000\032\013\111\020\037\021\075\054\103\057\027\061" +
    "\065\074\077\101\134\102\105\103\104\104\113\105\073" +
    "\001\001\000\002\001\001\000\002\001\001\000\030\013" +
    "\111\020\037\021\075\054\103\057\027\061\065\074\077" +
    "\102\140\103\104\104\113\105\073\001\001\000\002\001" +
    "\001\000\002\001\001\000\002\001\001\000\002\001\001" +
    "\000\034\013\111\020\037\021\075\054\103\057\027\061" +
    "\065\074\077\100\144\101\100\102\105\103\104\104\113" +
    "\105\073\001\001\000\002\001\001\000\002\001\001\000" +
    "\040\013\111\020\037\021\075\054\103\057\027\061\065" +
    "\074\077\076\146\077\076\100\107\101\100\102\105\103" +
    "\104\104\113\105\073\001\001\000\002\001\001\000\002" +
    "\001\001\000\002\001\001\000\002\001\001\000\002\001" +
    "\001\000\042\013\111\020\037\021\075\054\103\057\027" +
    "\061\065\073\154\074\077\076\112\077\076\100\107\101" +
    "\100\102\105\103\104\104\113\105\073\001\001\000\002" +
    "\001\001\000\004\046\156\001\001\000\004\063\157\001" +
    "\001\000\002\001\001\000\004\046\172\001\001\000\002" +
    "\001\001\000\002\001\001\000\042\013\111\020\037\021" +
    "\075\054\103\057\027\061\065\073\164\074\077\076\112" +
    "\077\076\100\107\101\100\102\105\103\104\104\113\105" +
    "\073\001\001\000\002\001\001\000\004\046\166\001\001" +
    "\000\004\063\167\001\001\000\002\001\001\000\002\001" +
    "\001\000\002\001\001\000\002\001\001\000\002\001\001" +
    "\000\002\001\001\000\002\001\001\000\002\001\001\000" +
    "\004\044\235\001\001\000\002\001\001\000\002\001\001" +
    "\000\002\001\001\000\004\044\244\001\001\000\002\001" +
    "\001\000\002\001\001\000\002\001\001\000\002\001\001" +
    "\000\002\001\001\000\002\001\001\000\004\032\214\001" +
    "\001\000\050\013\111\020\037\021\075\030\223\033\221" +
    "\041\220\054\103\057\027\061\065\073\222\074\077\076" +
    "\112\077\076\100\107\101\100\102\105\103\104\104\113" +
    "\105\073\001\001\000\002\001\001\000\002\001\001\000" +
    "\054\013\111\020\037\021\075\030\223\033\230\041\220" +
    "\042\240\043\227\054\103\057\027\061\065\073\222\074" +
    "\077\076\112\077\076\100\107\101\100\102\105\103\104" +
    "\104\113\105\073\001\001\000\012\015\224\016\225\017" +
    "\202\020\203\001\001\000\002\001\001\000\002\001\001" +
    "\000\002\001\001\000\002\001\001\000\004\044\235\001" +
    "\001\000\002\001\001\000\054\013\111\020\037\021\075" +
    "\030\223\033\230\041\220\042\231\043\227\054\103\057" +
    "\027\061\065\073\222\074\077\076\112\077\076\100\107" +
    "\101\100\102\105\103\104\104\113\105\073\001\001\000" +
    "\002\001\001\000\002\001\001\000\002\001\001\000\002" +
    "\001\001\000\052\013\111\020\037\021\075\030\223\033" +
    "\230\041\220\043\234\054\103\057\027\061\065\073\222" +
    "\074\077\076\112\077\076\100\107\101\100\102\105\103" +
    "\104\104\113\105\073\001\001\000\002\001\001\000\002" +
    "\001\001\000\002\001\001\000\002\001\001\000\002\001" +
    "\001\000\002\001\001\000\002\001\001\000\002\001\001" +
    "\000\002\001\001\000\002\001\001\000\002\001\001\000" +
    "\002\001\001\000\042\013\111\020\037\021\075\054\103" +
    "\057\027\061\065\073\251\074\077\076\112\077\076\100" +
    "\107\101\100\102\105\103\104\104\113\105\073\001\001" +
    "\000\002\001\001\000\004\046\254\001\001\000\002\001" +
    "\001\000\002\001\001\000\002\001\001\000\002\001\001" +
    "\000\002\001\001\000\002\001\001\000\014\014\262\015" +
    "\177\016\210\017\202\020\203\001\001\000\002\001\001" +
    "\000\002\001\001\000\002\001\001\000\002\001\001\000" +
    "\002\001\001\000\002\001\001\000\002\001\001\000\002" +
    "\001\001\000\042\013\111\020\037\021\075\054\103\057" +
    "\027\061\065\073\274\074\077\076\112\077\076\100\107" +
    "\101\100\102\105\103\104\104\113\105\073\001\001\000" +
    "\002\001\001\000\002\001\001\000\002\001\001\000\002" +
    "\001\001\000\002\001\001\000\054\013\111\020\037\021" +
    "\075\030\223\033\230\041\220\042\301\043\227\054\103" +
    "\057\027\061\065\073\222\074\077\076\112\077\076\100" +
    "\107\101\100\102\105\103\104\104\113\105\073\001\001" +
    "\000\002\001\001\000\002\001\001\000\002\001\001\000" +
    "\002\001\001\000\002\001\001\000\042\013\111\020\037" +
    "\021\075\054\103\057\027\061\065\073\307\074\077\076" +
    "\112\077\076\100\107\101\100\102\105\103\104\104\113" +
    "\105\073\001\001\000\002\001\001\000\002\001\001\000" +
    "\002\001\001\000\002\001\001\000\002\001\001\000\002" +
    "\001\001\000\010\020\037\021\316\056\317\001\001\000" +
    "\004\032\266\001\001\000\002\001\001\000\044\013\111" +
    "\020\037\021\075\054\103\057\027\061\065\073\322\074" +
    "\077\075\321\076\112\077\076\100\107\101\100\102\105" +
    "\103\104\104\113\105\073\001\001\000\046\013\111\020" +
    "\037\021\325\054\103\056\326\057\027\061\065\073\322" +
    "\074\077\075\324\076\112\077\076\100\107\101\100\102" +
    "\105\103\104\104\113\105\073\001\001\000\002\001\001" +
    "\000\002\001\001\000\002\001\001\000\004\032\266\001" +
    "\001\000\002\001\001\000\004\046\330\001\001\000\002" +
    "\001\001\000\004\046\332\001\001\000\002\001\001\000" +
    "\002\001\001\000\002\001\001\000\002\001\001\000\042" +
    "\013\111\020\037\021\075\054\103\057\027\061\065\073" +
    "\337\074\077\076\112\077\076\100\107\101\100\102\105" +
    "\103\104\104\113\105\073\001\001\000\002\001\001\000" +
    "\002\001\001\000\004\065\342\001\001\000\002\001\001" +
    "\000\002\001\001\000\042\013\111\020\037\021\075\054" +
    "\103\057\027\061\065\073\346\074\077\076\112\077\076" +
    "\100\107\101\100\102\105\103\104\104\113\105\073\001" +
    "\001\000\002\001\001\000\002\001\001\000\054\020\037" +
    "\021\041\031\043\047\350\050\031\051\052\052\030\053" +
    "\051\054\064\055\035\056\063\057\027\060\054\061\065" +
    "\062\046\064\055\066\057\067\062\070\045\071\034\072" +
    "\040\001\001\000\004\065\351\001\001\000\002\001\001" +
    "\000\002\001\001\000\002\001\001\000\054\020\037\021" +
    "\041\031\043\047\355\050\031\051\052\052\030\053\051" +
    "\054\064\055\035\056\063\057\027\060\054\061\065\062" +
    "\046\064\055\066\057\067\062\070\045\071\034\072\040" +
    "\001\001\000\002\001\001\000\002\001\001\000\002\001" +
    "\001\000\002\001\001\000\002\001\001\000\042\013\111" +
    "\020\037\021\075\054\103\057\027\061\065\073\363\074" +
    "\077\076\112\077\076\100\107\101\100\102\105\103\104" +
    "\104\113\105\073\001\001\000\002\001\001\000\002\001" +
    "\001\000\002\001\001\000\002\001\001\000\006\011\u010c" +
    "\022\367\001\001\000\004\012\u010a\001\001\000\002\001" +
    "\001\000\002\001\001\000\004\023\374\001\001\000\002" +
    "\001\001\000\020\024\376\025\u0103\026\u0102\027\u0101\031" +
    "\u0104\034\377\035\014\001\001\000\002\001\001\000\002" +
    "\001\001\000\002\001\001\000\002\001\001\000\016\025" +
    "\u0105\026\u0102\027\u0101\031\u0104\034\377\035\014\001\001" +
    "\000\002\001\001\000\002\001\001\000\002\001\001\000" +
    "\004\046\u0107\001\001\000\002\001\001\000\002\001\001" +
    "\000\004\046\u010b\001\001\000\002\001\001\000\002\001" +
    "\001\000\002\001\001\000\002\001\001\000\002\001\001" +
    "\000\022\014\u0111\015\177\016\210\017\202\020\203\036" +
    "\u0112\037\u0110\040\u0113\001\001\000\002\001\001\000\002" +
    "\001\001\000\002\001\001\000\002\001\001\000\020\014" +
    "\u0111\015\177\016\210\017\202\020\203\037\u0115\040\u0113" +
    "\001\001\000\002\001\001\000\002\001\001\000\014\014" +
    "\u0119\015\177\016\210\017\202\020\203\001\001\000\002" +
    "\001\001\000\002\001\001\000\002\001\001\000\002\001" +
    "\001\000\002\001\001\000\002\001\001\000\042\013\111" +
    "\020\037\021\075\054\103\057\027\061\065\073\u011f\074" +
    "\077\076\112\077\076\100\107\101\100\102\105\103\104" +
    "\104\113\105\073\001\001\000\002\001\001\000\002\001" +
    "\001\000\002\001\001\000\002\001\001\000\002\001\001" +
    "\000\002\001\001" });

  /** Access to <code>reduce_goto</code> table. */
  public short[][] reduce_table() {return _reduce_table;}

  /** Instance of action encapsulation class. */
  protected CUP$Parser$actions action_obj;

  /** Action encapsulation object initializer. */
  protected void init_actions()
    {
      action_obj = new CUP$Parser$actions(this);
    }

  /** Invoke a user supplied parse action. */
  public java_cup.runtime.Symbol do_action(
    int                        act_num,
    java_cup.runtime.lr_parser parser,
    java.util.Stack            stack,
    int                        top)
    throws java.lang.Exception
  {
    /* call code in generated class */
    return action_obj.CUP$Parser$do_action(act_num, parser, stack, top);
  }

  /** Indicates start state. */
  public int start_state() {return 0;}
  /** Indicates start production. */
  public int start_production() {return 0;}

  /** <code>EOF</code> Symbol index. */
  public int EOF_sym() {return 0;}

  /** <code>error</code> Symbol index. */
  public int error_sym() {return 1;}



	StringBuilder sb = new StringBuilder();
	
	/*Error reporting*/
	public void report_error(String message, Object info) {
		sb.append("ERROR! ");
		
		/*Code borrowed from ycalc.cup*/
        if (info instanceof java_cup.runtime.Symbol) 
		{
            java_cup.runtime.Symbol s = ((java_cup.runtime.Symbol) info);
   
			/*Line number*/
            if (s.left >= 0) 
			{                
                sb.append("Line: " +(s.left+1));   
				/*Column number*/
                if (s.right >= 0)                    
                    sb.append(", Column: " +(s.right+1));
            }
        }
		 
		sb.append(" - " +message);
	}   
	public void report_fatal_error(String message, Object info) {
		report_error(message, info);
		throw new RuntimeException("Fatal Syntax Error");
	}
	
	public void addText(String text)
	{
		sb.append(text);
		//sb.append(" - Line " + MainConyo.s.lineNo());
		sb.append("\t\n");
	}
	public void printText()
	{
		if(sb.length() > 0)
			System.out.println(sb);
		else
			System.out.println("DONE.");
	}


/** Cup generated class to encapsulate user supplied action code.*/
@SuppressWarnings({"rawtypes", "unchecked", "unused"})
class CUP$Parser$actions {
  private final Parser parser;

  /** Constructor */
  CUP$Parser$actions(Parser parser) {
    this.parser = parser;
  }

  /** Method 0 with the actual generated action code for actions 0 to 300. */
  public final java_cup.runtime.Symbol CUP$Parser$do_action_part00000000(
    int                        CUP$Parser$act_num,
    java_cup.runtime.lr_parser CUP$Parser$parser,
    java.util.Stack            CUP$Parser$stack,
    int                        CUP$Parser$top)
    throws java.lang.Exception
    {
      /* Symbol object for return from actions */
      java_cup.runtime.Symbol CUP$Parser$result;

      /* select the action based on the action number */
      switch (CUP$Parser$act_num)
        {
          /*. . . . . . . . . . . . . . . . . . . .*/
          case 0: // $START ::= conyogram EOF 
            {
              Object RESULT =null;
		int start_valleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)).left;
		int start_valright = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)).right;
		Conyogram start_val = (Conyogram)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-1)).value;
		RESULT = start_val;
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("$START",0, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          /* ACCEPT */
          CUP$Parser$parser.done_parsing();
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 1: // conyogram ::= OMG_section yaya_section sub_yaya_section super_yaya 
            {
              Conyogram RESULT =null;
		int oleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-3)).left;
		int oright = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-3)).right;
		OMG_section o = (OMG_section)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-3)).value;
		int yleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)).left;
		int yright = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)).right;
		yaya_section y = (yaya_section)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-2)).value;
		int bleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)).left;
		int bright = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)).right;
		sub_yaya_section b = (sub_yaya_section)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-1)).value;
		int pleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).left;
		int pright = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).right;
		super_yaya p = (super_yaya)((java_cup.runtime.Symbol) CUP$Parser$stack.peek()).value;
		 
					RESULT = new Conyogram(o, y, b, p);
					printText(); 
				
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("conyogram",0, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-3)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 2: // OMG_section ::= OMG_list 
            {
              OMG_section RESULT =null;
		int oleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).left;
		int oright = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).right;
		OMG_list o = (OMG_list)((java_cup.runtime.Symbol) CUP$Parser$stack.peek()).value;
		 RESULT = new OMG_section.OMGSection(o); 
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("OMG_section",1, ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 3: // OMG_section ::= 
            {
              OMG_section RESULT =null;
		 RESULT = new OMG_section.OMGSection(); 
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("OMG_section",1, ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 4: // OMG_list ::= OMG_dec 
            {
              OMG_list RESULT =null;
		int oleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).left;
		int oright = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).right;
		OMG_dec o = (OMG_dec)((java_cup.runtime.Symbol) CUP$Parser$stack.peek()).value;
		 RESULT = new OMG_list.OMGList(o); 
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("OMG_list",2, ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 5: // OMG_list ::= OMG_dec OMG_list 
            {
              OMG_list RESULT =null;
		int oleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)).left;
		int oright = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)).right;
		OMG_dec o = (OMG_dec)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-1)).value;
		int lleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).left;
		int lright = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).right;
		OMG_list l = (OMG_list)((java_cup.runtime.Symbol) CUP$Parser$stack.peek()).value;
		 RESULT = new OMG_list.OMGList(o, l); 
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("OMG_list",2, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 6: // OMG_dec ::= OMG IDENTIFIER MAKE_KUHA sabi_sabi DB 
            {
              OMG_dec RESULT =null;
		int idleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-3)).left;
		int idright = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-3)).right;
		String id = (String)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-3)).value;
		int ssleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)).left;
		int ssright = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)).right;
		sabi_sabi ss = (sabi_sabi)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-1)).value;
		 RESULT = new OMG_dec.OMG(id, ss); 
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("OMG_dec",3, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-4)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 7: // OMG_dec ::= OMG error DB 
            {
              OMG_dec RESULT =null;
		 RESULT = null; addText(" in Constant Declaration"); 
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("OMG_dec",3, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 8: // OMG_dec ::= error DB 
            {
              OMG_dec RESULT =null;
		 RESULT = null; addText(" before main and function declarations"); 
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("OMG_dec",3, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 9: // yaya_section ::= yaya_list 
            {
              yaya_section RESULT =null;
		int lleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).left;
		int lright = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).right;
		yaya_list l = (yaya_list)((java_cup.runtime.Symbol) CUP$Parser$stack.peek()).value;
		 RESULT = new yaya_section.yayaSection(l); 
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("yaya_section",4, ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 10: // yaya_section ::= 
            {
              yaya_section RESULT =null;
		 RESULT = new yaya_section.yayaSection(); 
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("yaya_section",4, ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 11: // yaya_list ::= yaya 
            {
              yaya_list RESULT =null;
		int yleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).left;
		int yright = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).right;
		yaya y = (yaya)((java_cup.runtime.Symbol) CUP$Parser$stack.peek()).value;
		 RESULT = new yaya_list.yayaList(y); 
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("yaya_list",5, ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 12: // yaya_list ::= yaya yaya_list 
            {
              yaya_list RESULT =null;
		int yleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)).left;
		int yright = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)).right;
		yaya y = (yaya)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-1)).value;
		int lleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).left;
		int lright = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).right;
		yaya_list l = (yaya_list)((java_cup.runtime.Symbol) CUP$Parser$stack.peek()).value;
		 RESULT = new yaya_list.yayaList(y, l); 
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("yaya_list",5, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 13: // sub_yaya_section ::= sub_yaya_list 
            {
              sub_yaya_section RESULT =null;
		int sleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).left;
		int sright = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).right;
		sub_yaya_list s = (sub_yaya_list)((java_cup.runtime.Symbol) CUP$Parser$stack.peek()).value;
		 RESULT = new sub_yaya_section.subYayaSection(s); 
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("sub_yaya_section",6, ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 14: // sub_yaya_section ::= 
            {
              sub_yaya_section RESULT =null;
		 RESULT = new sub_yaya_section.subYayaSection(); 
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("sub_yaya_section",6, ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 15: // sub_yaya_list ::= sub_yaya 
            {
              sub_yaya_list RESULT =null;
		int sleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).left;
		int sright = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).right;
		sub_yaya s = (sub_yaya)((java_cup.runtime.Symbol) CUP$Parser$stack.peek()).value;
		 RESULT = new sub_yaya_list.subYayaList(s); 
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("sub_yaya_list",7, ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 16: // sub_yaya_list ::= sub_yaya sub_yaya_list 
            {
              sub_yaya_list RESULT =null;
		int sleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)).left;
		int sright = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)).right;
		sub_yaya s = (sub_yaya)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-1)).value;
		int lleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).left;
		int lright = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).right;
		sub_yaya_list l = (sub_yaya_list)((java_cup.runtime.Symbol) CUP$Parser$stack.peek()).value;
		 RESULT = new sub_yaya_list.subYayaList(s, l); 
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("sub_yaya_list",7, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 17: // super_yaya ::= SUPER_YAYA utos_block 
            {
              super_yaya RESULT =null;
		int uleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).left;
		int uright = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).right;
		utos_block u = (utos_block)((java_cup.runtime.Symbol) CUP$Parser$stack.peek()).value;
		 RESULT = new super_yaya.superYaya(u); 
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("super_yaya",8, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 18: // literal ::= INT_LITERAL 
            {
              literal RESULT =null;
		int ileft = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).left;
		int iright = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).right;
		String i = (String)((java_cup.runtime.Symbol) CUP$Parser$stack.peek()).value;
		 RESULT = new literal.Inty(i); 
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("literal",9, ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 19: // literal ::= FLOAT_LITERAL 
            {
              literal RESULT =null;
		int fleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).left;
		int fright = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).right;
		String f = (String)((java_cup.runtime.Symbol) CUP$Parser$stack.peek()).value;
		 RESULT = new literal.Floaty(f); 
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("literal",9, ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 20: // literal ::= STRING_LITERAL 
            {
              literal RESULT =null;
		int sleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).left;
		int sright = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).right;
		String s = (String)((java_cup.runtime.Symbol) CUP$Parser$stack.peek()).value;
		 RESULT = new literal.Stringy(s); 
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("literal",9, ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 21: // literal ::= CHAR_LITERAL 
            {
              literal RESULT =null;
		int cleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).left;
		int cright = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).right;
		String c = (String)((java_cup.runtime.Symbol) CUP$Parser$stack.peek()).value;
		 RESULT = new literal.Chary(c); 
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("literal",9, ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 22: // literal ::= BOOL_LITERAL 
            {
              literal RESULT =null;
		int bleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).left;
		int bright = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).right;
		String b = (String)((java_cup.runtime.Symbol) CUP$Parser$stack.peek()).value;
		 RESULT = new literal.Booly(b); 
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("literal",9, ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 23: // literal ::= WALEY 
            {
              literal RESULT =null;
		int wleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).left;
		int wright = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).right;
		String w = (String)((java_cup.runtime.Symbol) CUP$Parser$stack.peek()).value;
		 RESULT = new literal.Waley(w); 
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("literal",9, ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 24: // data_type ::= primitive_dt 
            {
              data_type RESULT =null;
		int pleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).left;
		int pright = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).right;
		primitive_dt p = (primitive_dt)((java_cup.runtime.Symbol) CUP$Parser$stack.peek()).value;
		 RESULT = new data_type.datatypePrimitive(p); 
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("data_type",10, ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 25: // data_type ::= reference_dt 
            {
              data_type RESULT =null;
		int rleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).left;
		int rright = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).right;
		reference_dt r = (reference_dt)((java_cup.runtime.Symbol) CUP$Parser$stack.peek()).value;
		 RESULT = new data_type.datatypeReference(r); 
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("data_type",10, ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 26: // primitive_dt ::= INTY 
            {
              primitive_dt RESULT =null;
		int ileft = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).left;
		int iright = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).right;
		String i = (String)((java_cup.runtime.Symbol) CUP$Parser$stack.peek()).value;
		 RESULT = new primitive_dt.intType(i); 
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("primitive_dt",11, ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 27: // primitive_dt ::= FLOATY 
            {
              primitive_dt RESULT =null;
		int fleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).left;
		int fright = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).right;
		String f = (String)((java_cup.runtime.Symbol) CUP$Parser$stack.peek()).value;
		 RESULT = new primitive_dt.floatType(f); 
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("primitive_dt",11, ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 28: // primitive_dt ::= STRINGY 
            {
              primitive_dt RESULT =null;
		int sleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).left;
		int sright = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).right;
		String s = (String)((java_cup.runtime.Symbol) CUP$Parser$stack.peek()).value;
		 RESULT = new primitive_dt.stringType(s); 
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("primitive_dt",11, ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 29: // primitive_dt ::= CHARY 
            {
              primitive_dt RESULT =null;
		int cleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).left;
		int cright = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).right;
		String c = (String)((java_cup.runtime.Symbol) CUP$Parser$stack.peek()).value;
		 RESULT = new primitive_dt.charType(c); 
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("primitive_dt",11, ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 30: // primitive_dt ::= BOOLY 
            {
              primitive_dt RESULT =null;
		int bleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).left;
		int bright = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).right;
		String b = (String)((java_cup.runtime.Symbol) CUP$Parser$stack.peek()).value;
		 RESULT = new primitive_dt.booleanType(b); 
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("primitive_dt",11, ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 31: // reference_dt ::= valid_name 
            {
              reference_dt RESULT =null;
		int vnleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).left;
		int vnright = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).right;
		valid_name vn = (valid_name)((java_cup.runtime.Symbol) CUP$Parser$stack.peek()).value;
		 RESULT = new reference_dt.referenceValidName(vn); 
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("reference_dt",12, ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 32: // reference_dt ::= array_dt 
            {
              reference_dt RESULT =null;
		int aleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).left;
		int aright = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).right;
		array_dt a = (array_dt)((java_cup.runtime.Symbol) CUP$Parser$stack.peek()).value;
		 RESULT = new reference_dt.referenceArray(a); 
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("reference_dt",12, ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 33: // array_dt ::= primitive_dt brackets 
            {
              array_dt RESULT =null;
		int pleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)).left;
		int pright = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)).right;
		primitive_dt p = (primitive_dt)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-1)).value;
		int bleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).left;
		int bright = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).right;
		brackets b = (brackets)((java_cup.runtime.Symbol) CUP$Parser$stack.peek()).value;
		 RESULT = new array_dt.arrayPrimitive(p, b); 
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("array_dt",13, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 34: // array_dt ::= valid_name brackets 
            {
              array_dt RESULT =null;
		int vnleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)).left;
		int vnright = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)).right;
		valid_name vn = (valid_name)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-1)).value;
		int bleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).left;
		int bright = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).right;
		brackets b = (brackets)((java_cup.runtime.Symbol) CUP$Parser$stack.peek()).value;
		 RESULT = new array_dt.arrayName(vn, b); 
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("array_dt",13, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 35: // valid_name ::= IDENTIFIER 
            {
              valid_name RESULT =null;
		int idleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).left;
		int idright = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).right;
		String id = (String)((java_cup.runtime.Symbol) CUP$Parser$stack.peek()).value;
		RESULT = new valid_name.identifier(id);
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("valid_name",14, ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 36: // valid_name ::= valid_name COLON IDENTIFIER 
            {
              valid_name RESULT =null;
		int vnleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)).left;
		int vnright = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)).right;
		valid_name vn = (valid_name)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-2)).value;
		int idleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).left;
		int idright = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).right;
		String id = (String)((java_cup.runtime.Symbol) CUP$Parser$stack.peek()).value;
		RESULT = new valid_name.validName(vn, id); 
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("valid_name",14, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 37: // valid_var ::= valid_name 
            {
              valid_var RESULT =null;
		int vnleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).left;
		int vnright = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).right;
		valid_name vn = (valid_name)((java_cup.runtime.Symbol) CUP$Parser$stack.peek()).value;
		 RESULT = new valid_var.validVar(vn); 
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("valid_var",15, ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 38: // valid_var ::= valid_name ref_brackets 
            {
              valid_var RESULT =null;
		int vnleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)).left;
		int vnright = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)).right;
		valid_name vn = (valid_name)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-1)).value;
		int rbleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).left;
		int rbright = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).right;
		ref_brackets rb = (ref_brackets)((java_cup.runtime.Symbol) CUP$Parser$stack.peek()).value;
		 RESULT = new valid_var.validVarRB(vn, rb); 
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("valid_var",15, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 39: // sub_yaya ::= MAKE_UTUSAN IDENTIFIER sy_body 
            {
              sub_yaya RESULT =null;
		int idleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)).left;
		int idright = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)).right;
		String id = (String)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-1)).value;
		int bodyleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).left;
		int bodyright = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).right;
		sy_body body = (sy_body)((java_cup.runtime.Symbol) CUP$Parser$stack.peek()).value;
		 RESULT = new sub_yaya.SubYaya(id, body); 
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("sub_yaya",16, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 40: // sy_body ::= DOLLAR_SIGN sy_opt DOLLAR_SIGN 
            {
              sy_body RESULT =null;
		int optleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)).left;
		int optright = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)).right;
		sy_opt opt = (sy_opt)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-1)).value;
		 RESULT = new sy_body.SubYayaBodyList(opt); 
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("sy_body",17, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 41: // sy_opt ::= sy_cont_list 
            {
              sy_opt RESULT =null;
		int lleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).left;
		int lright = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).right;
		sy_cont_list l = (sy_cont_list)((java_cup.runtime.Symbol) CUP$Parser$stack.peek()).value;
		 RESULT = new sy_opt.SubYayaOpt(l); 
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("sy_opt",18, ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 42: // sy_opt ::= 
            {
              sy_opt RESULT =null;
		 RESULT = new sy_opt.SubYayaOpt(); 
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("sy_opt",18, ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 43: // sy_cont_list ::= sy_cont sy_cont_list 
            {
              sy_cont_list RESULT =null;
		int cleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)).left;
		int cright = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)).right;
		sy_cont c = (sy_cont)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-1)).value;
		int lleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).left;
		int lright = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).right;
		sy_cont_list l = (sy_cont_list)((java_cup.runtime.Symbol) CUP$Parser$stack.peek()).value;
		 RESULT = new sy_cont_list.SubYayaContList(c, l); 
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("sy_cont_list",19, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 44: // sy_cont_list ::= sy_cont 
            {
              sy_cont_list RESULT =null;
		int cleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).left;
		int cright = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).right;
		sy_cont c = (sy_cont)((java_cup.runtime.Symbol) CUP$Parser$stack.peek()).value;
		 RESULT = new sy_cont_list.SubYayaContList(c); 
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("sy_cont_list",19, ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 45: // sy_cont ::= arte_dec 
            {
              sy_cont RESULT =null;
		int aleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).left;
		int aright = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).right;
		arte_dec a = (arte_dec)((java_cup.runtime.Symbol) CUP$Parser$stack.peek()).value;
		 RESULT = new sy_cont.SubYayaContArte(a); 
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("sy_cont",20, ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 46: // sy_cont ::= yaya 
            {
              sy_cont RESULT =null;
		int yleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).left;
		int yright = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).right;
		yaya y = (yaya)((java_cup.runtime.Symbol) CUP$Parser$stack.peek()).value;
		 RESULT = new sy_cont.SubYayaContYaya(y); 
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("sy_cont",20, ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 47: // sy_cont ::= constructor 
            {
              sy_cont RESULT =null;
		int cleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).left;
		int cright = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).right;
		constructor c = (constructor)((java_cup.runtime.Symbol) CUP$Parser$stack.peek()).value;
		 RESULT = new sy_cont.SubYayaContConstructor(c); 
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("sy_cont",20, ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 48: // constructor ::= MAKE_SIMULA IDENTIFIER utos_block 
            {
              constructor RESULT =null;
		int idleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)).left;
		int idright = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)).right;
		String id = (String)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-1)).value;
		int uleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).left;
		int uright = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).right;
		utos_block u = (utos_block)((java_cup.runtime.Symbol) CUP$Parser$stack.peek()).value;
		 RESULT = new constructor.mSimula(id, u); 
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("constructor",21, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 49: // sy_init ::= BRAND_NEW reference_dt LEFT_PAREN arte_init_list RIGHT_PAREN 
            {
              sy_init RESULT =null;
		int rdleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-3)).left;
		int rdright = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-3)).right;
		reference_dt rd = (reference_dt)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-3)).value;
		int aileft = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)).left;
		int airight = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)).right;
		arte_init_list ai = (arte_init_list)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-1)).value;
		 RESULT = new sy_init.SubYayaInitialize(rd, ai); 
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("sy_init",22, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-4)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 50: // arte_dec ::= MAKE_ARTE data_type IDENTIFIER arte_assign DB 
            {
              arte_dec RESULT =null;
		int dtleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-3)).left;
		int dtright = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-3)).right;
		data_type dt = (data_type)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-3)).value;
		int idleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)).left;
		int idright = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)).right;
		String id = (String)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-2)).value;
		int aleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)).left;
		int aright = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)).right;
		arte_assign a = (arte_assign)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-1)).value;
		 RESULT = new arte_dec.arteDec(dt, id, a); 
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("arte_dec",23, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-4)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 51: // arte_dec ::= MAKE_ARTE error DB 
            {
              arte_dec RESULT =null;
		 RESULT = null; addText(" in Variable Declaration"); 
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("arte_dec",23, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 52: // arte_assign ::= MAKE_KUHA arte_init 
            {
              arte_assign RESULT =null;
		int ileft = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).left;
		int iright = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).right;
		arte_init i = (arte_init)((java_cup.runtime.Symbol) CUP$Parser$stack.peek()).value;
		 RESULT = new arte_assign.arteAssign(i); 
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("arte_assign",24, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 53: // arte_assign ::= 
            {
              arte_assign RESULT =null;
		 RESULT = new arte_assign.arteAssign(); 
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("arte_assign",24, ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 54: // arte_init ::= array_init 
            {
              arte_init RESULT =null;
		int aleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).left;
		int aright = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).right;
		array_init a = (array_init)((java_cup.runtime.Symbol) CUP$Parser$stack.peek()).value;
		 RESULT = new arte_init.arrayInit(a); 
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("arte_init",25, ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 55: // arte_init ::= sy_init 
            {
              arte_init RESULT =null;
		int syleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).left;
		int syright = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).right;
		sy_init sy = (sy_init)((java_cup.runtime.Symbol) CUP$Parser$stack.peek()).value;
		 RESULT = new arte_init.syInit(sy); 
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("arte_init",25, ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 56: // arte_init ::= sabi_sabi 
            {
              arte_init RESULT =null;
		int sleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).left;
		int sright = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).right;
		sabi_sabi s = (sabi_sabi)((java_cup.runtime.Symbol) CUP$Parser$stack.peek()).value;
		 RESULT = new arte_init.sabiInit(s); 
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("arte_init",25, ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 57: // yaya ::= yaya_header utos_block 
            {
              yaya RESULT =null;
		int hleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)).left;
		int hright = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)).right;
		yaya_header h = (yaya_header)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-1)).value;
		int uleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).left;
		int uright = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).right;
		utos_block u = (utos_block)((java_cup.runtime.Symbol) CUP$Parser$stack.peek()).value;
		 RESULT = new yaya.addYaya(h, u); 
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("yaya",26, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 58: // yaya_header ::= HIRE_YAYA IDENTIFIER BAYAD LEFT_PAREN yaya_param_sec RIGHT_PAREN MAKE_BALIK data_type IDENTIFIER 
            {
              yaya_header RESULT =null;
		int idleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-7)).left;
		int idright = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-7)).right;
		String id = (String)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-7)).value;
		int ypsleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-4)).left;
		int ypsright = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-4)).right;
		yaya_param_sec yps = (yaya_param_sec)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-4)).value;
		int dtleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)).left;
		int dtright = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)).right;
		data_type dt = (data_type)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-1)).value;
		int rleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).left;
		int rright = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).right;
		String r = (String)((java_cup.runtime.Symbol) CUP$Parser$stack.peek()).value;
		 RESULT = new yaya_header.yayaHeader(id, yps, dt, r); 
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("yaya_header",27, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-8)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 59: // yaya_header ::= HIRE_YAYA IDENTIFIER BAYAD LEFT_PAREN yaya_param_sec RIGHT_PAREN MAKE_BALIK POOR 
            {
              yaya_header RESULT =null;
		int idleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-6)).left;
		int idright = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-6)).right;
		String id = (String)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-6)).value;
		int ypsleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-3)).left;
		int ypsright = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-3)).right;
		yaya_param_sec yps = (yaya_param_sec)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-3)).value;
		 RESULT = new yaya_header.yayaHeader(id, yps); 
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("yaya_header",27, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-7)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 60: // yaya_param_sec ::= yaya_param_list 
            {
              yaya_param_sec RESULT =null;
		int yplleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).left;
		int yplright = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).right;
		yaya_param_list ypl = (yaya_param_list)((java_cup.runtime.Symbol) CUP$Parser$stack.peek()).value;
		 RESULT = new yaya_param_sec.yayaParamSec(ypl); 
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("yaya_param_sec",28, ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 61: // yaya_param_sec ::= 
            {
              yaya_param_sec RESULT =null;
		 RESULT = new yaya_param_sec.yayaParamSec(); 
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("yaya_param_sec",28, ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 62: // yaya_param_list ::= yaya_param COMMA yaya_param_list 
            {
              yaya_param_list RESULT =null;
		int ypleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)).left;
		int ypright = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)).right;
		yaya_param yp = (yaya_param)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-2)).value;
		int yplleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).left;
		int yplright = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).right;
		yaya_param_list ypl = (yaya_param_list)((java_cup.runtime.Symbol) CUP$Parser$stack.peek()).value;
		 RESULT = new yaya_param_list.yayaParamList(yp, ypl); 
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("yaya_param_list",29, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 63: // yaya_param_list ::= yaya_param 
            {
              yaya_param_list RESULT =null;
		int ypleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).left;
		int ypright = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).right;
		yaya_param yp = (yaya_param)((java_cup.runtime.Symbol) CUP$Parser$stack.peek()).value;
		 RESULT = new yaya_param_list.yayaParamList(yp); 
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("yaya_param_list",29, ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 64: // yaya_param ::= data_type IDENTIFIER 
            {
              yaya_param RESULT =null;
		int dtleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)).left;
		int dtright = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)).right;
		data_type dt = (data_type)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-1)).value;
		int idleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).left;
		int idright = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).right;
		String id = (String)((java_cup.runtime.Symbol) CUP$Parser$stack.peek()).value;
		 RESULT = new yaya_param.yayaParam(dt, id); 
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("yaya_param",30, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 65: // array_init ::= LEFT_CURLY arte_init_list RIGHT_CURLY 
            {
              array_init RESULT =null;
		int lleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)).left;
		int lright = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)).right;
		arte_init_list l = (arte_init_list)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-1)).value;
		 RESULT = new array_init.arrayInit(l); 
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("array_init",31, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 66: // arte_init_list ::= arte_init_opt 
            {
              arte_init_list RESULT =null;
		int oleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).left;
		int oright = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).right;
		arte_init_opt o = (arte_init_opt)((java_cup.runtime.Symbol) CUP$Parser$stack.peek()).value;
		 RESULT = new arte_init_list.arteInitList(o); 
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("arte_init_list",32, ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 67: // arte_init_list ::= 
            {
              arte_init_list RESULT =null;
		 RESULT = new arte_init_list.arteInitList(); 
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("arte_init_list",32, ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 68: // arte_init_opt ::= arte_init COMMA arte_init_opt 
            {
              arte_init_opt RESULT =null;
		int ileft = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)).left;
		int iright = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)).right;
		arte_init i = (arte_init)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-2)).value;
		int oleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).left;
		int oright = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).right;
		arte_init_opt o = (arte_init_opt)((java_cup.runtime.Symbol) CUP$Parser$stack.peek()).value;
		 RESULT = new arte_init_opt.arteInitOpt(i, o); 
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("arte_init_opt",33, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 69: // arte_init_opt ::= arte_init 
            {
              arte_init_opt RESULT =null;
		int ileft = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).left;
		int iright = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).right;
		arte_init i = (arte_init)((java_cup.runtime.Symbol) CUP$Parser$stack.peek()).value;
		 RESULT = new arte_init_opt.arteInitOpt(i); 
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("arte_init_opt",33, ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 70: // brackets ::= LEFT_BRACE RIGHT_BRACE 
            {
              brackets RESULT =null;
		 RESULT = new brackets(); 
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("brackets",34, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 71: // ref_brackets ::= LEFT_BRACE sabi_sabi RIGHT_BRACE 
            {
              ref_brackets RESULT =null;
		int sleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)).left;
		int sright = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)).right;
		sabi_sabi s = (sabi_sabi)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-1)).value;
		 RESULT = new ref_brackets.refBrackets(s); 
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("ref_brackets",35, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 72: // utos_block ::= DOLLAR_SIGN utos_block_opt DOLLAR_SIGN 
            {
              utos_block RESULT =null;
		int optleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)).left;
		int optright = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)).right;
		utos_block_opt opt = (utos_block_opt)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-1)).value;
		 RESULT = new utos_block.utosBlock(opt); 
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("utos_block",36, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 73: // utos_block ::= error 
            {
              utos_block RESULT =null;
		 RESULT = null; addText(" in code block"); 
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("utos_block",36, ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 74: // utos_block_opt ::= block_content 
            {
              utos_block_opt RESULT =null;
		int bleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).left;
		int bright = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).right;
		block_content b = (block_content)((java_cup.runtime.Symbol) CUP$Parser$stack.peek()).value;
		 RESULT = new utos_block_opt.utosBlockOpt(b); 
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("utos_block_opt",37, ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 75: // utos_block_opt ::= 
            {
              utos_block_opt RESULT =null;
		 RESULT = new utos_block_opt.utosBlockOpt(); 
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("utos_block_opt",37, ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 76: // block_content ::= utos_dec block_content 
            {
              block_content RESULT =null;
		int uleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)).left;
		int uright = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)).right;
		utos_dec u = (utos_dec)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-1)).value;
		int bleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).left;
		int bright = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).right;
		block_content b = (block_content)((java_cup.runtime.Symbol) CUP$Parser$stack.peek()).value;
		 RESULT = new block_content.blockContent(u, b); 
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("block_content",38, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 77: // block_content ::= utos_dec 
            {
              block_content RESULT =null;
		int uleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).left;
		int uright = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).right;
		utos_dec u = (utos_dec)((java_cup.runtime.Symbol) CUP$Parser$stack.peek()).value;
		 RESULT = new block_content.blockContent(u); 
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("block_content",38, ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 78: // utos_dec ::= utos_dec_db 
            {
              utos_dec RESULT =null;
		int dleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).left;
		int dright = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).right;
		utos_dec_db d = (utos_dec_db)((java_cup.runtime.Symbol) CUP$Parser$stack.peek()).value;
		 RESULT = new utos_dec.utosDecDB(d); 
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("utos_dec",39, ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 79: // utos_dec ::= utos_dec_val DB 
            {
              utos_dec RESULT =null;
		int vleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)).left;
		int vright = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)).right;
		utos_dec_val v = (utos_dec_val)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-1)).value;
		 RESULT = new utos_dec.utosDecVal(v); 
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("utos_dec",39, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 80: // utos_dec ::= utos_dec_nodb 
            {
              utos_dec RESULT =null;
		int nleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).left;
		int nright = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).right;
		utos_dec_nodb n = (utos_dec_nodb)((java_cup.runtime.Symbol) CUP$Parser$stack.peek()).value;
		 RESULT = new utos_dec.utosDecNoDB(n); 
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("utos_dec",39, ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 81: // utos_dec ::= utos_sabisabi 
            {
              utos_dec RESULT =null;

              CUP$Parser$result = parser.getSymbolFactory().newSymbol("utos_dec",39, ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 82: // utos_dec ::= error 
            {
              utos_dec RESULT =null;
		 RESULT = null; addText(""); 
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("utos_dec",39, ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 83: // utos_dec_nodb ::= utos_likeKapag 
            {
              utos_dec_nodb RESULT =null;
		int ukleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).left;
		int ukright = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).right;
		utos_likeKapag uk = (utos_likeKapag)((java_cup.runtime.Symbol) CUP$Parser$stack.peek()).value;
		 RESULT = new utos_dec_nodb.utosLikeKapag(uk); 
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("utos_dec_nodb",40, ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 84: // utos_dec_nodb ::= utos_makePalit 
            {
              utos_dec_nodb RESULT =null;
		int upleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).left;
		int upright = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).right;
		utos_makePalit up = (utos_makePalit)((java_cup.runtime.Symbol) CUP$Parser$stack.peek()).value;
		 RESULT = new utos_dec_nodb.utosMakePalit(up); 
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("utos_dec_nodb",40, ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 85: // utos_dec_nodb ::= utos_likeHabang 
            {
              utos_dec_nodb RESULT =null;
		int uhleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).left;
		int uhright = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).right;
		utos_likeHabang uh = (utos_likeHabang)((java_cup.runtime.Symbol) CUP$Parser$stack.peek()).value;
		 RESULT = new utos_dec_nodb.utosLikeHabang(uh); 
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("utos_dec_nodb",40, ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 86: // utos_dec_nodb ::= utos_makeGawaHabang 
            {
              utos_dec_nodb RESULT =null;
		int ughleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).left;
		int ughright = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).right;
		utos_makeGawaHabang ugh = (utos_makeGawaHabang)((java_cup.runtime.Symbol) CUP$Parser$stack.peek()).value;
		 RESULT = new utos_dec_nodb.utosMakeGawaHabang(ugh); 
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("utos_dec_nodb",40, ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 87: // utos_dec_nodb ::= utos_makeUlit 
            {
              utos_dec_nodb RESULT =null;
		int uuleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).left;
		int uuright = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).right;
		utos_makeUlit uu = (utos_makeUlit)((java_cup.runtime.Symbol) CUP$Parser$stack.peek()).value;
		 RESULT = new utos_dec_nodb.utosMakeUlit(uu); 
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("utos_dec_nodb",40, ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 88: // utos_dec_nodb ::= utos_makeArte 
            {
              utos_dec_nodb RESULT =null;
		int ualeft = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).left;
		int uaright = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).right;
		utos_makeArte ua = (utos_makeArte)((java_cup.runtime.Symbol) CUP$Parser$stack.peek()).value;
		 RESULT = new utos_dec_nodb.utosMakeArte(ua); 
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("utos_dec_nodb",40, ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 89: // utos_dec_nodb ::= LIKE_KAPAG error 
            {
              utos_dec_nodb RESULT =null;
		 RESULT = null; addText(" in IF statement"); 
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("utos_dec_nodb",40, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 90: // utos_dec_nodb ::= MAKE_PALIT error DB 
            {
              utos_dec_nodb RESULT =null;
		 RESULT = null; addText(" in SWITCH statement"); 
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("utos_dec_nodb",40, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 91: // utos_dec_nodb ::= LIKE_HABANG error DB 
            {
              utos_dec_nodb RESULT =null;
		 RESULT = null; addText(" in WHILE LOOP"); 
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("utos_dec_nodb",40, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 92: // utos_dec_nodb ::= MAKE_GAWA error DB 
            {
              utos_dec_nodb RESULT =null;
		 RESULT = null; addText(" in DO WHILE LOOP"); 
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("utos_dec_nodb",40, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 93: // utos_dec_nodb ::= MAKE_ULIT error DB 
            {
              utos_dec_nodb RESULT =null;
		 RESULT = null; addText(" in FOR LOOP"); 
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("utos_dec_nodb",40, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 94: // utos_dec_db ::= utos_makeKuha DB 
            {
              utos_dec_db RESULT =null;
		int ukleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)).left;
		int ukright = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)).right;
		utos_makeKuha uk = (utos_makeKuha)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-1)).value;
		 RESULT = new utos_dec_db.utosMakeKuha(uk); 
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("utos_dec_db",41, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 95: // utos_dec_db ::= utos_makeSulat DB 
            {
              utos_dec_db RESULT =null;
		int usuleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)).left;
		int usuright = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)).right;
		utos_makeSulat usu = (utos_makeSulat)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-1)).value;
		 RESULT = new utos_dec_db.utosMakeSulat(usu); 
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("utos_dec_db",41, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 96: // utos_dec_db ::= utos_makeSabi DB 
            {
              utos_dec_db RESULT =null;
		int usaleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)).left;
		int usaright = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)).right;
		utos_makeSabi usa = (utos_makeSabi)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-1)).value;
		 RESULT = new utos_dec_db.utosMakeSabi(usa); 
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("utos_dec_db",41, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 97: // utos_dec_db ::= BREAKUP DB 
            {
              utos_dec_db RESULT =null;
		 RESULT = new utos_dec_db.breakup(); 
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("utos_dec_db",41, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 98: // utos_dec_db ::= MAKEUP DB 
            {
              utos_dec_db RESULT =null;
		 RESULT = new utos_dec_db.makeup(); 
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("utos_dec_db",41, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 99: // utos_dec_db ::= MAKE_SULAT error DB 
            {
              utos_dec_db RESULT =null;
		 RESULT = null; addText(" in OUTPUT function"); 
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("utos_dec_db",41, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 100: // utos_dec_db ::= MAKE_SABI error DB 
            {
              utos_dec_db RESULT =null;
		 RESULT = null; addText(" in MAKESABI function"); 
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("utos_dec_db",41, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 101: // utos_dec_val ::= utos_makeTawag 
            {
              utos_dec_val RESULT =null;
		int utleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).left;
		int utright = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).right;
		utos_makeTawag ut = (utos_makeTawag)((java_cup.runtime.Symbol) CUP$Parser$stack.peek()).value;
		 RESULT = new utos_dec_val.utosMakeTawag(ut); 
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("utos_dec_val",42, ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 102: // utos_dec_val ::= utos_makeBasa 
            {
              utos_dec_val RESULT =null;
		int ubleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).left;
		int ubright = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).right;
		utos_makeBasa ub = (utos_makeBasa)((java_cup.runtime.Symbol) CUP$Parser$stack.peek()).value;
		 RESULT = new utos_dec_val.utosMakeBasa(ub); 
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("utos_dec_val",42, ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 103: // utos_dec_val ::= MAKE_TAWAG error 
            {
              utos_dec_val RESULT =null;
		 RESULT = null; addText(" in FUNCTION CALL"); 
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("utos_dec_val",42, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 104: // utos_dec_val ::= MAKE_BASA error 
            {
              utos_dec_val RESULT =null;
		 RESULT = null; addText(" in SCAN function"); 
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("utos_dec_val",42, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 105: // utos_sabisabi ::= POS_INC valid_var DB 
            {
              utos_sabisabi RESULT =null;
		int vvleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)).left;
		int vvright = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)).right;
		valid_var vv = (valid_var)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-1)).value;
		 RESULT = new utos_sabisabi.utosSabiSabiFront(vv,"++"); 
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("utos_sabisabi",43, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 106: // utos_sabisabi ::= NEG_INC valid_var DB 
            {
              utos_sabisabi RESULT =null;
		int vvleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)).left;
		int vvright = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)).right;
		valid_var vv = (valid_var)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-1)).value;
		 RESULT = new utos_sabisabi.utosSabiSabiFront(vv,"--"); 
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("utos_sabisabi",43, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 107: // utos_sabisabi ::= valid_var POS_INC DB 
            {
              utos_sabisabi RESULT =null;
		int vvleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)).left;
		int vvright = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)).right;
		valid_var vv = (valid_var)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-2)).value;
		 RESULT = new utos_sabisabi.utosSabiSabiBack(vv,"++"); 
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("utos_sabisabi",43, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 108: // utos_sabisabi ::= valid_var NEG_INC DB 
            {
              utos_sabisabi RESULT =null;
		int vvleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)).left;
		int vvright = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)).right;
		valid_var vv = (valid_var)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-2)).value;
		 RESULT = new utos_sabisabi.utosSabiSabiBack(vv,"--"); 
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("utos_sabisabi",43, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 109: // utos_makeKuha ::= valid_var arte_assign 
            {
              utos_makeKuha RESULT =null;
		int vvleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)).left;
		int vvright = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)).right;
		valid_var vv = (valid_var)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-1)).value;
		int aleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).left;
		int aright = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).right;
		arte_assign a = (arte_assign)((java_cup.runtime.Symbol) CUP$Parser$stack.peek()).value;
		 RESULT = new utos_makeKuha.makeKuha(vv, a); 
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("utos_makeKuha",44, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 110: // utos_makeTawag ::= MAKE_TAWAG valid_name LEFT_PAREN arte_init_list RIGHT_PAREN 
            {
              utos_makeTawag RESULT =null;
		int vnleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-3)).left;
		int vnright = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-3)).right;
		valid_name vn = (valid_name)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-3)).value;
		int lleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)).left;
		int lright = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)).right;
		arte_init_list l = (arte_init_list)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-1)).value;
		 RESULT = new utos_makeTawag.makeTawag(vn, l); 
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("utos_makeTawag",45, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-4)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 111: // utos_makeSulat ::= MAKE_SULAT LEFT_PAREN sabi_sabi RIGHT_PAREN 
            {
              utos_makeSulat RESULT =null;
		int sleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)).left;
		int sright = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)).right;
		sabi_sabi s = (sabi_sabi)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-1)).value;
		 RESULT = new utos_makeSulat.makeSulat(s); 
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("utos_makeSulat",46, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-3)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 112: // utos_makeBasa ::= MAKE_BASA LEFT_PAREN data_type RIGHT_PAREN 
            {
              utos_makeBasa RESULT =null;
		int dleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)).left;
		int dright = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)).right;
		data_type d = (data_type)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-1)).value;
		 RESULT = new utos_makeBasa.makeBasa(d); 
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("utos_makeBasa",47, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-3)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 113: // utos_likeKapag ::= LIKE_KAPAG LEFT_PAREN sabi_sabi RIGHT_PAREN utos_block utos_thisNalang 
            {
              utos_likeKapag RESULT =null;
		int sleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-3)).left;
		int sright = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-3)).right;
		sabi_sabi s = (sabi_sabi)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-3)).value;
		int bleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)).left;
		int bright = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)).right;
		utos_block b = (utos_block)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-1)).value;
		int tleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).left;
		int tright = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).right;
		utos_thisNalang t = (utos_thisNalang)((java_cup.runtime.Symbol) CUP$Parser$stack.peek()).value;
		 RESULT = new utos_likeKapag.likeKapag(s, b, t); 
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("utos_likeKapag",48, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-5)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 114: // utos_thisNalang ::= THIS_NALANG utos_block 
            {
              utos_thisNalang RESULT =null;
		int bleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).left;
		int bright = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).right;
		utos_block b = (utos_block)((java_cup.runtime.Symbol) CUP$Parser$stack.peek()).value;
		 RESULT = new utos_thisNalang.thisNalang(b); 
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("utos_thisNalang",49, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 115: // utos_thisNalang ::= THIS_NALANG_KAPAG LEFT_PAREN sabi_sabi RIGHT_PAREN utos_block utos_thisNalang 
            {
              utos_thisNalang RESULT =null;
		int sleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-3)).left;
		int sright = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-3)).right;
		sabi_sabi s = (sabi_sabi)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-3)).value;
		int bleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)).left;
		int bright = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)).right;
		utos_block b = (utos_block)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-1)).value;
		int tleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).left;
		int tright = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).right;
		utos_thisNalang t = (utos_thisNalang)((java_cup.runtime.Symbol) CUP$Parser$stack.peek()).value;
		 RESULT = new utos_thisNalang.thisNalangKapag(s, b, t); 
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("utos_thisNalang",49, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-5)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 116: // utos_thisNalang ::= 
            {
              utos_thisNalang RESULT =null;
		 RESULT = new utos_thisNalang.thisNalang(); 
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("utos_thisNalang",49, ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 117: // utos_thisNalang ::= THIS_NALANG error DB 
            {
              utos_thisNalang RESULT =null;
		 RESULT = null; addText(" in ELSE statement"); 
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("utos_thisNalang",49, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 118: // utos_thisNalang ::= THIS_NALANG_KAPAG error DB 
            {
              utos_thisNalang RESULT =null;
		 RESULT = null; addText(" in ELSE IF statement"); 
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("utos_thisNalang",49, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 119: // utos_makePalit ::= MAKE_PALIT LEFT_PAREN sabi_sabi RIGHT_PAREN DOLLAR_SIGN makePalit_MRW DOLLAR_SIGN 
            {
              utos_makePalit RESULT =null;
		int sleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-4)).left;
		int sright = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-4)).right;
		sabi_sabi s = (sabi_sabi)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-4)).value;
		int mleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)).left;
		int mright = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)).right;
		makePalit_MRW m = (makePalit_MRW)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-1)).value;
		 RESULT = new utos_makePalit.makePalit(s, m); 
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("utos_makePalit",50, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-6)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 120: // makePalit_MRW ::= MRW sabi_sabi COLON utos_block_opt makePalit_MRW 
            {
              makePalit_MRW RESULT =null;
		int sleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-3)).left;
		int sright = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-3)).right;
		sabi_sabi s = (sabi_sabi)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-3)).value;
		int oleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)).left;
		int oright = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)).right;
		utos_block_opt o = (utos_block_opt)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-1)).value;
		int mleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).left;
		int mright = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).right;
		makePalit_MRW m = (makePalit_MRW)((java_cup.runtime.Symbol) CUP$Parser$stack.peek()).value;
		 RESULT = new makePalit_MRW.MRW(s, o, m); 
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("makePalit_MRW",51, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-4)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 121: // makePalit_MRW ::= MRW error DB 
            {
              makePalit_MRW RESULT =null;
		 RESULT = null; addText(" in one of the cases of a SWITCH statement"); 
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("makePalit_MRW",51, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 122: // makePalit_MRW ::= MDR COLON utos_block_opt 
            {
              makePalit_MRW RESULT =null;
		int oleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).left;
		int oright = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).right;
		utos_block_opt o = (utos_block_opt)((java_cup.runtime.Symbol) CUP$Parser$stack.peek()).value;
		 RESULT = new makePalit_MRW.MDR(o); 
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("makePalit_MRW",51, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 123: // makePalit_MRW ::= MDR error DB 
            {
              makePalit_MRW RESULT =null;
		 RESULT = null; addText(" in the last case of a SWITCH statement"); 
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("makePalit_MRW",51, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 124: // makePalit_MRW ::= 
            {
              makePalit_MRW RESULT =null;
		 RESULT = new makePalit_MRW.MRW(); 
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("makePalit_MRW",51, ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 125: // utos_likeHabang ::= LIKE_HABANG LEFT_PAREN sabi_sabi RIGHT_PAREN utos_block 
            {
              utos_likeHabang RESULT =null;
		int sleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)).left;
		int sright = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)).right;
		sabi_sabi s = (sabi_sabi)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-2)).value;
		int uleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).left;
		int uright = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).right;
		utos_block u = (utos_block)((java_cup.runtime.Symbol) CUP$Parser$stack.peek()).value;
		 RESULT = new utos_likeHabang.likeHabang(s, u); 
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("utos_likeHabang",52, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-4)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 126: // utos_likeHabang ::= LIKE_HABANG LEFT_PAREN sabi_sabi RIGHT_PAREN DB 
            {
              utos_likeHabang RESULT =null;
		int sleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)).left;
		int sright = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)).right;
		sabi_sabi s = (sabi_sabi)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-2)).value;
		 RESULT = new utos_likeHabang.likeHabang(s); 
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("utos_likeHabang",52, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-4)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 127: // utos_makeGawaHabang ::= MAKE_GAWA utos_block LIKE_HABANG LEFT_PAREN sabi_sabi RIGHT_PAREN DB 
            {
              utos_makeGawaHabang RESULT =null;
		int uleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-5)).left;
		int uright = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-5)).right;
		utos_block u = (utos_block)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-5)).value;
		int sleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)).left;
		int sright = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)).right;
		sabi_sabi s = (sabi_sabi)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-2)).value;
		 RESULT = new utos_makeGawaHabang.makeGawaHabang(u, s); 
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("utos_makeGawaHabang",53, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-6)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 128: // utos_makeUlit ::= MAKE_ULIT LEFT_PAREN utos_makeKuha DB sabi_sabi_for utos_makeKuha RIGHT_PAREN utos_block 
            {
              utos_makeUlit RESULT =null;
		int m1left = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-5)).left;
		int m1right = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-5)).right;
		utos_makeKuha m1 = (utos_makeKuha)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-5)).value;
		int s1left = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-3)).left;
		int s1right = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-3)).right;
		sabi_sabi_for s1 = (sabi_sabi_for)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-3)).value;
		int m2left = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)).left;
		int m2right = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)).right;
		utos_makeKuha m2 = (utos_makeKuha)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-2)).value;
		int uleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).left;
		int uright = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).right;
		utos_block u = (utos_block)((java_cup.runtime.Symbol) CUP$Parser$stack.peek()).value;
		 RESULT = new utos_makeUlit.makeUlit(m1, s1, m2, u); 
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("utos_makeUlit",54, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-7)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 129: // utos_makeUlit ::= MAKE_ULIT LEFT_PAREN utos_makeKuha DB sabi_sabi_for sabi_sabi_for RIGHT_PAREN utos_block 
            {
              utos_makeUlit RESULT =null;
		int m1left = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-5)).left;
		int m1right = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-5)).right;
		utos_makeKuha m1 = (utos_makeKuha)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-5)).value;
		int s1left = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-3)).left;
		int s1right = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-3)).right;
		sabi_sabi_for s1 = (sabi_sabi_for)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-3)).value;
		int s2left = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)).left;
		int s2right = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)).right;
		sabi_sabi_for s2 = (sabi_sabi_for)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-2)).value;
		int uleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).left;
		int uright = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).right;
		utos_block u = (utos_block)((java_cup.runtime.Symbol) CUP$Parser$stack.peek()).value;
		 RESULT = new utos_makeUlit.makeUlit(m1, s1, s2, u); 
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("utos_makeUlit",54, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-7)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 130: // utos_makeArte ::= arte_dec 
            {
              utos_makeArte RESULT =null;
		int aleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).left;
		int aright = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).right;
		arte_dec a = (arte_dec)((java_cup.runtime.Symbol) CUP$Parser$stack.peek()).value;
		 RESULT = new utos_makeArte.makeArte(a); 
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("utos_makeArte",55, ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 131: // utos_makeSabi ::= MAKE_SABI sabi_sabi 
            {
              utos_makeSabi RESULT =null;
		int sleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).left;
		int sright = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).right;
		sabi_sabi s = (sabi_sabi)((java_cup.runtime.Symbol) CUP$Parser$stack.peek()).value;
		 RESULT = new utos_makeSabi.makeSabi(s); 
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("utos_makeSabi",56, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 132: // sabi_sabi_end ::= valid_var 
            {
              sabi_sabi_end RESULT =null;
		int vleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).left;
		int vright = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).right;
		valid_var v = (valid_var)((java_cup.runtime.Symbol) CUP$Parser$stack.peek()).value;
		 RESULT = new sabi_sabi_end.ssEndValidVar(v); 
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("sabi_sabi_end",58, ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 133: // sabi_sabi_end ::= utos_dec_val 
            {
              sabi_sabi_end RESULT =null;
		int uleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).left;
		int uright = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).right;
		utos_dec_val u = (utos_dec_val)((java_cup.runtime.Symbol) CUP$Parser$stack.peek()).value;
		 RESULT = new sabi_sabi_end.ssEndUtos(u); 
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("sabi_sabi_end",58, ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 134: // sabi_sabi_end ::= literal 
            {
              sabi_sabi_end RESULT =null;
		int lleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).left;
		int lright = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).right;
		literal l = (literal)((java_cup.runtime.Symbol) CUP$Parser$stack.peek()).value;
		 RESULT = new sabi_sabi_end.ssEndLiteral(l); 
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("sabi_sabi_end",58, ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 135: // sabi_sabi_for ::= sabi_sabi DB 
            {
              sabi_sabi_for RESULT =null;
		int sleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)).left;
		int sright = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)).right;
		sabi_sabi s = (sabi_sabi)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-1)).value;
		 RESULT = new sabi_sabi_for.SabiSabiFor(s); 
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("sabi_sabi_for",59, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 136: // sabi_sabi ::= ss_OR 
            {
              sabi_sabi RESULT =null;
		int oleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).left;
		int oright = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).right;
		ss_OR o = (ss_OR)((java_cup.runtime.Symbol) CUP$Parser$stack.peek()).value;
		 RESULT = new sabi_sabi.SabiSabi(o); 
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("sabi_sabi",57, ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 137: // ss_OR ::= ss_AND OR ss_OR 
            {
              ss_OR RESULT =null;
		int aleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)).left;
		int aright = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)).right;
		ss_AND a = (ss_AND)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-2)).value;
		int oleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).left;
		int oright = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).right;
		ss_OR o = (ss_OR)((java_cup.runtime.Symbol) CUP$Parser$stack.peek()).value;
		 RESULT = new ss_OR.ssORExpansion(a, o); 
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("ss_OR",60, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 138: // ss_OR ::= ss_AND 
            {
              ss_OR RESULT =null;
		int aleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).left;
		int aright = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).right;
		ss_AND a = (ss_AND)((java_cup.runtime.Symbol) CUP$Parser$stack.peek()).value;
		 RESULT = new ss_OR.ssOR(a); 
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("ss_OR",60, ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 139: // ss_AND ::= ss_equality AND ss_AND 
            {
              ss_AND RESULT =null;
		int eleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)).left;
		int eright = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)).right;
		ss_equality e = (ss_equality)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-2)).value;
		int aleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).left;
		int aright = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).right;
		ss_AND a = (ss_AND)((java_cup.runtime.Symbol) CUP$Parser$stack.peek()).value;
		 RESULT = new ss_AND.ssANDExpansion(e, a); 
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("ss_AND",61, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 140: // ss_AND ::= ss_equality 
            {
              ss_AND RESULT =null;
		int eleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).left;
		int eright = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).right;
		ss_equality e = (ss_equality)((java_cup.runtime.Symbol) CUP$Parser$stack.peek()).value;
		 RESULT = new ss_AND.ssAND(e); 
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("ss_AND",61, ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 141: // ss_equality ::= ss_comparison equality ss_equality 
            {
              ss_equality RESULT =null;
		int cleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)).left;
		int cright = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)).right;
		ss_comparison c = (ss_comparison)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-2)).value;
		int eqleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)).left;
		int eqright = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)).right;
		equality eq = (equality)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-1)).value;
		int eleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).left;
		int eright = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).right;
		ss_equality e = (ss_equality)((java_cup.runtime.Symbol) CUP$Parser$stack.peek()).value;
		 RESULT = new ss_equality.ssEqualityExpansion(c, eq, e); 
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("ss_equality",62, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 142: // ss_equality ::= ss_comparison 
            {
              ss_equality RESULT =null;
		int cleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).left;
		int cright = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).right;
		ss_comparison c = (ss_comparison)((java_cup.runtime.Symbol) CUP$Parser$stack.peek()).value;
		 RESULT = new ss_equality.ssEquality(c); 
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("ss_equality",62, ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 143: // ss_comparison ::= ss_a1 comparison ss_comparison 
            {
              ss_comparison RESULT =null;
		int aleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)).left;
		int aright = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)).right;
		ss_a1 a = (ss_a1)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-2)).value;
		int coleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)).left;
		int coright = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)).right;
		comparison co = (comparison)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-1)).value;
		int cleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).left;
		int cright = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).right;
		ss_comparison c = (ss_comparison)((java_cup.runtime.Symbol) CUP$Parser$stack.peek()).value;
		 RESULT = new ss_comparison.ssComparisonExpansion(a, co, c); 
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("ss_comparison",63, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 144: // ss_comparison ::= ss_a1 
            {
              ss_comparison RESULT =null;
		int aleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).left;
		int aright = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).right;
		ss_a1 a = (ss_a1)((java_cup.runtime.Symbol) CUP$Parser$stack.peek()).value;
		 RESULT = new ss_comparison.ssComparison(a); 
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("ss_comparison",63, ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 145: // ss_a1 ::= ss_a2 arithmetic_1 ss_a1 
            {
              ss_a1 RESULT =null;
		int a2left = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)).left;
		int a2right = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)).right;
		ss_a2 a2 = (ss_a2)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-2)).value;
		int arleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)).left;
		int arright = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)).right;
		arithmetic_1 ar = (arithmetic_1)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-1)).value;
		int a1left = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).left;
		int a1right = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).right;
		ss_a1 a1 = (ss_a1)((java_cup.runtime.Symbol) CUP$Parser$stack.peek()).value;
		 RESULT = new ss_a1.ssA1Expansion(a2, ar, a1); 
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("ss_a1",64, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 146: // ss_a1 ::= ss_a2 
            {
              ss_a1 RESULT =null;
		int a2left = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).left;
		int a2right = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).right;
		ss_a2 a2 = (ss_a2)((java_cup.runtime.Symbol) CUP$Parser$stack.peek()).value;
		 RESULT = new ss_a1.ssA1(a2); 
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("ss_a1",64, ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 147: // ss_a2 ::= ss_unary_1 arithmetic_2 ss_a2 
            {
              ss_a2 RESULT =null;
		int uleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)).left;
		int uright = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)).right;
		ss_unary_1 u = (ss_unary_1)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-2)).value;
		int arleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)).left;
		int arright = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)).right;
		arithmetic_2 ar = (arithmetic_2)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-1)).value;
		int aleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).left;
		int aright = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).right;
		ss_a2 a = (ss_a2)((java_cup.runtime.Symbol) CUP$Parser$stack.peek()).value;
		 RESULT = new ss_a2.ssA2Expansion(u, ar, a); 
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("ss_a2",65, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 148: // ss_a2 ::= ss_unary_1 
            {
              ss_a2 RESULT =null;
		int uleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).left;
		int uright = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).right;
		ss_unary_1 u = (ss_unary_1)((java_cup.runtime.Symbol) CUP$Parser$stack.peek()).value;
		 RESULT = new ss_a2.ssA2(u); 
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("ss_a2",65, ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 149: // ss_unary_1 ::= NOT ss_unary_1 
            {
              ss_unary_1 RESULT =null;
		int uleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).left;
		int uright = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).right;
		ss_unary_1 u = (ss_unary_1)((java_cup.runtime.Symbol) CUP$Parser$stack.peek()).value;
		 RESULT = new ss_unary_1.ssU1Not(u); 
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("ss_unary_1",66, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 150: // ss_unary_1 ::= ss_paren 
            {
              ss_unary_1 RESULT =null;
		int pleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).left;
		int pright = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).right;
		ss_paren p = (ss_paren)((java_cup.runtime.Symbol) CUP$Parser$stack.peek()).value;
		 RESULT = new ss_unary_1.ssU1(p); 
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("ss_unary_1",66, ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 151: // ss_paren ::= LEFT_PAREN ss_a1 RIGHT_PAREN 
            {
              ss_paren RESULT =null;
		int aleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)).left;
		int aright = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)).right;
		ss_a1 a = (ss_a1)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-1)).value;
		 RESULT = new ss_paren.ssParen(a); 
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("ss_paren",67, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 152: // ss_paren ::= sabi_sabi_end 
            {
              ss_paren RESULT =null;
		int eleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).left;
		int eright = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).right;
		sabi_sabi_end e = (sabi_sabi_end)((java_cup.runtime.Symbol) CUP$Parser$stack.peek()).value;
		 RESULT = new ss_paren.ssParenEnd(e); 
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("ss_paren",67, ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 153: // equality ::= EQUAL_EQUAL 
            {
              equality RESULT =null;
		 RESULT = new equality.equal("=="); 
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("equality",68, ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 154: // equality ::= NOT_EQUAL 
            {
              equality RESULT =null;
		 RESULT = new equality.equal("!="); 
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("equality",68, ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 155: // comparison ::= GT_EQUAL 
            {
              comparison RESULT =null;
		 RESULT = new comparison.compare(">="); 
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("comparison",69, ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 156: // comparison ::= LT_EQUAL 
            {
              comparison RESULT =null;
		 RESULT = new comparison.compare("<="); 
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("comparison",69, ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 157: // comparison ::= GREATER_THAN 
            {
              comparison RESULT =null;
		 RESULT = new comparison.compare(">"); 
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("comparison",69, ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 158: // comparison ::= LESS_THAN 
            {
              comparison RESULT =null;
		 RESULT = new comparison.compare("<"); 
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("comparison",69, ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 159: // arithmetic_1 ::= PLUS 
            {
              arithmetic_1 RESULT =null;
		 RESULT = new arithmetic_1.arithmetic1("+"); 
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("arithmetic_1",70, ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 160: // arithmetic_1 ::= MINUS 
            {
              arithmetic_1 RESULT =null;
		 RESULT = new arithmetic_1.arithmetic1("-"); 
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("arithmetic_1",70, ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 161: // arithmetic_2 ::= TIMES 
            {
              arithmetic_2 RESULT =null;
		 RESULT = new arithmetic_2.arithmetic2("*"); 
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("arithmetic_2",71, ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 162: // arithmetic_2 ::= DIVIDE 
            {
              arithmetic_2 RESULT =null;
		 RESULT = new arithmetic_2.arithmetic2("/"); 
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("arithmetic_2",71, ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 163: // arithmetic_2 ::= MODULO 
            {
              arithmetic_2 RESULT =null;
		 RESULT = new arithmetic_2.arithmetic2("%"); 
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("arithmetic_2",71, ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /* . . . . . .*/
          default:
            throw new Exception(
               "Invalid action number "+CUP$Parser$act_num+"found in internal parse table");

        }
    } /* end of method */

  /** Method splitting the generated action code into several parts. */
  public final java_cup.runtime.Symbol CUP$Parser$do_action(
    int                        CUP$Parser$act_num,
    java_cup.runtime.lr_parser CUP$Parser$parser,
    java.util.Stack            CUP$Parser$stack,
    int                        CUP$Parser$top)
    throws java.lang.Exception
    {
              return CUP$Parser$do_action_part00000000(
                               CUP$Parser$act_num,
                               CUP$Parser$parser,
                               CUP$Parser$stack,
                               CUP$Parser$top);
    }
}

}
