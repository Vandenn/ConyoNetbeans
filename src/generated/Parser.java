
//----------------------------------------------------
// The following code was generated by CUP v0.11b 20140808 (SVN rev 54)
//----------------------------------------------------

package generated;

import java_cup.runtime.*;
import created.*;
import created.ParseTree.Array.*;
import created.ParseTree.Arte.*;
import created.ParseTree.Literals.*;
import created.ParseTree.Program.*;
import created.ParseTree.SabiSabi.*;
import created.ParseTree.SubYaya.*;
import created.ParseTree.Utos.*;
import created.ParseTree.Yaya.*;
import java_cup.runtime.XMLElement;

/** CUP v0.11b 20140808 (SVN rev 54) generated parser.
  */
@SuppressWarnings({"rawtypes"})
public class Parser extends java_cup.runtime.lr_parser {

 public final Class getSymbolContainer() {
    return sym.class;
}

  /** Default constructor. */
  public Parser() {super();}

  /** Constructor which sets the default scanner. */
  public Parser(java_cup.runtime.Scanner s) {super(s);}

  /** Constructor which sets the default scanner. */
  public Parser(java_cup.runtime.Scanner s, java_cup.runtime.SymbolFactory sf) {super(s,sf);}

  /** Production table. */
  protected static final short _production_table[][] = 
    unpackFromStrings(new String[] {
    "\000\243\000\002\002\004\000\002\002\006\000\002\003" +
    "\003\000\002\003\002\000\002\004\003\000\002\004\004" +
    "\000\002\005\007\000\002\005\005\000\002\005\004\000" +
    "\002\006\003\000\002\006\002\000\002\007\003\000\002" +
    "\007\004\000\002\010\003\000\002\010\002\000\002\011" +
    "\003\000\002\011\004\000\002\012\004\000\002\013\003" +
    "\000\002\013\003\000\002\013\003\000\002\013\003\000" +
    "\002\013\003\000\002\013\003\000\002\014\003\000\002" +
    "\014\003\000\002\015\003\000\002\015\003\000\002\015" +
    "\003\000\002\015\003\000\002\015\003\000\002\016\003" +
    "\000\002\016\003\000\002\017\004\000\002\017\004\000" +
    "\002\020\003\000\002\021\003\000\002\021\004\000\002" +
    "\022\005\000\002\023\005\000\002\024\003\000\002\024" +
    "\002\000\002\025\004\000\002\025\003\000\002\026\003" +
    "\000\002\026\003\000\002\026\003\000\002\027\005\000" +
    "\002\030\007\000\002\031\007\000\002\031\005\000\002" +
    "\032\004\000\002\032\002\000\002\033\003\000\002\033" +
    "\003\000\002\033\003\000\002\034\004\000\002\035\013" +
    "\000\002\035\012\000\002\036\003\000\002\036\002\000" +
    "\002\037\005\000\002\037\003\000\002\040\004\000\002" +
    "\041\005\000\002\042\003\000\002\042\002\000\002\043" +
    "\005\000\002\043\003\000\002\044\004\000\002\045\005" +
    "\000\002\046\005\000\002\046\003\000\002\047\003\000" +
    "\002\047\002\000\002\050\004\000\002\050\003\000\002" +
    "\051\003\000\002\051\004\000\002\051\003\000\002\051" +
    "\003\000\002\052\003\000\002\052\003\000\002\052\003" +
    "\000\002\052\003\000\002\052\003\000\002\052\003\000" +
    "\002\052\004\000\002\052\005\000\002\052\005\000\002" +
    "\052\005\000\002\052\005\000\002\053\004\000\002\053" +
    "\004\000\002\053\004\000\002\053\004\000\002\053\004" +
    "\000\002\053\005\000\002\053\005\000\002\054\003\000" +
    "\002\054\003\000\002\054\004\000\002\054\004\000\002" +
    "\055\004\000\002\056\007\000\002\057\006\000\002\060" +
    "\006\000\002\061\010\000\002\062\004\000\002\062\010" +
    "\000\002\062\002\000\002\062\005\000\002\062\005\000" +
    "\002\063\011\000\002\064\007\000\002\064\005\000\002" +
    "\064\005\000\002\064\005\000\002\064\002\000\002\065" +
    "\007\000\002\065\007\000\002\066\011\000\002\067\012" +
    "\000\002\067\012\000\002\070\003\000\002\071\004\000" +
    "\002\073\003\000\002\073\003\000\002\073\003\000\002" +
    "\074\004\000\002\072\003\000\002\075\006\000\002\075" +
    "\003\000\002\076\006\000\002\076\003\000\002\077\005" +
    "\000\002\077\003\000\002\100\005\000\002\100\003\000" +
    "\002\101\005\000\002\101\003\000\002\102\005\000\002" +
    "\102\003\000\002\103\004\000\002\103\004\000\002\103" +
    "\004\000\002\103\003\000\002\104\004\000\002\104\004" +
    "\000\002\104\003\000\002\105\005\000\002\105\003\000" +
    "\002\106\003\000\002\106\003\000\002\107\003\000\002" +
    "\107\003\000\002\107\003\000\002\107\003\000\002\110" +
    "\003\000\002\110\003\000\002\111\003\000\002\111\003" +
    "\000\002\111\003" });

  /** Access to production table. */
  public short[][] production_table() {return _production_table;}

  /** Parse-action table. */
  protected static final short[][] _action_table = 
    unpackFromStrings(new String[] {
    "\000\u011e\000\014\003\007\004\010\005\ufffe\010\ufffe\013" +
    "\ufffe\001\002\000\004\002\u0120\001\002\000\010\005\uffff" +
    "\010\uffff\013\uffff\001\002\000\014\003\007\004\010\005" +
    "\ufffd\010\ufffd\013\ufffd\001\002\000\004\043\u011e\001\002" +
    "\000\006\003\u0118\076\u0119\001\002\000\010\005\012\010" +
    "\ufff7\013\ufff7\001\002\000\004\076\u0109\001\002\000\006" +
    "\010\ufff8\013\ufff8\001\002\000\006\010\ufff3\013\366\001" +
    "\002\000\006\003\020\046\022\001\002\000\010\005\012" +
    "\010\ufff6\013\ufff6\001\002\000\006\010\ufff5\013\ufff5\001" +
    "\002\000\062\002\uffb9\003\uffb9\005\uffb9\010\uffb9\011\uffb9" +
    "\013\uffb9\014\uffb9\015\uffb9\016\uffb9\017\uffb9\020\uffb9\021" +
    "\uffb9\022\uffb9\023\uffb9\024\uffb9\025\uffb9\026\uffb9\027\uffb9" +
    "\030\uffb9\031\uffb9\041\uffb9\042\uffb9\046\uffb9\076\uffb9\001" +
    "\002\000\016\005\uffc9\010\uffc9\011\uffc9\013\uffc9\041\uffc9" +
    "\046\uffc9\001\002\000\040\003\051\011\052\014\030\015" +
    "\061\016\026\017\027\020\031\021\025\024\023\027\034" +
    "\030\037\031\040\042\053\046\uffb7\076\033\001\002\000" +
    "\006\003\337\047\340\001\002\000\044\003\uffb2\011\uffb2" +
    "\014\uffb2\015\uffb2\016\uffb2\017\uffb2\020\uffb2\021\uffb2\024" +
    "\uffb2\025\uffb2\026\uffb2\027\uffb2\030\uffb2\031\uffb2\042\uffb2" +
    "\046\uffb2\076\uffb2\001\002\000\006\003\315\047\316\001" +
    "\002\000\006\003\311\076\033\001\002\000\006\003\303" +
    "\047\304\001\002\000\004\043\302\001\002\000\006\003" +
    "\276\047\277\001\002\000\044\003\051\011\052\014\030" +
    "\015\061\016\026\017\027\020\031\021\025\024\023\025" +
    "\uffb5\026\uffb5\027\034\030\037\031\040\042\053\046\uffb5" +
    "\076\033\001\002\000\064\040\uffde\043\uffde\044\uffde\045" +
    "\uffde\047\uffde\050\uffde\051\uffde\052\uffde\054\uffde\056\uffde" +
    "\057\uffde\060\uffde\061\uffde\062\uffde\063\uffde\064\uffde\065" +
    "\uffde\066\uffde\067\uffde\070\uffde\071\uffde\072\uffde\074\uffde" +
    "\075\uffde\076\uffde\001\002\000\006\003\266\047\267\001" +
    "\002\000\006\040\176\043\uffcd\001\002\000\044\003\uffb4" +
    "\011\uffb4\014\uffb4\015\uffb4\016\uffb4\017\uffb4\020\uffb4\021" +
    "\uffb4\024\uffb4\025\uffb4\026\uffb4\027\uffb4\030\uffb4\031\uffb4" +
    "\042\uffb4\046\uffb4\076\uffb4\001\002\000\006\003\256\046" +
    "\022\001\002\000\006\003\236\047\237\001\002\000\044" +
    "\003\uffab\011\uffab\014\uffab\015\uffab\016\uffab\017\uffab\020" +
    "\uffab\021\uffab\024\uffab\025\uffab\026\uffab\027\uffab\030\uffab" +
    "\031\uffab\042\uffab\046\uffab\076\uffab\001\002\000\010\025" +
    "\uffb8\026\uffb8\046\uffb8\001\002\000\004\043\235\001\002" +
    "\000\060\040\uffdd\043\uffdd\044\uffdd\045\uffdd\050\uffdd\051" +
    "\231\052\uffdd\054\uffdd\056\uffdd\057\uffdd\060\uffdd\061\uffdd" +
    "\062\uffdd\063\uffdd\064\uffdd\065\uffdd\066\uffdd\067\uffdd\070" +
    "\uffdd\071\uffdd\072\uffdd\074\uffdd\075\uffdd\001\002\000\044" +
    "\003\uffae\011\uffae\014\uffae\015\uffae\016\uffae\017\uffae\020" +
    "\uffae\021\uffae\024\uffae\025\uffae\026\uffae\027\uffae\030\uffae" +
    "\031\uffae\042\uffae\046\uffae\076\uffae\001\002\000\004\043" +
    "\230\001\002\000\044\003\uffb0\011\uffb0\014\uffb0\015\uffb0" +
    "\016\uffb0\017\uffb0\020\uffb0\021\uffb0\024\uffb0\025\uffb0\026" +
    "\uffb0\027\uffb0\030\uffb0\031\uffb0\042\uffb0\046\uffb0\076\uffb0" +
    "\001\002\000\004\043\227\001\002\000\044\003\uffb1\011" +
    "\uffb1\014\uffb1\015\uffb1\016\uffb1\017\uffb1\020\uffb1\021\uffb1" +
    "\024\uffb1\025\uffb1\026\uffb1\027\uffb1\030\uffb1\031\uffb1\042" +
    "\uffb1\046\uffb1\076\uffb1\001\002\000\020\003\170\032\171" +
    "\033\164\034\163\035\174\036\167\076\033\001\002\000" +
    "\036\003\107\016\026\020\031\047\071\073\073\074\111" +
    "\075\106\076\033\077\101\100\105\101\117\102\100\103" +
    "\070\104\120\001\002\000\044\003\uffad\011\uffad\014\uffad" +
    "\015\uffad\016\uffad\017\uffad\020\uffad\021\uffad\024\uffad\025" +
    "\uffad\026\uffad\027\uffad\030\uffad\031\uffad\042\uffad\046\uffad" +
    "\076\uffad\001\002\000\054\043\uff9d\044\uff9d\045\uff9d\050" +
    "\uff9d\052\uff9d\054\uff9d\056\uff9d\057\uff9d\060\uff9d\061\uff9d" +
    "\062\uff9d\063\uff9d\064\uff9d\065\uff9d\066\uff9d\067\uff9d\070" +
    "\uff9d\071\uff9d\072\uff9d\074\uff9d\075\uff9d\001\002\000\044" +
    "\003\uff85\011\uff85\014\uff85\015\uff85\016\uff85\017\uff85\020" +
    "\uff85\021\uff85\024\uff85\025\uff85\026\uff85\027\uff85\030\uff85" +
    "\031\uff85\042\uff85\046\uff85\076\uff85\001\002\000\044\003" +
    "\uffaf\011\uffaf\014\uffaf\015\uffaf\016\uffaf\017\uffaf\020\uffaf" +
    "\021\uffaf\024\uffaf\025\uffaf\026\uffaf\027\uffaf\030\uffaf\031" +
    "\uffaf\042\uffaf\046\uffaf\076\uffaf\001\002\000\044\003\uffac" +
    "\011\uffac\014\uffac\015\uffac\016\uffac\017\uffac\020\uffac\021" +
    "\uffac\024\uffac\025\uffac\026\uffac\027\uffac\030\uffac\031\uffac" +
    "\042\uffac\046\uffac\076\uffac\001\002\000\004\043\067\001" +
    "\002\000\004\046\066\001\002\000\054\043\uff9e\044\uff9e" +
    "\045\uff9e\050\uff9e\052\uff9e\054\uff9e\056\uff9e\057\uff9e\060" +
    "\uff9e\061\uff9e\062\uff9e\063\uff9e\064\uff9e\065\uff9e\066\uff9e" +
    "\067\uff9e\070\uff9e\071\uff9e\072\uff9e\074\uff9e\075\uff9e\001" +
    "\002\000\004\043\065\001\002\000\044\003\uffa4\011\uffa4" +
    "\014\uffa4\015\uffa4\016\uffa4\017\uffa4\020\uffa4\021\uffa4\024" +
    "\uffa4\025\uffa4\026\uffa4\027\uffa4\030\uffa4\031\uffa4\042\uffa4" +
    "\046\uffa4\076\uffa4\001\002\000\062\002\uffba\003\uffba\005" +
    "\uffba\010\uffba\011\uffba\013\uffba\014\uffba\015\uffba\016\uffba" +
    "\017\uffba\020\uffba\021\uffba\022\uffba\023\uffba\024\uffba\025" +
    "\uffba\026\uffba\027\uffba\030\uffba\031\uffba\041\uffba\042\uffba" +
    "\046\uffba\076\uffba\001\002\000\044\003\uffa1\011\uffa1\014" +
    "\uffa1\015\uffa1\016\uffa1\017\uffa1\020\uffa1\021\uffa1\024\uffa1" +
    "\025\uffa1\026\uffa1\027\uffa1\030\uffa1\031\uffa1\042\uffa1\046" +
    "\uffa1\076\uffa1\001\002\000\054\043\uffeb\044\uffeb\045\uffeb" +
    "\050\uffeb\052\uffeb\054\uffeb\056\uffeb\057\uffeb\060\uffeb\061" +
    "\uffeb\062\uffeb\063\uffeb\064\uffeb\065\uffeb\066\uffeb\067\uffeb" +
    "\070\uffeb\071\uffeb\072\uffeb\074\uffeb\075\uffeb\001\002\000" +
    "\026\016\026\020\031\047\071\076\033\077\101\100\105" +
    "\101\117\102\100\103\070\104\120\001\002\000\054\043" +
    "\uff6c\044\uff6c\045\uff6c\050\uff6c\052\uff6c\054\uff6c\056\uff6c" +
    "\057\uff6c\060\uff6c\061\uff6c\062\uff6c\063\uff6c\064\uff6c\065" +
    "\uff6c\066\uff6c\067\uff6c\070\uff6c\071\uff6c\072\uff6c\074\uff6c" +
    "\075\uff6c\001\002\000\034\016\026\020\031\047\071\073" +
    "\073\074\111\075\106\076\033\077\101\100\105\101\117" +
    "\102\100\103\070\104\120\001\002\000\054\043\uff83\044" +
    "\uff83\045\uff83\050\uff83\052\uff83\054\uff83\056\uff83\057\uff83" +
    "\060\uff83\061\uff83\062\uff83\063\uff83\064\uff83\065\uff83\066" +
    "\uff83\067\uff83\070\uff83\071\uff83\072\uff83\074\uff83\075\uff83" +
    "\001\002\000\020\043\uff7d\044\uff7d\045\uff7d\050\uff7d\052" +
    "\uff7d\054\uff7d\072\154\001\002\000\054\043\uff6a\044\uff6a" +
    "\045\uff6a\050\uff6a\052\uff6a\054\uff6a\056\uff6a\057\uff6a\060" +
    "\uff6a\061\uff6a\062\uff6a\063\uff6a\064\uff6a\065\uff6a\066\uff6a" +
    "\067\uff6a\070\uff6a\071\uff6a\072\uff6a\074\uff6a\075\uff6a\001" +
    "\002\000\026\043\uff79\044\uff79\045\uff79\050\uff79\052\uff79" +
    "\054\uff79\063\150\070\152\071\uff79\072\uff79\001\002\000" +
    "\054\043\uffef\044\uffef\045\uffef\050\uffef\052\uffef\054\uffef" +
    "\056\uffef\057\uffef\060\uffef\061\uffef\062\uffef\063\uffef\064" +
    "\uffef\065\uffef\066\uffef\067\uffef\070\uffef\071\uffef\072\uffef" +
    "\074\uffef\075\uffef\001\002\000\054\043\uffed\044\uffed\045" +
    "\uffed\050\uffed\052\uffed\054\uffed\056\uffed\057\uffed\060\uffed" +
    "\061\uffed\062\uffed\063\uffed\064\uffed\065\uffed\066\uffed\067" +
    "\uffed\070\uffed\071\uffed\072\uffed\074\uffed\075\uffed\001\002" +
    "\000\054\043\uff82\044\uff82\045\uff82\050\uff82\052\uff82\054" +
    "\uff82\056\uff82\057\uff82\060\uff82\061\uff82\062\uff82\063\uff82" +
    "\064\uff82\065\uff82\066\uff82\067\uff82\070\uff82\071\uff82\072" +
    "\uff82\074\uff82\075\uff82\001\002\000\042\043\uff75\044\uff75" +
    "\045\uff75\050\uff75\052\uff75\054\uff75\056\145\057\146\063" +
    "\uff75\064\uff75\065\uff75\066\uff75\067\uff75\070\uff75\071\uff75" +
    "\072\uff75\001\002\000\036\043\uff77\044\uff77\045\uff77\050" +
    "\uff77\052\uff77\054\uff77\063\uff77\064\137\065\142\066\140" +
    "\067\136\070\uff77\071\uff77\072\uff77\001\002\000\054\043" +
    "\uffec\044\uffec\045\uffec\050\uffec\052\uffec\054\uffec\056\uffec" +
    "\057\uffec\060\uffec\061\uffec\062\uffec\063\uffec\064\uffec\065" +
    "\uffec\066\uffec\067\uffec\070\uffec\071\uffec\072\uffec\074\uffec" +
    "\075\uffec\001\002\000\034\016\026\020\031\047\071\073" +
    "\073\074\111\075\106\076\033\077\101\100\105\101\117" +
    "\102\100\103\070\104\120\001\002\000\004\043\134\001" +
    "\002\000\022\043\uff7b\044\uff7b\045\uff7b\050\uff7b\052\uff7b" +
    "\054\uff7b\071\131\072\uff7b\001\002\000\034\016\026\020" +
    "\031\047\071\073\073\074\111\075\106\076\033\077\101" +
    "\100\105\101\117\102\100\103\070\104\120\001\002\000" +
    "\054\043\uff81\044\uff81\045\uff81\050\uff81\052\uff81\054\uff81" +
    "\056\uff81\057\uff81\060\uff81\061\uff81\062\uff81\063\uff81\064" +
    "\uff81\065\uff81\066\uff81\067\uff81\070\uff81\071\uff81\072\uff81" +
    "\074\uff81\075\uff81\001\002\000\016\043\uff7f\044\uff7f\045" +
    "\uff7f\050\uff7f\052\uff7f\054\uff7f\001\002\000\054\043\uff6f" +
    "\044\uff6f\045\uff6f\050\uff6f\052\uff6f\054\uff6f\056\uff6f\057" +
    "\uff6f\060\uff6f\061\uff6f\062\uff6f\063\uff6f\064\uff6f\065\uff6f" +
    "\066\uff6f\067\uff6f\070\uff6f\071\uff6f\072\uff6f\074\127\075" +
    "\126\001\002\000\050\043\uff73\044\uff73\045\uff73\050\uff73" +
    "\052\uff73\054\uff73\056\uff73\057\uff73\060\124\061\123\062" +
    "\122\063\uff73\064\uff73\065\uff73\066\uff73\067\uff73\070\uff73" +
    "\071\uff73\072\uff73\001\002\000\004\043\uff84\001\002\000" +
    "\054\043\uffee\044\uffee\045\uffee\050\uffee\052\uffee\054\uffee" +
    "\056\uffee\057\uffee\060\uffee\061\uffee\062\uffee\063\uffee\064" +
    "\uffee\065\uffee\066\uffee\067\uffee\070\uffee\071\uffee\072\uffee" +
    "\074\uffee\075\uffee\001\002\000\054\043\uffea\044\uffea\045" +
    "\uffea\050\uffea\052\uffea\054\uffea\056\uffea\057\uffea\060\uffea" +
    "\061\uffea\062\uffea\063\uffea\064\uffea\065\uffea\066\uffea\067" +
    "\uffea\070\uffea\071\uffea\072\uffea\074\uffea\075\uffea\001\002" +
    "\000\034\016\026\020\031\047\071\073\073\074\111\075" +
    "\106\076\033\077\101\100\105\101\117\102\100\103\070" +
    "\104\120\001\002\000\034\016\uff5f\020\uff5f\047\uff5f\073" +
    "\uff5f\074\uff5f\075\uff5f\076\uff5f\077\uff5f\100\uff5f\101\uff5f" +
    "\102\uff5f\103\uff5f\104\uff5f\001\002\000\034\016\uff60\020" +
    "\uff60\047\uff60\073\uff60\074\uff60\075\uff60\076\uff60\077\uff60" +
    "\100\uff60\101\uff60\102\uff60\103\uff60\104\uff60\001\002\000" +
    "\034\016\uff61\020\uff61\047\uff61\073\uff61\074\uff61\075\uff61" +
    "\076\uff61\077\uff61\100\uff61\101\uff61\102\uff61\103\uff61\104" +
    "\uff61\001\002\000\042\043\uff74\044\uff74\045\uff74\050\uff74" +
    "\052\uff74\054\uff74\056\uff74\057\uff74\063\uff74\064\uff74\065" +
    "\uff74\066\uff74\067\uff74\070\uff74\071\uff74\072\uff74\001\002" +
    "\000\054\043\uff6d\044\uff6d\045\uff6d\050\uff6d\052\uff6d\054" +
    "\uff6d\056\uff6d\057\uff6d\060\uff6d\061\uff6d\062\uff6d\063\uff6d" +
    "\064\uff6d\065\uff6d\066\uff6d\067\uff6d\070\uff6d\071\uff6d\072" +
    "\uff6d\074\uff6d\075\uff6d\001\002\000\054\043\uff6e\044\uff6e" +
    "\045\uff6e\050\uff6e\052\uff6e\054\uff6e\056\uff6e\057\uff6e\060" +
    "\uff6e\061\uff6e\062\uff6e\063\uff6e\064\uff6e\065\uff6e\066\uff6e" +
    "\067\uff6e\070\uff6e\071\uff6e\072\uff6e\074\uff6e\075\uff6e\001" +
    "\002\000\050\043\uff71\044\uff71\045\uff71\050\uff71\052\uff71" +
    "\054\uff71\056\uff71\057\uff71\060\uff71\061\uff71\062\uff71\063" +
    "\uff71\064\uff71\065\uff71\066\uff71\067\uff71\070\uff71\071\uff71" +
    "\072\uff71\001\002\000\004\071\132\001\002\000\034\016" +
    "\026\020\031\047\071\073\073\074\111\075\106\076\033" +
    "\077\101\100\105\101\117\102\100\103\070\104\120\001" +
    "\002\000\020\043\uff7c\044\uff7c\045\uff7c\050\uff7c\052\uff7c" +
    "\054\uff7c\072\uff7c\001\002\000\044\003\uff9f\011\uff9f\014" +
    "\uff9f\015\uff9f\016\uff9f\017\uff9f\020\uff9f\021\uff9f\024\uff9f" +
    "\025\uff9f\026\uff9f\027\uff9f\030\uff9f\031\uff9f\042\uff9f\046" +
    "\uff9f\076\uff9f\001\002\000\050\043\uff70\044\uff70\045\uff70" +
    "\050\uff70\052\uff70\054\uff70\056\uff70\057\uff70\060\uff70\061" +
    "\uff70\062\uff70\063\uff70\064\uff70\065\uff70\066\uff70\067\uff70" +
    "\070\uff70\071\uff70\072\uff70\001\002\000\034\016\uff67\020" +
    "\uff67\047\uff67\073\uff67\074\uff67\075\uff67\076\uff67\077\uff67" +
    "\100\uff67\101\uff67\102\uff67\103\uff67\104\uff67\001\002\000" +
    "\034\016\uff64\020\uff64\047\uff64\073\uff64\074\uff64\075\uff64" +
    "\076\uff64\077\uff64\100\uff64\101\uff64\102\uff64\103\uff64\104" +
    "\uff64\001\002\000\034\016\uff65\020\uff65\047\uff65\073\uff65" +
    "\074\uff65\075\uff65\076\uff65\077\uff65\100\uff65\101\uff65\102" +
    "\uff65\103\uff65\104\uff65\001\002\000\034\016\026\020\031" +
    "\047\071\073\073\074\111\075\106\076\033\077\101\100" +
    "\105\101\117\102\100\103\070\104\120\001\002\000\034" +
    "\016\uff66\020\uff66\047\uff66\073\uff66\074\uff66\075\uff66\076" +
    "\uff66\077\uff66\100\uff66\101\uff66\102\uff66\103\uff66\104\uff66" +
    "\001\002\000\026\043\uff78\044\uff78\045\uff78\050\uff78\052" +
    "\uff78\054\uff78\063\uff78\070\uff78\071\uff78\072\uff78\001\002" +
    "\000\034\016\026\020\031\047\071\073\073\074\111\075" +
    "\106\076\033\077\101\100\105\101\117\102\100\103\070" +
    "\104\120\001\002\000\034\016\uff63\020\uff63\047\uff63\073" +
    "\uff63\074\uff63\075\uff63\076\uff63\077\uff63\100\uff63\101\uff63" +
    "\102\uff63\103\uff63\104\uff63\001\002\000\034\016\uff62\020" +
    "\uff62\047\uff62\073\uff62\074\uff62\075\uff62\076\uff62\077\uff62" +
    "\100\uff62\101\uff62\102\uff62\103\uff62\104\uff62\001\002\000" +
    "\036\043\uff76\044\uff76\045\uff76\050\uff76\052\uff76\054\uff76" +
    "\063\uff76\064\uff76\065\uff76\066\uff76\067\uff76\070\uff76\071" +
    "\uff76\072\uff76\001\002\000\034\016\uff68\020\uff68\047\uff68" +
    "\073\uff68\074\uff68\075\uff68\076\uff68\077\uff68\100\uff68\101" +
    "\uff68\102\uff68\103\uff68\104\uff68\001\002\000\034\016\026" +
    "\020\031\047\071\073\073\074\111\075\106\076\033\077" +
    "\101\100\105\101\117\102\100\103\070\104\120\001\002" +
    "\000\034\016\uff69\020\uff69\047\uff69\073\uff69\074\uff69\075" +
    "\uff69\076\uff69\077\uff69\100\uff69\101\uff69\102\uff69\103\uff69" +
    "\104\uff69\001\002\000\022\043\uff7a\044\uff7a\045\uff7a\050" +
    "\uff7a\052\uff7a\054\uff7a\071\uff7a\072\uff7a\001\002\000\004" +
    "\072\155\001\002\000\034\016\026\020\031\047\071\073" +
    "\073\074\111\075\106\076\033\077\101\100\105\101\117" +
    "\102\100\103\070\104\120\001\002\000\016\043\uff7e\044" +
    "\uff7e\045\uff7e\050\uff7e\052\uff7e\054\uff7e\001\002\000\050" +
    "\043\uff72\044\uff72\045\uff72\050\uff72\052\uff72\054\uff72\056" +
    "\uff72\057\uff72\060\uff72\061\uff72\062\uff72\063\uff72\064\uff72" +
    "\065\uff72\066\uff72\067\uff72\070\uff72\071\uff72\072\uff72\001" +
    "\002\000\004\050\161\001\002\000\054\043\uff6b\044\uff6b" +
    "\045\uff6b\050\uff6b\052\uff6b\054\uff6b\056\uff6b\057\uff6b\060" +
    "\uff6b\061\uff6b\062\uff6b\063\uff6b\064\uff6b\065\uff6b\066\uff6b" +
    "\067\uff6b\070\uff6b\071\uff6b\072\uff6b\074\uff6b\075\uff6b\001" +
    "\002\000\010\050\uffe9\051\221\076\uffe9\001\002\000\010" +
    "\050\uffe4\051\uffe4\076\uffe4\001\002\000\010\050\uffe6\051" +
    "\uffe6\076\uffe6\001\002\000\010\047\uffe1\050\uffe1\076\uffe1" +
    "\001\002\000\012\047\uffe2\050\uffe2\051\221\076\uffe2\001" +
    "\002\000\010\050\uffe3\051\uffe3\076\uffe3\001\002\000\004" +
    "\043\225\001\002\000\010\050\uffe7\051\uffe7\076\uffe7\001" +
    "\002\000\004\076\175\001\002\000\006\050\uffe8\076\uffe8" +
    "\001\002\000\010\050\uffe5\051\uffe5\076\uffe5\001\002\000" +
    "\006\040\176\043\uffcd\001\002\000\040\012\202\016\026" +
    "\020\031\047\071\053\201\073\073\074\111\075\106\076" +
    "\033\077\101\100\105\101\117\102\100\103\070\104\120" +
    "\001\002\000\004\043\200\001\002\000\050\003\uffd0\005" +
    "\uffd0\011\uffd0\014\uffd0\015\uffd0\016\uffd0\017\uffd0\020\uffd0" +
    "\021\uffd0\024\uffd0\025\uffd0\026\uffd0\027\uffd0\030\uffd0\031" +
    "\uffd0\041\uffd0\042\uffd0\046\uffd0\076\uffd0\001\002\000\042" +
    "\012\202\016\026\020\031\047\071\053\201\054\uffbf\073" +
    "\073\074\111\075\106\076\033\077\101\100\105\101\117" +
    "\102\100\103\070\104\120\001\002\000\016\032\171\033" +
    "\164\034\163\035\174\036\167\076\033\001\002\000\012" +
    "\043\uffcc\044\uffcc\050\uffcc\054\uffcc\001\002\000\006\043" +
    "\uffce\050\uffce\001\002\000\012\043\uffcb\044\uffcb\050\uffcb" +
    "\054\uffcb\001\002\000\012\043\uffca\044\uffca\050\uffca\054" +
    "\uffca\001\002\000\004\051\221\001\002\000\004\047\211" +
    "\001\002\000\042\012\202\016\026\020\031\047\071\050" +
    "\uffbf\053\201\073\073\074\111\075\106\076\033\077\101" +
    "\100\105\101\117\102\100\103\070\104\120\001\002\000" +
    "\010\044\216\050\uffbd\054\uffbd\001\002\000\006\050\uffc0" +
    "\054\uffc0\001\002\000\004\050\215\001\002\000\012\043" +
    "\uffd1\044\uffd1\050\uffd1\054\uffd1\001\002\000\040\012\202" +
    "\016\026\020\031\047\071\053\201\073\073\074\111\075" +
    "\106\076\033\077\101\100\105\101\117\102\100\103\070" +
    "\104\120\001\002\000\006\050\uffbe\054\uffbe\001\002\000" +
    "\010\047\uffe0\050\uffe0\076\uffe0\001\002\000\004\052\222" +
    "\001\002\000\010\047\uffbc\050\uffbc\076\uffbc\001\002\000" +
    "\004\054\224\001\002\000\012\043\uffc1\044\uffc1\050\uffc1" +
    "\054\uffc1\001\002\000\050\003\uffcf\005\uffcf\011\uffcf\014" +
    "\uffcf\015\uffcf\016\uffcf\017\uffcf\020\uffcf\021\uffcf\024\uffcf" +
    "\025\uffcf\026\uffcf\027\uffcf\030\uffcf\031\uffcf\041\uffcf\042" +
    "\uffcf\046\uffcf\076\uffcf\001\002\000\010\047\uffdf\050\uffdf" +
    "\076\uffdf\001\002\000\044\003\uffb3\011\uffb3\014\uffb3\015" +
    "\uffb3\016\uffb3\017\uffb3\020\uffb3\021\uffb3\024\uffb3\025\uffb3" +
    "\026\uffb3\027\uffb3\030\uffb3\031\uffb3\042\uffb3\046\uffb3\076" +
    "\uffb3\001\002\000\044\003\uffa5\011\uffa5\014\uffa5\015\uffa5" +
    "\016\uffa5\017\uffa5\020\uffa5\021\uffa5\024\uffa5\025\uffa5\026" +
    "\uffa5\027\uffa5\030\uffa5\031\uffa5\042\uffa5\046\uffa5\076\uffa5" +
    "\001\002\000\034\016\026\020\031\047\071\073\073\074" +
    "\111\075\106\076\033\077\101\100\105\101\117\102\100" +
    "\103\070\104\120\001\002\000\056\040\uffdc\043\uffdc\044" +
    "\uffdc\045\uffdc\050\uffdc\052\uffdc\054\uffdc\056\uffdc\057\uffdc" +
    "\060\uffdc\061\uffdc\062\uffdc\063\uffdc\064\uffdc\065\uffdc\066" +
    "\uffdc\067\uffdc\070\uffdc\071\uffdc\072\uffdc\074\uffdc\075\uffdc" +
    "\001\002\000\004\052\234\001\002\000\056\040\uffbb\043" +
    "\uffbb\044\uffbb\045\uffbb\050\uffbb\052\uffbb\054\uffbb\056\uffbb" +
    "\057\uffbb\060\uffbb\061\uffbb\062\uffbb\063\uffbb\064\uffbb\065" +
    "\uffbb\066\uffbb\067\uffbb\070\uffbb\071\uffbb\072\uffbb\074\uffbb" +
    "\075\uffbb\001\002\000\044\003\uffa3\011\uffa3\014\uffa3\015" +
    "\uffa3\016\uffa3\017\uffa3\020\uffa3\021\uffa3\024\uffa3\025\uffa3" +
    "\026\uffa3\027\uffa3\030\uffa3\031\uffa3\042\uffa3\046\uffa3\076" +
    "\uffa3\001\002\000\004\043\255\001\002\000\004\076\033" +
    "\001\002\000\004\043\241\001\002\000\034\016\026\020" +
    "\031\047\071\073\073\074\111\075\106\076\033\077\101" +
    "\100\105\101\117\102\100\103\070\104\120\001\002\000" +
    "\034\016\026\020\031\047\071\073\073\074\111\075\106" +
    "\076\033\077\101\100\105\101\117\102\100\103\070\104" +
    "\120\001\002\000\004\043\244\001\002\000\036\016\uff80" +
    "\020\uff80\047\uff80\050\uff80\073\uff80\074\uff80\075\uff80\076" +
    "\uff80\077\uff80\100\uff80\101\uff80\102\uff80\103\uff80\104\uff80" +
    "\001\002\000\004\050\253\001\002\000\046\040\176\043" +
    "\uff83\050\uffcd\056\uff83\057\uff83\060\uff83\061\uff83\062\uff83" +
    "\063\uff83\064\uff83\065\uff83\066\uff83\067\uff83\070\uff83\071" +
    "\uff83\072\uff83\074\uff83\075\uff83\001\002\000\004\050\250" +
    "\001\002\000\006\003\020\046\022\001\002\000\044\003" +
    "\uff87\011\uff87\014\uff87\015\uff87\016\uff87\017\uff87\020\uff87" +
    "\021\uff87\024\uff87\025\uff87\026\uff87\027\uff87\030\uff87\031" +
    "\uff87\042\uff87\046\uff87\076\uff87\001\002\000\006\043\uff9a" +
    "\050\uff9a\001\002\000\006\003\020\046\022\001\002\000" +
    "\044\003\uff86\011\uff86\014\uff86\015\uff86\016\uff86\017\uff86" +
    "\020\uff86\021\uff86\024\uff86\025\uff86\026\uff86\027\uff86\030" +
    "\uff86\031\uff86\042\uff86\046\uff86\076\uff86\001\002\000\044" +
    "\003\uffa6\011\uffa6\014\uffa6\015\uffa6\016\uffa6\017\uffa6\020" +
    "\uffa6\021\uffa6\024\uffa6\025\uffa6\026\uffa6\027\uffa6\030\uffa6" +
    "\031\uffa6\042\uffa6\046\uffa6\076\uffa6\001\002\000\006\027" +
    "\uffb9\043\265\001\002\000\004\027\260\001\002\000\004" +
    "\047\261\001\002\000\034\016\026\020\031\047\071\073" +
    "\073\074\111\075\106\076\033\077\101\100\105\101\117" +
    "\102\100\103\070\104\120\001\002\000\004\050\263\001" +
    "\002\000\004\043\264\001\002\000\044\003\uff88\011\uff88" +
    "\014\uff88\015\uff88\016\uff88\017\uff88\020\uff88\021\uff88\024" +
    "\uff88\025\uff88\026\uff88\027\uff88\030\uff88\031\uff88\042\uff88" +
    "\046\uff88\076\uff88\001\002\000\044\003\uffa7\011\uffa7\014" +
    "\uffa7\015\uffa7\016\uffa7\017\uffa7\020\uffa7\021\uffa7\024\uffa7" +
    "\025\uffa7\026\uffa7\027\uffa7\030\uffa7\031\uffa7\042\uffa7\046" +
    "\uffa7\076\uffa7\001\002\000\004\043\274\001\002\000\034" +
    "\016\026\020\031\047\071\073\073\074\111\075\106\076" +
    "\033\077\101\100\105\101\117\102\100\103\070\104\120" +
    "\001\002\000\004\050\271\001\002\000\010\003\020\043" +
    "\272\046\022\001\002\000\044\003\uff89\011\uff89\014\uff89" +
    "\015\uff89\016\uff89\017\uff89\020\uff89\021\uff89\024\uff89\025" +
    "\uff89\026\uff89\027\uff89\030\uff89\031\uff89\042\uff89\046\uff89" +
    "\076\uff89\001\002\000\044\003\uff8a\011\uff8a\014\uff8a\015" +
    "\uff8a\016\uff8a\017\uff8a\020\uff8a\021\uff8a\024\uff8a\025\uff8a" +
    "\026\uff8a\027\uff8a\030\uff8a\031\uff8a\042\uff8a\046\uff8a\076" +
    "\uff8a\001\002\000\044\003\uffa8\011\uffa8\014\uffa8\015\uffa8" +
    "\016\uffa8\017\uffa8\020\uffa8\021\uffa8\024\uffa8\025\uffa8\026" +
    "\uffa8\027\uffa8\030\uffa8\031\uffa8\042\uffa8\046\uffa8\076\uffa8" +
    "\001\002\000\010\025\uffb6\026\uffb6\046\uffb6\001\002\000" +
    "\054\043\uff9b\044\uff9b\045\uff9b\050\uff9b\052\uff9b\054\uff9b" +
    "\056\uff9b\057\uff9b\060\uff9b\061\uff9b\062\uff9b\063\uff9b\064" +
    "\uff9b\065\uff9b\066\uff9b\067\uff9b\070\uff9b\071\uff9b\072\uff9b" +
    "\074\uff9b\075\uff9b\001\002\000\016\032\171\033\164\034" +
    "\163\035\174\036\167\076\033\001\002\000\004\050\301" +
    "\001\002\000\054\043\uff97\044\uff97\045\uff97\050\uff97\052" +
    "\uff97\054\uff97\056\uff97\057\uff97\060\uff97\061\uff97\062\uff97" +
    "\063\uff97\064\uff97\065\uff97\066\uff97\067\uff97\070\uff97\071" +
    "\uff97\072\uff97\074\uff97\075\uff97\001\002\000\044\003\uffa2" +
    "\011\uffa2\014\uffa2\015\uffa2\016\uffa2\017\uffa2\020\uffa2\021" +
    "\uffa2\024\uffa2\025\uffa2\026\uffa2\027\uffa2\030\uffa2\031\uffa2" +
    "\042\uffa2\046\uffa2\076\uffa2\001\002\000\004\043\307\001" +
    "\002\000\034\016\026\020\031\047\071\073\073\074\111" +
    "\075\106\076\033\077\101\100\105\101\117\102\100\103" +
    "\070\104\120\001\002\000\004\050\306\001\002\000\004" +
    "\043\uff98\001\002\000\044\003\uffa0\011\uffa0\014\uffa0\015" +
    "\uffa0\016\uffa0\017\uffa0\020\uffa0\021\uffa0\024\uffa0\025\uffa0" +
    "\026\uffa0\027\uffa0\030\uffa0\031\uffa0\042\uffa0\046\uffa0\076" +
    "\uffa0\001\002\000\004\047\312\001\002\000\054\043\uff9c" +
    "\044\uff9c\045\uff9c\050\uff9c\052\uff9c\054\uff9c\056\uff9c\057" +
    "\uff9c\060\uff9c\061\uff9c\062\uff9c\063\uff9c\064\uff9c\065\uff9c" +
    "\066\uff9c\067\uff9c\070\uff9c\071\uff9c\072\uff9c\074\uff9c\075" +
    "\uff9c\001\002\000\042\012\202\016\026\020\031\047\071" +
    "\050\uffbf\053\201\073\073\074\111\075\106\076\033\077" +
    "\101\100\105\101\117\102\100\103\070\104\120\001\002" +
    "\000\004\050\314\001\002\000\054\043\uff99\044\uff99\045" +
    "\uff99\050\uff99\052\uff99\054\uff99\056\uff99\057\uff99\060\uff99" +
    "\061\uff99\062\uff99\063\uff99\064\uff99\065\uff99\066\uff99\067" +
    "\uff99\070\uff99\071\uff99\072\uff99\074\uff99\075\uff99\001\002" +
    "\000\044\003\uffaa\011\uffaa\014\uffaa\015\uffaa\016\uffaa\017" +
    "\uffaa\020\uffaa\021\uffaa\024\uffaa\025\uffaa\026\uffaa\027\uffaa" +
    "\030\uffaa\031\uffaa\042\uffaa\046\uffaa\076\uffaa\001\002\000" +
    "\034\016\026\020\031\047\071\073\073\074\111\075\106" +
    "\076\033\077\101\100\105\101\117\102\100\103\070\104" +
    "\120\001\002\000\004\050\320\001\002\000\006\003\020" +
    "\046\022\001\002\000\050\003\uff93\011\uff93\014\uff93\015" +
    "\uff93\016\uff93\017\uff93\020\uff93\021\uff93\022\323\023\324" +
    "\024\uff93\025\uff93\026\uff93\027\uff93\030\uff93\031\uff93\042" +
    "\uff93\046\uff93\076\uff93\001\002\000\044\003\uff96\011\uff96" +
    "\014\uff96\015\uff96\016\uff96\017\uff96\020\uff96\021\uff96\024" +
    "\uff96\025\uff96\026\uff96\027\uff96\030\uff96\031\uff96\042\uff96" +
    "\046\uff96\076\uff96\001\002\000\006\003\334\046\022\001" +
    "\002\000\006\003\325\047\326\001\002\000\004\043\333" +
    "\001\002\000\034\016\026\020\031\047\071\073\073\074" +
    "\111\075\106\076\033\077\101\100\105\101\117\102\100" +
    "\103\070\104\120\001\002\000\004\050\330\001\002\000" +
    "\006\003\020\046\022\001\002\000\050\003\uff93\011\uff93" +
    "\014\uff93\015\uff93\016\uff93\017\uff93\020\uff93\021\uff93\022" +
    "\323\023\324\024\uff93\025\uff93\026\uff93\027\uff93\030\uff93" +
    "\031\uff93\042\uff93\046\uff93\076\uff93\001\002\000\044\003" +
    "\uff94\011\uff94\014\uff94\015\uff94\016\uff94\017\uff94\020\uff94" +
    "\021\uff94\024\uff94\025\uff94\026\uff94\027\uff94\030\uff94\031" +
    "\uff94\042\uff94\046\uff94\076\uff94\001\002\000\044\003\uff91" +
    "\011\uff91\014\uff91\015\uff91\016\uff91\017\uff91\020\uff91\021" +
    "\uff91\024\uff91\025\uff91\026\uff91\027\uff91\030\uff91\031\uff91" +
    "\042\uff91\046\uff91\076\uff91\001\002\000\046\003\uffb9\011" +
    "\uffb9\014\uffb9\015\uffb9\016\uffb9\017\uffb9\020\uffb9\021\uffb9" +
    "\024\uffb9\025\uffb9\026\uffb9\027\uffb9\030\uffb9\031\uffb9\042" +
    "\uffb9\043\336\046\uffb9\076\uffb9\001\002\000\044\003\uff95" +
    "\011\uff95\014\uff95\015\uff95\016\uff95\017\uff95\020\uff95\021" +
    "\uff95\024\uff95\025\uff95\026\uff95\027\uff95\030\uff95\031\uff95" +
    "\042\uff95\046\uff95\076\uff95\001\002\000\044\003\uff92\011" +
    "\uff92\014\uff92\015\uff92\016\uff92\017\uff92\020\uff92\021\uff92" +
    "\024\uff92\025\uff92\026\uff92\027\uff92\030\uff92\031\uff92\042" +
    "\uff92\046\uff92\076\uff92\001\002\000\004\043\362\001\002" +
    "\000\034\016\026\020\031\047\071\073\073\074\111\075" +
    "\106\076\033\077\101\100\105\101\117\102\100\103\070" +
    "\104\120\001\002\000\004\050\342\001\002\000\004\046" +
    "\343\001\002\000\010\025\346\026\345\046\uff8b\001\002" +
    "\000\004\046\361\001\002\000\006\003\355\045\356\001" +
    "\002\000\036\003\347\016\026\020\031\047\071\073\073" +
    "\074\111\075\106\076\033\077\101\100\105\101\117\102" +
    "\100\103\070\104\120\001\002\000\004\043\354\001\002" +
    "\000\004\045\351\001\002\000\044\003\051\011\052\014" +
    "\030\015\061\016\026\017\027\020\031\021\025\024\023" +
    "\025\uffb7\026\uffb7\027\034\030\037\031\040\042\053\046" +
    "\uffb7\076\033\001\002\000\010\025\346\026\345\046\uff8b" +
    "\001\002\000\004\046\uff8f\001\002\000\004\046\uff8e\001" +
    "\002\000\004\043\360\001\002\000\040\003\051\011\052" +
    "\014\030\015\061\016\026\017\027\020\031\021\025\024" +
    "\023\027\034\030\037\031\040\042\053\046\uffb7\076\033" +
    "\001\002\000\004\046\uff8d\001\002\000\004\046\uff8c\001" +
    "\002\000\044\003\uff90\011\uff90\014\uff90\015\uff90\016\uff90" +
    "\017\uff90\020\uff90\021\uff90\024\uff90\025\uff90\026\uff90\027" +
    "\uff90\030\uff90\031\uff90\042\uff90\046\uff90\076\uff90\001\002" +
    "\000\044\003\uffa9\011\uffa9\014\uffa9\015\uffa9\016\uffa9\017" +
    "\uffa9\020\uffa9\021\uffa9\024\uffa9\025\uffa9\026\uffa9\027\uffa9" +
    "\030\uffa9\031\uffa9\042\uffa9\046\uffa9\076\uffa9\001\002\000" +
    "\006\010\ufff2\013\366\001\002\000\004\010\u0105\001\002" +
    "\000\004\010\ufff4\001\002\000\004\076\367\001\002\000" +
    "\004\046\371\001\002\000\006\010\uffdb\013\uffdb\001\002" +
    "\000\012\005\012\011\052\041\375\046\uffd8\001\002\000" +
    "\004\046\u0104\001\002\000\012\005\uffd4\011\uffd4\041\uffd4" +
    "\046\uffd4\001\002\000\012\005\uffd3\011\uffd3\041\uffd3\046" +
    "\uffd3\001\002\000\004\076\u0102\001\002\000\012\005\012" +
    "\011\052\041\375\046\uffd6\001\002\000\004\046\uffd9\001" +
    "\002\000\012\005\uffd5\011\uffd5\041\uffd5\046\uffd5\001\002" +
    "\000\004\046\uffd7\001\002\000\006\003\020\046\022\001" +
    "\002\000\012\005\uffd2\011\uffd2\041\uffd2\046\uffd2\001\002" +
    "\000\006\010\uffda\013\uffda\001\002\000\006\003\020\046" +
    "\022\001\002\000\004\002\000\001\002\000\004\002\ufff0" +
    "\001\002\000\004\010\ufff1\001\002\000\004\006\u010a\001" +
    "\002\000\004\047\u010b\001\002\000\020\032\171\033\164" +
    "\034\163\035\174\036\167\050\uffc5\076\033\001\002\000" +
    "\004\050\uffc6\001\002\000\004\076\u0117\001\002\000\004" +
    "\050\u0112\001\002\000\006\044\u0110\050\uffc3\001\002\000" +
    "\016\032\171\033\164\034\163\035\174\036\167\076\033" +
    "\001\002\000\004\050\uffc4\001\002\000\004\007\u0113\001" +
    "\002\000\020\032\171\033\164\034\163\035\174\036\167" +
    "\037\u0114\076\033\001\002\000\006\003\uffc7\046\uffc7\001" +
    "\002\000\004\076\u0116\001\002\000\006\003\uffc8\046\uffc8" +
    "\001\002\000\006\044\uffc2\050\uffc2\001\002\000\004\043" +
    "\u011d\001\002\000\004\040\u011a\001\002\000\034\016\026" +
    "\020\031\047\071\073\073\074\111\075\106\076\033\077" +
    "\101\100\105\101\117\102\100\103\070\104\120\001\002" +
    "\000\004\043\u011c\001\002\000\014\003\ufffb\004\ufffb\005" +
    "\ufffb\010\ufffb\013\ufffb\001\002\000\014\003\ufffa\004\ufffa" +
    "\005\ufffa\010\ufffa\013\ufffa\001\002\000\014\003\ufff9\004" +
    "\ufff9\005\ufff9\010\ufff9\013\ufff9\001\002\000\010\005\ufffc" +
    "\010\ufffc\013\ufffc\001\002\000\004\002\001\001\002" });

  /** Access to parse-action table. */
  public short[][] action_table() {return _action_table;}

  /** <code>reduce_goto</code> table. */
  protected static final short[][] _reduce_table = 
    unpackFromStrings(new String[] {
    "\000\u011e\000\012\002\003\003\010\004\004\005\005\001" +
    "\001\000\002\001\001\000\002\001\001\000\006\004\u011e" +
    "\005\005\001\001\000\002\001\001\000\002\001\001\000" +
    "\012\006\013\007\012\034\015\035\014\001\001\000\002" +
    "\001\001\000\002\001\001\000\010\010\363\011\364\022" +
    "\362\001\001\000\004\046\020\001\001\000\010\007\016" +
    "\034\015\035\014\001\001\000\002\001\001\000\002\001" +
    "\001\000\002\001\001\000\052\020\043\021\034\031\055" +
    "\047\061\050\041\051\031\052\023\053\035\054\047\055" +
    "\045\056\062\057\063\060\054\061\046\063\056\065\044" +
    "\066\053\067\057\070\040\071\042\001\001\000\002\001" +
    "\001\000\002\001\001\000\002\001\001\000\004\020\307" +
    "\001\001\000\002\001\001\000\002\001\001\000\002\001" +
    "\001\000\050\020\043\021\034\031\055\050\274\051\031" +
    "\052\023\053\035\054\047\055\045\056\062\057\063\060" +
    "\054\061\046\063\056\065\044\066\053\067\057\070\040" +
    "\071\042\001\001\000\002\001\001\000\002\001\001\000" +
    "\004\032\251\001\001\000\002\001\001\000\004\046\256" +
    "\001\001\000\002\001\001\000\002\001\001\000\002\001" +
    "\001\000\002\001\001\000\004\045\231\001\001\000\002" +
    "\001\001\000\002\001\001\000\002\001\001\000\002\001" +
    "\001\000\002\001\001\000\014\014\171\015\161\016\172" +
    "\017\164\020\165\001\001\000\044\013\111\020\043\021" +
    "\073\054\101\056\062\060\054\072\115\073\075\075\112" +
    "\076\074\077\107\100\076\101\103\102\102\103\114\104" +
    "\113\105\071\001\001\000\002\001\001\000\002\001\001" +
    "\000\002\001\001\000\002\001\001\000\002\001\001\000" +
    "\002\001\001\000\002\001\001\000\002\001\001\000\002" +
    "\001\001\000\002\001\001\000\002\001\001\000\002\001" +
    "\001\000\002\001\001\000\022\013\111\020\043\021\073" +
    "\054\101\056\062\060\054\073\075\105\157\001\001\000" +
    "\002\001\001\000\026\013\111\020\043\021\073\054\101" +
    "\056\062\060\054\073\075\103\156\104\113\105\071\001" +
    "\001\000\002\001\001\000\002\001\001\000\002\001\001" +
    "\000\004\106\150\001\001\000\002\001\001\000\002\001" +
    "\001\000\002\001\001\000\004\110\143\001\001\000\004" +
    "\107\140\001\001\000\002\001\001\000\026\013\111\020" +
    "\043\021\073\054\101\056\062\060\054\073\075\103\134" +
    "\104\113\105\071\001\001\000\002\001\001\000\002\001" +
    "\001\000\026\013\111\020\043\021\073\054\101\056\062" +
    "\060\054\073\075\103\127\104\113\105\071\001\001\000" +
    "\002\001\001\000\002\001\001\000\002\001\001\000\004" +
    "\111\120\001\001\000\002\001\001\000\002\001\001\000" +
    "\002\001\001\000\030\013\111\020\043\021\073\054\101" +
    "\056\062\060\054\073\075\102\124\103\114\104\113\105" +
    "\071\001\001\000\002\001\001\000\002\001\001\000\002" +
    "\001\001\000\002\001\001\000\002\001\001\000\002\001" +
    "\001\000\002\001\001\000\002\001\001\000\040\013\111" +
    "\020\043\021\073\054\101\056\062\060\054\073\075\076" +
    "\132\077\107\100\076\101\103\102\102\103\114\104\113" +
    "\105\071\001\001\000\002\001\001\000\002\001\001\000" +
    "\002\001\001\000\002\001\001\000\002\001\001\000\002" +
    "\001\001\000\034\013\111\020\043\021\073\054\101\056" +
    "\062\060\054\073\075\100\142\101\103\102\102\103\114" +
    "\104\113\105\071\001\001\000\002\001\001\000\002\001" +
    "\001\000\032\013\111\020\043\021\073\054\101\056\062" +
    "\060\054\073\075\101\146\102\102\103\114\104\113\105" +
    "\071\001\001\000\002\001\001\000\002\001\001\000\002" +
    "\001\001\000\002\001\001\000\036\013\111\020\043\021" +
    "\073\054\101\056\062\060\054\073\075\077\152\100\076" +
    "\101\103\102\102\103\114\104\113\105\071\001\001\000" +
    "\002\001\001\000\002\001\001\000\002\001\001\000\042" +
    "\013\111\020\043\021\073\054\101\056\062\060\054\073" +
    "\075\075\155\076\074\077\107\100\076\101\103\102\102" +
    "\103\114\104\113\105\071\001\001\000\002\001\001\000" +
    "\002\001\001\000\002\001\001\000\002\001\001\000\004" +
    "\044\217\001\001\000\002\001\001\000\002\001\001\000" +
    "\002\001\001\000\004\044\225\001\001\000\002\001\001" +
    "\000\002\001\001\000\002\001\001\000\002\001\001\000" +
    "\002\001\001\000\002\001\001\000\004\032\176\001\001" +
    "\000\052\013\111\020\043\021\073\030\204\033\203\041" +
    "\202\054\101\056\062\060\054\072\205\073\075\075\112" +
    "\076\074\077\107\100\076\101\103\102\102\103\114\104" +
    "\113\105\071\001\001\000\002\001\001\000\002\001\001" +
    "\000\056\013\111\020\043\021\073\030\204\033\211\041" +
    "\202\042\222\043\212\054\101\056\062\060\054\072\205" +
    "\073\075\075\112\076\074\077\107\100\076\101\103\102" +
    "\102\103\114\104\113\105\071\001\001\000\012\015\206" +
    "\016\207\017\164\020\165\001\001\000\002\001\001\000" +
    "\002\001\001\000\002\001\001\000\002\001\001\000\004" +
    "\044\217\001\001\000\002\001\001\000\056\013\111\020" +
    "\043\021\073\030\204\033\211\041\202\042\213\043\212" +
    "\054\101\056\062\060\054\072\205\073\075\075\112\076" +
    "\074\077\107\100\076\101\103\102\102\103\114\104\113" +
    "\105\071\001\001\000\002\001\001\000\002\001\001\000" +
    "\002\001\001\000\002\001\001\000\054\013\111\020\043" +
    "\021\073\030\204\033\211\041\202\043\216\054\101\056" +
    "\062\060\054\072\205\073\075\075\112\076\074\077\107" +
    "\100\076\101\103\102\102\103\114\104\113\105\071\001" +
    "\001\000\002\001\001\000\002\001\001\000\002\001\001" +
    "\000\002\001\001\000\002\001\001\000\002\001\001\000" +
    "\002\001\001\000\002\001\001\000\002\001\001\000\002" +
    "\001\001\000\044\013\111\020\043\021\073\054\101\056" +
    "\062\060\054\072\232\073\075\075\112\076\074\077\107" +
    "\100\076\101\103\102\102\103\114\104\113\105\071\001" +
    "\001\000\002\001\001\000\002\001\001\000\002\001\001" +
    "\000\002\001\001\000\002\001\001\000\010\020\043\021" +
    "\034\055\237\001\001\000\002\001\001\000\046\013\111" +
    "\020\043\021\073\054\101\056\062\060\054\072\242\073" +
    "\075\074\241\075\112\076\074\077\107\100\076\101\103" +
    "\102\102\103\114\104\113\105\071\001\001\000\050\013" +
    "\111\020\043\021\245\054\101\055\246\056\062\060\054" +
    "\072\242\073\075\074\244\075\112\076\074\077\107\100" +
    "\076\101\103\102\102\103\114\104\113\105\071\001\001" +
    "\000\002\001\001\000\002\001\001\000\002\001\001\000" +
    "\004\032\251\001\001\000\002\001\001\000\004\046\250" +
    "\001\001\000\002\001\001\000\002\001\001\000\004\046" +
    "\253\001\001\000\002\001\001\000\002\001\001\000\002" +
    "\001\001\000\002\001\001\000\002\001\001\000\044\013" +
    "\111\020\043\021\073\054\101\056\062\060\054\072\261" +
    "\073\075\075\112\076\074\077\107\100\076\101\103\102" +
    "\102\103\114\104\113\105\071\001\001\000\002\001\001" +
    "\000\002\001\001\000\002\001\001\000\002\001\001\000" +
    "\002\001\001\000\044\013\111\020\043\021\073\054\101" +
    "\056\062\060\054\072\267\073\075\075\112\076\074\077" +
    "\107\100\076\101\103\102\102\103\114\104\113\105\071" +
    "\001\001\000\002\001\001\000\004\046\272\001\001\000" +
    "\002\001\001\000\002\001\001\000\002\001\001\000\002" +
    "\001\001\000\002\001\001\000\014\014\277\015\161\016" +
    "\172\017\164\020\165\001\001\000\002\001\001\000\002" +
    "\001\001\000\002\001\001\000\002\001\001\000\044\013" +
    "\111\020\043\021\073\054\101\056\062\060\054\072\304" +
    "\073\075\075\112\076\074\077\107\100\076\101\103\102" +
    "\102\103\114\104\113\105\071\001\001\000\002\001\001" +
    "\000\002\001\001\000\002\001\001\000\002\001\001\000" +
    "\002\001\001\000\056\013\111\020\043\021\073\030\204" +
    "\033\211\041\202\042\312\043\212\054\101\056\062\060" +
    "\054\072\205\073\075\075\112\076\074\077\107\100\076" +
    "\101\103\102\102\103\114\104\113\105\071\001\001\000" +
    "\002\001\001\000\002\001\001\000\002\001\001\000\044" +
    "\013\111\020\043\021\073\054\101\056\062\060\054\072" +
    "\316\073\075\075\112\076\074\077\107\100\076\101\103" +
    "\102\102\103\114\104\113\105\071\001\001\000\002\001" +
    "\001\000\004\046\320\001\001\000\004\062\321\001\001" +
    "\000\002\001\001\000\004\046\334\001\001\000\002\001" +
    "\001\000\002\001\001\000\044\013\111\020\043\021\073" +
    "\054\101\056\062\060\054\072\326\073\075\075\112\076" +
    "\074\077\107\100\076\101\103\102\102\103\114\104\113" +
    "\105\071\001\001\000\002\001\001\000\004\046\330\001" +
    "\001\000\004\062\331\001\001\000\002\001\001\000\002" +
    "\001\001\000\002\001\001\000\002\001\001\000\002\001" +
    "\001\000\002\001\001\000\044\013\111\020\043\021\073" +
    "\054\101\056\062\060\054\072\340\073\075\075\112\076" +
    "\074\077\107\100\076\101\103\102\102\103\114\104\113" +
    "\105\071\001\001\000\002\001\001\000\002\001\001\000" +
    "\004\064\343\001\001\000\002\001\001\000\002\001\001" +
    "\000\044\013\111\020\043\021\073\054\101\056\062\060" +
    "\054\072\347\073\075\075\112\076\074\077\107\100\076" +
    "\101\103\102\102\103\114\104\113\105\071\001\001\000" +
    "\002\001\001\000\002\001\001\000\052\020\043\021\034" +
    "\031\055\047\351\050\041\051\031\052\023\053\035\054" +
    "\047\055\045\056\062\057\063\060\054\061\046\063\056" +
    "\065\044\066\053\067\057\070\040\071\042\001\001\000" +
    "\004\064\352\001\001\000\002\001\001\000\002\001\001" +
    "\000\002\001\001\000\052\020\043\021\034\031\055\047" +
    "\356\050\041\051\031\052\023\053\035\054\047\055\045" +
    "\056\062\057\063\060\054\061\046\063\056\065\044\066" +
    "\053\067\057\070\040\071\042\001\001\000\002\001\001" +
    "\000\002\001\001\000\002\001\001\000\002\001\001\000" +
    "\006\011\u0107\022\362\001\001\000\004\012\u0105\001\001" +
    "\000\002\001\001\000\002\001\001\000\004\023\367\001" +
    "\001\000\002\001\001\000\020\024\371\025\376\026\375" +
    "\027\373\031\377\034\372\035\014\001\001\000\002\001" +
    "\001\000\002\001\001\000\002\001\001\000\002\001\001" +
    "\000\016\025\u0100\026\375\027\373\031\377\034\372\035" +
    "\014\001\001\000\002\001\001\000\002\001\001\000\002" +
    "\001\001\000\004\046\u0102\001\001\000\002\001\001\000" +
    "\002\001\001\000\004\046\u0106\001\001\000\002\001\001" +
    "\000\002\001\001\000\002\001\001\000\002\001\001\000" +
    "\002\001\001\000\022\014\u010c\015\161\016\172\017\164" +
    "\020\165\036\u010d\037\u010b\040\u010e\001\001\000\002\001" +
    "\001\000\002\001\001\000\002\001\001\000\002\001\001" +
    "\000\020\014\u010c\015\161\016\172\017\164\020\165\037" +
    "\u0110\040\u010e\001\001\000\002\001\001\000\002\001\001" +
    "\000\014\014\u0114\015\161\016\172\017\164\020\165\001" +
    "\001\000\002\001\001\000\002\001\001\000\002\001\001" +
    "\000\002\001\001\000\002\001\001\000\002\001\001\000" +
    "\044\013\111\020\043\021\073\054\101\056\062\060\054" +
    "\072\u011a\073\075\075\112\076\074\077\107\100\076\101" +
    "\103\102\102\103\114\104\113\105\071\001\001\000\002" +
    "\001\001\000\002\001\001\000\002\001\001\000\002\001" +
    "\001\000\002\001\001\000\002\001\001" });

  /** Access to <code>reduce_goto</code> table. */
  public short[][] reduce_table() {return _reduce_table;}

  /** Instance of action encapsulation class. */
  protected CUP$Parser$actions action_obj;

  /** Action encapsulation object initializer. */
  protected void init_actions()
    {
      action_obj = new CUP$Parser$actions(this);
    }

  /** Invoke a user supplied parse action. */
  public java_cup.runtime.Symbol do_action(
    int                        act_num,
    java_cup.runtime.lr_parser parser,
    java.util.Stack            stack,
    int                        top)
    throws java.lang.Exception
  {
    /* call code in generated class */
    return action_obj.CUP$Parser$do_action(act_num, parser, stack, top);
  }

  /** Indicates start state. */
  public int start_state() {return 0;}
  /** Indicates start production. */
  public int start_production() {return 0;}

  /** <code>EOF</code> Symbol index. */
  public int EOF_sym() {return 0;}

  /** <code>error</code> Symbol index. */
  public int error_sym() {return 1;}



	StringBuilder sb = new StringBuilder();
	
	/*Error reporting*/
	public void report_error(String message, Object info) {
		sb.append("ERROR! ");
		
		/*Code borrowed from ycalc.cup*/
        if (info instanceof java_cup.runtime.Symbol) 
		{
            java_cup.runtime.Symbol s = ((java_cup.runtime.Symbol) info);
   
			/*Line number*/
            if (s.left >= 0) 
			{                
                sb.append("Line: " +(s.left+1));   
				/*Column number*/
                if (s.right >= 0)                    
                    sb.append(", Column: " +(s.right+1));
            }
        }
		 
		sb.append(" - " +message);
	}   
	public void report_fatal_error(String message, Object info) {
		report_error(message, info);
		throw new RuntimeException("Fatal Syntax Error");
	}
	
	public void addText(String text)
	{
		sb.append(text);
		//sb.append(" - Line " + MainConyo.s.lineNo());
		sb.append("\t\n");
	}
	public void printText()
	{
		if(sb.length() > 0)
			System.out.println(sb);
		else
			System.out.println("DONE.");
	}


/** Cup generated class to encapsulate user supplied action code.*/
@SuppressWarnings({"rawtypes", "unchecked", "unused"})
class CUP$Parser$actions {
  private final Parser parser;

  /** Constructor */
  CUP$Parser$actions(Parser parser) {
    this.parser = parser;
  }

  /** Method 0 with the actual generated action code for actions 0 to 300. */
  public final java_cup.runtime.Symbol CUP$Parser$do_action_part00000000(
    int                        CUP$Parser$act_num,
    java_cup.runtime.lr_parser CUP$Parser$parser,
    java.util.Stack            CUP$Parser$stack,
    int                        CUP$Parser$top)
    throws java.lang.Exception
    {
      /* Symbol object for return from actions */
      java_cup.runtime.Symbol CUP$Parser$result;

      /* select the action based on the action number */
      switch (CUP$Parser$act_num)
        {
          /*. . . . . . . . . . . . . . . . . . . .*/
          case 0: // $START ::= conyogram EOF 
            {
              Object RESULT =null;
		int start_valleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)).left;
		int start_valright = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)).right;
		Conyogram start_val = (Conyogram)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-1)).value;
		RESULT = start_val;
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("$START",0, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          /* ACCEPT */
          CUP$Parser$parser.done_parsing();
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 1: // conyogram ::= OMG_section yaya_section sub_yaya_section super_yaya 
            {
              Conyogram RESULT =null;
		int oleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-3)).left;
		int oright = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-3)).right;
		OMG_section o = (OMG_section)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-3)).value;
		int yleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)).left;
		int yright = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)).right;
		yaya_section y = (yaya_section)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-2)).value;
		int bleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)).left;
		int bright = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)).right;
		sub_yaya_section b = (sub_yaya_section)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-1)).value;
		int pleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).left;
		int pright = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).right;
		super_yaya p = (super_yaya)((java_cup.runtime.Symbol) CUP$Parser$stack.peek()).value;
		 
					RESULT = new Conyogram(o, y, b, p);
					printText(); 
				
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("conyogram",0, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-3)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 2: // OMG_section ::= OMG_list 
            {
              OMG_section RESULT =null;
		int oleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).left;
		int oright = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).right;
		OMG_list o = (OMG_list)((java_cup.runtime.Symbol) CUP$Parser$stack.peek()).value;
		 RESULT = new OMGSection(); 
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("OMG_section",1, ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 3: // OMG_section ::= 
            {
              OMG_section RESULT =null;
		 RESULT = new OMGSection(); 
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("OMG_section",1, ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 4: // OMG_list ::= OMG_dec 
            {
              OMG_list RESULT =null;
		int oleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).left;
		int oright = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).right;
		OMG_dec o = (OMG_dec)((java_cup.runtime.Symbol) CUP$Parser$stack.peek()).value;
		 RESULT = new OMGList(o); 
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("OMG_list",2, ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 5: // OMG_list ::= OMG_dec OMG_list 
            {
              OMG_list RESULT =null;
		int oleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)).left;
		int oright = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)).right;
		OMG_dec o = (OMG_dec)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-1)).value;
		int lleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).left;
		int lright = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).right;
		OMG_list l = (OMG_list)((java_cup.runtime.Symbol) CUP$Parser$stack.peek()).value;
		 RESULT = new OMGList(o, l); 
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("OMG_list",2, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 6: // OMG_dec ::= OMG IDENTIFIER MAKE_KUHA sabi_sabi DB 
            {
              OMG_dec RESULT =null;
		int idleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-3)).left;
		int idright = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-3)).right;
		String id = (String)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-3)).value;
		int ssleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)).left;
		int ssright = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)).right;
		sabi_sabi ss = (sabi_sabi)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-1)).value;
		 RESULT = new OMG(id, ss); 
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("OMG_dec",3, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-4)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 7: // OMG_dec ::= OMG error DB 
            {
              OMG_dec RESULT =null;
		 RESULT = null; addText(" in Constant Declaration"); 
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("OMG_dec",3, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 8: // OMG_dec ::= error DB 
            {
              OMG_dec RESULT =null;
		 RESULT = null; addText(" before main and function declarations"); 
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("OMG_dec",3, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 9: // yaya_section ::= yaya_list 
            {
              yaya_section RESULT =null;
		int lleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).left;
		int lright = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).right;
		yaya_list l = (yaya_list)((java_cup.runtime.Symbol) CUP$Parser$stack.peek()).value;
		 RESULT = new yayaSection(l); 
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("yaya_section",4, ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 10: // yaya_section ::= 
            {
              yaya_section RESULT =null;
		 RESULT = new yayaSection(); 
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("yaya_section",4, ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 11: // yaya_list ::= yaya 
            {
              yaya_list RESULT =null;
		int yleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).left;
		int yright = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).right;
		yaya y = (yaya)((java_cup.runtime.Symbol) CUP$Parser$stack.peek()).value;
		 RESULT = new yayaList(y); 
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("yaya_list",5, ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 12: // yaya_list ::= yaya yaya_list 
            {
              yaya_list RESULT =null;
		int yleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)).left;
		int yright = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)).right;
		yaya y = (yaya)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-1)).value;
		int lleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).left;
		int lright = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).right;
		yaya_list l = (yaya_list)((java_cup.runtime.Symbol) CUP$Parser$stack.peek()).value;
		 RESULT = new yayaList(y, l); 
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("yaya_list",5, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 13: // sub_yaya_section ::= sub_yaya_list 
            {
              sub_yaya_section RESULT =null;
		int sleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).left;
		int sright = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).right;
		sub_yaya_list s = (sub_yaya_list)((java_cup.runtime.Symbol) CUP$Parser$stack.peek()).value;
		 RESULT = subYayaSection(s); 
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("sub_yaya_section",6, ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 14: // sub_yaya_section ::= 
            {
              sub_yaya_section RESULT =null;
		 RESULT = new subYayaSection(); 
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("sub_yaya_section",6, ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 15: // sub_yaya_list ::= sub_yaya 
            {
              sub_yaya_list RESULT =null;
		int sleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).left;
		int sright = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).right;
		sub_yaya s = (sub_yaya)((java_cup.runtime.Symbol) CUP$Parser$stack.peek()).value;
		 RESULT = new subYayaList(s); 
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("sub_yaya_list",7, ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 16: // sub_yaya_list ::= sub_yaya sub_yaya_list 
            {
              sub_yaya_list RESULT =null;
		int sleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)).left;
		int sright = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)).right;
		sub_yaya s = (sub_yaya)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-1)).value;
		int lleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).left;
		int lright = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).right;
		sub_yaya_list l = (sub_yaya_list)((java_cup.runtime.Symbol) CUP$Parser$stack.peek()).value;
		 RESULT = new subYayaList(s, l); 
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("sub_yaya_list",7, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 17: // super_yaya ::= SUPER_YAYA utos_block 
            {
              super_yaya RESULT =null;
		int uleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).left;
		int uright = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).right;
		utos_block u = (utos_block)((java_cup.runtime.Symbol) CUP$Parser$stack.peek()).value;
		 RESULT = new superYaya(u); 
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("super_yaya",8, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 18: // literal ::= INT_LITERAL 
            {
              literal RESULT =null;
		int ileft = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).left;
		int iright = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).right;
		String i = (String)((java_cup.runtime.Symbol) CUP$Parser$stack.peek()).value;
		 RESULT = new Inty(i); 
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("literal",9, ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 19: // literal ::= FLOAT_LITERAL 
            {
              literal RESULT =null;
		int fleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).left;
		int fright = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).right;
		String f = (String)((java_cup.runtime.Symbol) CUP$Parser$stack.peek()).value;
		 RESULT = new Floaty(f); 
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("literal",9, ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 20: // literal ::= STRING_LITERAL 
            {
              literal RESULT =null;
		int sleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).left;
		int sright = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).right;
		String s = (String)((java_cup.runtime.Symbol) CUP$Parser$stack.peek()).value;
		 RESULT = new Stringy(s); 
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("literal",9, ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 21: // literal ::= CHAR_LITERAL 
            {
              literal RESULT =null;
		int cleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).left;
		int cright = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).right;
		String c = (String)((java_cup.runtime.Symbol) CUP$Parser$stack.peek()).value;
		 RESULT = new Chary(c); 
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("literal",9, ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 22: // literal ::= BOOL_LITERAL 
            {
              literal RESULT =null;
		int bleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).left;
		int bright = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).right;
		String b = (String)((java_cup.runtime.Symbol) CUP$Parser$stack.peek()).value;
		 RESULT = new Booly(b); 
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("literal",9, ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 23: // literal ::= WALEY 
            {
              literal RESULT =null;
		int wleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).left;
		int wright = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).right;
		String w = (String)((java_cup.runtime.Symbol) CUP$Parser$stack.peek()).value;
		 RESULT = new Waley(w); 
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("literal",9, ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 24: // data_type ::= primitive_dt 
            {
              data_type RESULT =null;
		int pleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).left;
		int pright = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).right;
		primitive_dt p = (primitive_dt)((java_cup.runtime.Symbol) CUP$Parser$stack.peek()).value;
		 RESULT = new datatypePrimitive(p); 
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("data_type",10, ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 25: // data_type ::= reference_dt 
            {
              data_type RESULT =null;
		int rleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).left;
		int rright = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).right;
		reference_dt r = (reference_dt)((java_cup.runtime.Symbol) CUP$Parser$stack.peek()).value;
		 RESULT = new datatypeReference(r); 
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("data_type",10, ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 26: // primitive_dt ::= INTY 
            {
              primitive_dt RESULT =null;
		int ileft = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).left;
		int iright = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).right;
		String i = (String)((java_cup.runtime.Symbol) CUP$Parser$stack.peek()).value;
		 RESULT = new intType(i); 
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("primitive_dt",11, ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 27: // primitive_dt ::= FLOATY 
            {
              primitive_dt RESULT =null;
		int fleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).left;
		int fright = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).right;
		String f = (String)((java_cup.runtime.Symbol) CUP$Parser$stack.peek()).value;
		 RESULT = new floatType(f); 
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("primitive_dt",11, ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 28: // primitive_dt ::= STRINGY 
            {
              primitive_dt RESULT =null;
		int sleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).left;
		int sright = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).right;
		String s = (String)((java_cup.runtime.Symbol) CUP$Parser$stack.peek()).value;
		 RESULT = new stringType(s); 
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("primitive_dt",11, ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 29: // primitive_dt ::= CHARY 
            {
              primitive_dt RESULT =null;
		int cleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).left;
		int cright = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).right;
		String c = (String)((java_cup.runtime.Symbol) CUP$Parser$stack.peek()).value;
		 RESULT = new charType(c); 
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("primitive_dt",11, ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 30: // primitive_dt ::= BOOLY 
            {
              primitive_dt RESULT =null;
		int bleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).left;
		int bright = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).right;
		String b = (String)((java_cup.runtime.Symbol) CUP$Parser$stack.peek()).value;
		 RESULT = new booleanType(b); 
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("primitive_dt",11, ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 31: // reference_dt ::= valid_name 
            {
              reference_dt RESULT =null;
		int vnleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).left;
		int vnright = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).right;
		valid_name vn = (valid_name)((java_cup.runtime.Symbol) CUP$Parser$stack.peek()).value;
		 RESULT = new referenceValidName(vn); 
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("reference_dt",12, ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 32: // reference_dt ::= array_dt 
            {
              reference_dt RESULT =null;
		int aleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).left;
		int aright = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).right;
		array_dt a = (array_dt)((java_cup.runtime.Symbol) CUP$Parser$stack.peek()).value;
		 RESULT = new referenceArray(a); 
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("reference_dt",12, ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 33: // array_dt ::= primitive_dt brackets 
            {
              array_dt RESULT =null;
		int pleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)).left;
		int pright = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)).right;
		primitive_dt p = (primitive_dt)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-1)).value;
		int bleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).left;
		int bright = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).right;
		brackets b = (brackets)((java_cup.runtime.Symbol) CUP$Parser$stack.peek()).value;
		 RESULT = new arrayPrimitive(p, b); 
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("array_dt",13, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 34: // array_dt ::= valid_name brackets 
            {
              array_dt RESULT =null;
		int vnleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)).left;
		int vnright = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)).right;
		valid_name vn = (valid_name)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-1)).value;
		int bleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).left;
		int bright = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).right;
		brackets b = (brackets)((java_cup.runtime.Symbol) CUP$Parser$stack.peek()).value;
		 RESULT = new arrayName(vn, b); 
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("array_dt",13, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 35: // valid_name ::= IDENTIFIER 
            {
              valid_name RESULT =null;
		int idleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).left;
		int idright = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).right;
		String id = (String)((java_cup.runtime.Symbol) CUP$Parser$stack.peek()).value;
		RESULT = new identifier(id)}
			| valid_name:vn COLON IDENTIFIER:id {:RESULT = new validName(vn, id) 
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("valid_name",14, ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 36: // valid_var ::= valid_name 
            {
              valid_var RESULT =null;
		int vnleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).left;
		int vnright = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).right;
		valid_name vn = (valid_name)((java_cup.runtime.Symbol) CUP$Parser$stack.peek()).value;
		 RESULT = new validVar(vn); 
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("valid_var",15, ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 37: // valid_var ::= valid_name ref_brackets 
            {
              valid_var RESULT =null;
		int vnleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)).left;
		int vnright = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)).right;
		valid_name vn = (valid_name)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-1)).value;
		int rbleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).left;
		int rbright = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).right;
		ref_brackets rb = (ref_brackets)((java_cup.runtime.Symbol) CUP$Parser$stack.peek()).value;
		 RESULT = new validVar(vn, rb); 
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("valid_var",15, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 38: // sub_yaya ::= MAKE_UTUSAN IDENTIFIER sy_body 
            {
              sub_yaya RESULT =null;
		int idleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)).left;
		int idright = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)).right;
		String id = (String)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-1)).value;
		int bodyleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).left;
		int bodyright = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).right;
		sy_body body = (sy_body)((java_cup.runtime.Symbol) CUP$Parser$stack.peek()).value;
		 RESULT = new SubYaya(id, body); 
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("sub_yaya",16, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 39: // sy_body ::= DOLLAR_SIGN sy_opt DOLLAR_SIGN 
            {
              sy_body RESULT =null;
		int optleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)).left;
		int optright = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)).right;
		sy_opt opt = (sy_opt)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-1)).value;
		 RESULT = new SubYayaBodyList(opt); 
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("sy_body",17, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 40: // sy_opt ::= sy_cont_list 
            {
              sy_opt RESULT =null;
		int lleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).left;
		int lright = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).right;
		sy_cont_list l = (sy_cont_list)((java_cup.runtime.Symbol) CUP$Parser$stack.peek()).value;
		 RESULT = new SubYayaOpt(l); 
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("sy_opt",18, ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 41: // sy_opt ::= 
            {
              sy_opt RESULT =null;
		 RESULT = new SubYayaOpt(); 
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("sy_opt",18, ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 42: // sy_cont_list ::= sy_cont sy_cont_list 
            {
              sy_cont_list RESULT =null;
		int cleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)).left;
		int cright = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)).right;
		sy_cont c = (sy_cont)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-1)).value;
		int lleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).left;
		int lright = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).right;
		sy_cont_list l = (sy_cont_list)((java_cup.runtime.Symbol) CUP$Parser$stack.peek()).value;
		 RESULT = new SubYayaContList(c, l); 
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("sy_cont_list",19, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 43: // sy_cont_list ::= sy_cont 
            {
              sy_cont_list RESULT =null;
		int cleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).left;
		int cright = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).right;
		sy_cont c = (sy_cont)((java_cup.runtime.Symbol) CUP$Parser$stack.peek()).value;
		 RESULT = new SubYayaContList(c); 
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("sy_cont_list",19, ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 44: // sy_cont ::= arte_dec 
            {
              sy_cont RESULT =null;
		int aleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).left;
		int aright = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).right;
		arte_dec a = (arte_dec)((java_cup.runtime.Symbol) CUP$Parser$stack.peek()).value;
		 RESULT = new SubYayaContArte(a); 
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("sy_cont",20, ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 45: // sy_cont ::= yaya 
            {
              sy_cont RESULT =null;
		int yleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).left;
		int yright = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).right;
		yaya y = (yaya)((java_cup.runtime.Symbol) CUP$Parser$stack.peek()).value;
		 RESULT = new SubYayaContYaya(y); 
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("sy_cont",20, ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 46: // sy_cont ::= constructor 
            {
              sy_cont RESULT =null;
		int cleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).left;
		int cright = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).right;
		constructor c = (constructor)((java_cup.runtime.Symbol) CUP$Parser$stack.peek()).value;
		 RESULT = new SubYayaContConstructor(c); 
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("sy_cont",20, ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 47: // constructor ::= MAKE_SIMULA IDENTIFIER utos_block 
            {
              constructor RESULT =null;
		int idleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)).left;
		int idright = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)).right;
		String id = (String)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-1)).value;
		int uleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).left;
		int uright = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).right;
		utos_block u = (utos_block)((java_cup.runtime.Symbol) CUP$Parser$stack.peek()).value;
		 RESULT = new mSimula(id, u); 
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("constructor",21, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 48: // sy_init ::= BRAND_NEW reference_dt LEFT_PAREN arte_init_list RIGHT_PAREN 
            {
              sy_init RESULT =null;
		int rdleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-3)).left;
		int rdright = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-3)).right;
		reference_dt rd = (reference_dt)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-3)).value;
		int aileft = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)).left;
		int airight = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)).right;
		arte_init_list ai = (arte_init_list)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-1)).value;
		 RESULT = new SubYayaInitialize(rd, ai); 
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("sy_init",22, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-4)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 49: // arte_dec ::= MAKE_ARTE data_type IDENTIFIER arte_assign DB 
            {
              arte_dec RESULT =null;
		int dtleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-3)).left;
		int dtright = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-3)).right;
		data_type dt = (data_type)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-3)).value;
		int idleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)).left;
		int idright = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)).right;
		String id = (String)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-2)).value;
		int aleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)).left;
		int aright = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)).right;
		arte_assign a = (arte_assign)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-1)).value;
		 RESULT = new arteDec(dt, id, a); 
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("arte_dec",23, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-4)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 50: // arte_dec ::= MAKE_ARTE error DB 
            {
              arte_dec RESULT =null;
		 RESULT = null; addText(" in Variable Declaration"); 
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("arte_dec",23, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 51: // arte_assign ::= MAKE_KUHA arte_init 
            {
              arte_assign RESULT =null;
		int ileft = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).left;
		int iright = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).right;
		arte_init i = (arte_init)((java_cup.runtime.Symbol) CUP$Parser$stack.peek()).value;
		 RESULT = new arteAssign(i); 
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("arte_assign",24, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 52: // arte_assign ::= 
            {
              arte_assign RESULT =null;
		 RESULT = new arteAssign(); 
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("arte_assign",24, ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 53: // arte_init ::= array_init 
            {
              arte_init RESULT =null;
		int aleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).left;
		int aright = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).right;
		array_init a = (array_init)((java_cup.runtime.Symbol) CUP$Parser$stack.peek()).value;
		 RESULT = new arrayInit(a); 
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("arte_init",25, ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 54: // arte_init ::= sy_init 
            {
              arte_init RESULT =null;
		int syleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).left;
		int syright = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).right;
		sy_init sy = (sy_init)((java_cup.runtime.Symbol) CUP$Parser$stack.peek()).value;
		 RESULT = new syInit(sy); 
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("arte_init",25, ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 55: // arte_init ::= sabi_sabi 
            {
              arte_init RESULT =null;
		int sleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).left;
		int sright = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).right;
		sabi_sabi s = (sabi_sabi)((java_cup.runtime.Symbol) CUP$Parser$stack.peek()).value;
		 RESULT = new sabiInit(s); 
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("arte_init",25, ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 56: // yaya ::= yaya_header utos_block 
            {
              yaya RESULT =null;
		int hleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)).left;
		int hright = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)).right;
		yaya_header h = (yaya_header)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-1)).value;
		int uleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).left;
		int uright = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).right;
		utos_block u = (utos_block)((java_cup.runtime.Symbol) CUP$Parser$stack.peek()).value;
		 RESULT = new addYaya(h, u); 
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("yaya",26, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 57: // yaya_header ::= HIRE_YAYA IDENTIFIER BAYAD LEFT_PAREN yaya_param_sec RIGHT_PAREN MAKE_BALIK data_type IDENTIFIER 
            {
              yaya_header RESULT =null;
		int idleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-7)).left;
		int idright = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-7)).right;
		String id = (String)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-7)).value;
		int ypsleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-4)).left;
		int ypsright = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-4)).right;
		yaya_param_sec yps = (yaya_param_sec)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-4)).value;
		int dtleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)).left;
		int dtright = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)).right;
		data_type dt = (data_type)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-1)).value;
		int rleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).left;
		int rright = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).right;
		String r = (String)((java_cup.runtime.Symbol) CUP$Parser$stack.peek()).value;
		 RESULT = new yayaHeader(id, yps, dt, r); 
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("yaya_header",27, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-8)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 58: // yaya_header ::= HIRE_YAYA IDENTIFIER BAYAD LEFT_PAREN yaya_param_sec RIGHT_PAREN MAKE_BALIK POOR 
            {
              yaya_header RESULT =null;
		int idleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-6)).left;
		int idright = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-6)).right;
		String id = (String)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-6)).value;
		int ypsleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-3)).left;
		int ypsright = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-3)).right;
		yaya_param_sec yps = (yaya_param_sec)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-3)).value;
		 RESULT = new yayaHeader(id, yps); 
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("yaya_header",27, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-7)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 59: // yaya_param_sec ::= yaya_param_list 
            {
              yaya_param_sec RESULT =null;
		int yplleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).left;
		int yplright = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).right;
		yaya_param_list ypl = (yaya_param_list)((java_cup.runtime.Symbol) CUP$Parser$stack.peek()).value;
		 RESULT = new yayaParamSec(ypl); 
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("yaya_param_sec",28, ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 60: // yaya_param_sec ::= 
            {
              yaya_param_sec RESULT =null;
		 RESULT = new yayaParamSec(); 
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("yaya_param_sec",28, ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 61: // yaya_param_list ::= yaya_param COMMA yaya_param_list 
            {
              yaya_param_list RESULT =null;
		int ypleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)).left;
		int ypright = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)).right;
		yaya_param yp = (yaya_param)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-2)).value;
		int yplleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).left;
		int yplright = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).right;
		yaya_param_list ypl = (yaya_param_list)((java_cup.runtime.Symbol) CUP$Parser$stack.peek()).value;
		 RESULT = new yayaParamList(yp, ypl); 
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("yaya_param_list",29, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 62: // yaya_param_list ::= yaya_param 
            {
              yaya_param_list RESULT =null;
		int ypleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).left;
		int ypright = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).right;
		yaya_param yp = (yaya_param)((java_cup.runtime.Symbol) CUP$Parser$stack.peek()).value;
		 RESULT = new yayaParamList(yp); 
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("yaya_param_list",29, ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 63: // yaya_param ::= data_type IDENTIFIER 
            {
              yaya_param RESULT =null;
		int dtleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)).left;
		int dtright = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)).right;
		data_type dt = (data_type)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-1)).value;
		int idleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).left;
		int idright = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).right;
		String id = (String)((java_cup.runtime.Symbol) CUP$Parser$stack.peek()).value;
		 RESULT = new yayaParam(dt, id); 
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("yaya_param",30, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 64: // array_init ::= LEFT_CURLY arte_init_list RIGHT_CURLY 
            {
              array_init RESULT =null;
		int lleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)).left;
		int lright = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)).right;
		arte_init_list l = (arte_init_list)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-1)).value;
		 RETURN = new arrayInit(l); 
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("array_init",31, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 65: // arte_init_list ::= arte_init_opt 
            {
              arte_init_list RESULT =null;
		int oleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).left;
		int oright = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).right;
		arte_init_opt o = (arte_init_opt)((java_cup.runtime.Symbol) CUP$Parser$stack.peek()).value;
		 RETURN = new arteInitList(o); 
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("arte_init_list",32, ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 66: // arte_init_list ::= 
            {
              arte_init_list RESULT =null;
		 RETURN = new arteInitList(); 
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("arte_init_list",32, ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 67: // arte_init_opt ::= arte_init COMMA arte_init_opt 
            {
              arte_init_opt RESULT =null;
		int ileft = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)).left;
		int iright = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)).right;
		arte_init i = (arte_init)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-2)).value;
		int oleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).left;
		int oright = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).right;
		arte_init_opt o = (arte_init_opt)((java_cup.runtime.Symbol) CUP$Parser$stack.peek()).value;
		 RETURN = new arteInitOpt(i, o); 
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("arte_init_opt",33, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 68: // arte_init_opt ::= arte_init 
            {
              arte_init_opt RESULT =null;
		int ileft = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).left;
		int iright = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).right;
		arte_init i = (arte_init)((java_cup.runtime.Symbol) CUP$Parser$stack.peek()).value;
		 RETURN = new arteInitOpt(i); 
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("arte_init_opt",33, ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 69: // brackets ::= LEFT_BRACE RIGHT_BRACE 
            {
              brackets RESULT =null;
		 RESULT = new brackets(); 
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("brackets",34, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 70: // ref_brackets ::= LEFT_BRACE sabi_sabi RIGHT_BRACE 
            {
              ref_brackets RESULT =null;

              CUP$Parser$result = parser.getSymbolFactory().newSymbol("ref_brackets",35, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 71: // utos_block ::= DOLLAR_SIGN utos_block_opt DOLLAR_SIGN 
            {
              utos_block RESULT =null;
		int optleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)).left;
		int optright = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)).right;
		utos_block_opt opt = (utos_block_opt)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-1)).value;
		 RESULT = new utosBlock(opt); 
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("utos_block",36, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 72: // utos_block ::= error 
            {
              utos_block RESULT =null;
		 RESULT = null; addText(" in code block"); 
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("utos_block",36, ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 73: // utos_block_opt ::= block_content 
            {
              utos_block_opt RESULT =null;
		int cleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).left;
		int cright = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).right;
		block_content c = (block_content)((java_cup.runtime.Symbol) CUP$Parser$stack.peek()).value;
		 RESULT = new utosBlockOpt(b); 
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("utos_block_opt",37, ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 74: // utos_block_opt ::= 
            {
              utos_block_opt RESULT =null;
		 RESULT = new utosBlockOpt(); 
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("utos_block_opt",37, ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 75: // block_content ::= utos_dec block_content 
            {
              block_content RESULT =null;
		 RESULT = new blockContent(u, b); 
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("block_content",38, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 76: // block_content ::= utos_dec 
            {
              block_content RESULT =null;
		 RESULT = new blockContent(u); 
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("block_content",38, ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 77: // utos_dec ::= utos_dec_db 
            {
              utos_dec RESULT =null;
		int dleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).left;
		int dright = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).right;
		utos_dec_db d = (utos_dec_db)((java_cup.runtime.Symbol) CUP$Parser$stack.peek()).value;
		 RESULT = new utosDecDB(d); 
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("utos_dec",39, ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 78: // utos_dec ::= utos_dec_val DB 
            {
              utos_dec RESULT =null;
		int vleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)).left;
		int vright = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)).right;
		utos_dec_val v = (utos_dec_val)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-1)).value;
		 RESULT = new utosDecVal(v); 
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("utos_dec",39, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 79: // utos_dec ::= utos_dec_nodb 
            {
              utos_dec RESULT =null;
		int nleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).left;
		int nright = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).right;
		utos_dec_nodb n = (utos_dec_nodb)((java_cup.runtime.Symbol) CUP$Parser$stack.peek()).value;
		 RESULT = new utosDecNoDB(n); 
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("utos_dec",39, ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 80: // utos_dec ::= error 
            {
              utos_dec RESULT =null;
		 RESULT = null; addText(""); 
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("utos_dec",39, ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 81: // utos_dec_nodb ::= utos_likeKapag 
            {
              utos_dec_nodb RESULT =null;
		int ukleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).left;
		int ukright = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).right;
		utos_likeKapag uk = (utos_likeKapag)((java_cup.runtime.Symbol) CUP$Parser$stack.peek()).value;
		 RESULT = new utosLikeKapag(u); 
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("utos_dec_nodb",40, ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 82: // utos_dec_nodb ::= utos_makePalit 
            {
              utos_dec_nodb RESULT =null;
		int upleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).left;
		int upright = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).right;
		utos_makePalit up = (utos_makePalit)((java_cup.runtime.Symbol) CUP$Parser$stack.peek()).value;
		 RESULT = new utosMakePalit(up); 
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("utos_dec_nodb",40, ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 83: // utos_dec_nodb ::= utos_likeHabang 
            {
              utos_dec_nodb RESULT =null;
		int uhleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).left;
		int uhright = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).right;
		utos_likeHabang uh = (utos_likeHabang)((java_cup.runtime.Symbol) CUP$Parser$stack.peek()).value;
		 RESULT = new utosLikeHabang(uh); 
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("utos_dec_nodb",40, ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 84: // utos_dec_nodb ::= utos_makeGawaHabang 
            {
              utos_dec_nodb RESULT =null;
		int ughleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).left;
		int ughright = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).right;
		utos_makeGawaHabang ugh = (utos_makeGawaHabang)((java_cup.runtime.Symbol) CUP$Parser$stack.peek()).value;
		 RESULT = new utosMakeGawaHabang(ugh); 
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("utos_dec_nodb",40, ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 85: // utos_dec_nodb ::= utos_makeUlit 
            {
              utos_dec_nodb RESULT =null;
		int uuleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).left;
		int uuright = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).right;
		utos_makeUlit uu = (utos_makeUlit)((java_cup.runtime.Symbol) CUP$Parser$stack.peek()).value;
		 RESULT = new utosMakeUlit(uu); 
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("utos_dec_nodb",40, ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 86: // utos_dec_nodb ::= utos_makeArte 
            {
              utos_dec_nodb RESULT =null;
		int ualeft = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).left;
		int uaright = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).right;
		utos_makeArte ua = (utos_makeArte)((java_cup.runtime.Symbol) CUP$Parser$stack.peek()).value;
		 RESULT = new utosMakeArte(ua); 
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("utos_dec_nodb",40, ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 87: // utos_dec_nodb ::= LIKE_KAPAG error 
            {
              utos_dec_nodb RESULT =null;
		 RESULT = null; addText(" in IF statement"); 
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("utos_dec_nodb",40, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 88: // utos_dec_nodb ::= MAKE_PALIT error DB 
            {
              utos_dec_nodb RESULT =null;
		 RESULT = null; addText(" in SWITCH statement"); 
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("utos_dec_nodb",40, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 89: // utos_dec_nodb ::= LIKE_HABANG error DB 
            {
              utos_dec_nodb RESULT =null;
		 RESULT = null; addText(" in WHILE LOOP"); 
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("utos_dec_nodb",40, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 90: // utos_dec_nodb ::= MAKE_GAWA error DB 
            {
              utos_dec_nodb RESULT =null;
		 RESULT = null; addText(" in DO WHILE LOOP"); 
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("utos_dec_nodb",40, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 91: // utos_dec_nodb ::= MAKE_ULIT error DB 
            {
              utos_dec_nodb RESULT =null;
		 RESULT = null; addText(" in FOR LOOP"); 
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("utos_dec_nodb",40, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 92: // utos_dec_db ::= utos_makeKuha DB 
            {
              utos_dec_db RESULT =null;
		int ukleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)).left;
		int ukright = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)).right;
		utos_makeKuha uk = (utos_makeKuha)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-1)).value;
		 RESULT = new utosMakeKuha(uk); 
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("utos_dec_db",41, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 93: // utos_dec_db ::= utos_makeSulat DB 
            {
              utos_dec_db RESULT =null;
		int usuleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)).left;
		int usuright = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)).right;
		utos_makeSulat usu = (utos_makeSulat)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-1)).value;
		 RESULT = new utosMakeSulat(usu); 
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("utos_dec_db",41, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 94: // utos_dec_db ::= utos_makeSabi DB 
            {
              utos_dec_db RESULT =null;
		int usaleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)).left;
		int usaright = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)).right;
		utos_makeSabi usa = (utos_makeSabi)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-1)).value;
		 RESULT = new utosMakeSabi(usa); 
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("utos_dec_db",41, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 95: // utos_dec_db ::= BREAKUP DB 
            {
              utos_dec_db RESULT =null;
		 RESULT = new breakup(); 
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("utos_dec_db",41, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 96: // utos_dec_db ::= MAKEUP DB 
            {
              utos_dec_db RESULT =null;
		 RESULT = new makeup(); 
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("utos_dec_db",41, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 97: // utos_dec_db ::= MAKE_SULAT error DB 
            {
              utos_dec_db RESULT =null;
		 RESULT = null; addText(" in OUTPUT function"); 
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("utos_dec_db",41, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 98: // utos_dec_db ::= MAKE_SABI error DB 
            {
              utos_dec_db RESULT =null;
		 RESULT = null; addText(" in MAKESABI function"); 
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("utos_dec_db",41, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 99: // utos_dec_val ::= utos_makeTawag 
            {
              utos_dec_val RESULT =null;
		int utleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).left;
		int utright = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).right;
		utos_makeTawag ut = (utos_makeTawag)((java_cup.runtime.Symbol) CUP$Parser$stack.peek()).value;
		 RESULT = new utosMakeTawag(ut); 
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("utos_dec_val",42, ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 100: // utos_dec_val ::= utos_makeBasa 
            {
              utos_dec_val RESULT =null;
		int ubleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).left;
		int ubright = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).right;
		utos_makeBasa ub = (utos_makeBasa)((java_cup.runtime.Symbol) CUP$Parser$stack.peek()).value;
		 RESULT = new utosMakeBasa(ub); 
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("utos_dec_val",42, ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 101: // utos_dec_val ::= MAKE_TAWAG error 
            {
              utos_dec_val RESULT =null;
		 RESULT = null; addText(" in FUNCTION CALL"); 
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("utos_dec_val",42, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 102: // utos_dec_val ::= MAKE_BASA error 
            {
              utos_dec_val RESULT =null;
		 RESULT = null; addText(" in SCAN function"); 
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("utos_dec_val",42, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 103: // utos_makeKuha ::= valid_var arte_assign 
            {
              utos_makeKuha RESULT =null;
		int vvleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)).left;
		int vvright = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)).right;
		valid_var vv = (valid_var)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-1)).value;
		int aleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).left;
		int aright = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).right;
		arte_assign a = (arte_assign)((java_cup.runtime.Symbol) CUP$Parser$stack.peek()).value;
		 RESULT = makeKuha(vv, a); 
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("utos_makeKuha",43, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 104: // utos_makeTawag ::= MAKE_TAWAG valid_name LEFT_PAREN arte_init_list RIGHT_PAREN 
            {
              utos_makeTawag RESULT =null;
		int vnleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-3)).left;
		int vnright = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-3)).right;
		valid_name vn = (valid_name)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-3)).value;
		int lleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)).left;
		int lright = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)).right;
		arte_init_list l = (arte_init_list)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-1)).value;
		 RESULT = makeTawag(vn, l); 
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("utos_makeTawag",44, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-4)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 105: // utos_makeSulat ::= MAKE_SULAT LEFT_PAREN sabi_sabi RIGHT_PAREN 
            {
              utos_makeSulat RESULT =null;
		int sleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)).left;
		int sright = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)).right;
		sabi_sabi s = (sabi_sabi)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-1)).value;
		 RESULT = makeSulat(s); 
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("utos_makeSulat",45, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-3)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 106: // utos_makeBasa ::= MAKE_BASA LEFT_PAREN data_type RIGHT_PAREN 
            {
              utos_makeBasa RESULT =null;
		int dleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)).left;
		int dright = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)).right;
		data_type d = (data_type)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-1)).value;
		 RESULT = new makeBasa(d); 
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("utos_makeBasa",46, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-3)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 107: // utos_likeKapag ::= LIKE_KAPAG LEFT_PAREN sabi_sabi RIGHT_PAREN utos_block utos_thisNalang 
            {
              utos_likeKapag RESULT =null;
		int sleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-3)).left;
		int sright = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-3)).right;
		sabi_sabi s = (sabi_sabi)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-3)).value;
		int bleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)).left;
		int bright = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)).right;
		utos_block b = (utos_block)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-1)).value;
		int tleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).left;
		int tright = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).right;
		utos_thisNalang t = (utos_thisNalang)((java_cup.runtime.Symbol) CUP$Parser$stack.peek()).value;
		 RESULT = new likeKapag(s, b, t); 
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("utos_likeKapag",47, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-5)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 108: // utos_thisNalang ::= THIS_NALANG utos_block 
            {
              utos_thisNalang RESULT =null;
		int bleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).left;
		int bright = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).right;
		utos_block b = (utos_block)((java_cup.runtime.Symbol) CUP$Parser$stack.peek()).value;
		 RESULT = new thisNalang(b); 
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("utos_thisNalang",48, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 109: // utos_thisNalang ::= THIS_NALANG_KAPAG LEFT_PAREN sabi_sabi RIGHT_PAREN utos_block utos_thisNalang 
            {
              utos_thisNalang RESULT =null;
		int sleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-3)).left;
		int sright = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-3)).right;
		sabi_sabi s = (sabi_sabi)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-3)).value;
		int bleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)).left;
		int bright = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)).right;
		utos_block b = (utos_block)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-1)).value;
		int tleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).left;
		int tright = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).right;
		utos_thisNalang t = (utos_thisNalang)((java_cup.runtime.Symbol) CUP$Parser$stack.peek()).value;
		 RESULT = new thisNalangKapag(s, b, t); 
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("utos_thisNalang",48, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-5)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 110: // utos_thisNalang ::= 
            {
              utos_thisNalang RESULT =null;
		 RESULT = new thisNalang(); 
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("utos_thisNalang",48, ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 111: // utos_thisNalang ::= THIS_NALANG error DB 
            {
              utos_thisNalang RESULT =null;
		 RESULT = null; addText(" in ELSE statement"); 
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("utos_thisNalang",48, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 112: // utos_thisNalang ::= THIS_NALANG_KAPAG error DB 
            {
              utos_thisNalang RESULT =null;
		 RESULT = null; addText(" in ELSE IF statement"); 
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("utos_thisNalang",48, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 113: // utos_makePalit ::= MAKE_PALIT LEFT_PAREN sabi_sabi RIGHT_PAREN DOLLAR_SIGN makePalit_MRW DOLLAR_SIGN 
            {
              utos_makePalit RESULT =null;
		int sleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-4)).left;
		int sright = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-4)).right;
		sabi_sabi s = (sabi_sabi)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-4)).value;
		int mleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)).left;
		int mright = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)).right;
		makePalit_MRW m = (makePalit_MRW)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-1)).value;
		 RESULT = new mPalit(s, m); 
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("utos_makePalit",49, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-6)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 114: // makePalit_MRW ::= MRW sabi_sabi COLON utos_block_opt makePalit_MRW 
            {
              makePalit_MRW RESULT =null;
		int sleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-3)).left;
		int sright = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-3)).right;
		sabi_sabi s = (sabi_sabi)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-3)).value;
		int oleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)).left;
		int oright = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)).right;
		utos_block_opt o = (utos_block_opt)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-1)).value;
		int mleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).left;
		int mright = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).right;
		makePalit_MRW m = (makePalit_MRW)((java_cup.runtime.Symbol) CUP$Parser$stack.peek()).value;
		 RESULT = new MRW(s, o, m); 
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("makePalit_MRW",50, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-4)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 115: // makePalit_MRW ::= MRW error DB 
            {
              makePalit_MRW RESULT =null;
		 RESULT = null; addText(" in one of the cases of a SWITCH statement"); 
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("makePalit_MRW",50, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 116: // makePalit_MRW ::= MDR COLON utos_block_opt 
            {
              makePalit_MRW RESULT =null;
		int oleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).left;
		int oright = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).right;
		utos_block_opt o = (utos_block_opt)((java_cup.runtime.Symbol) CUP$Parser$stack.peek()).value;
		 RESULT = new MDR(o); 
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("makePalit_MRW",50, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 117: // makePalit_MRW ::= MDR error DB 
            {
              makePalit_MRW RESULT =null;
		 RESULT = null; addText(" in the last case of a SWITCH statement"); 
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("makePalit_MRW",50, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 118: // makePalit_MRW ::= 
            {
              makePalit_MRW RESULT =null;
		 RESULT = new MRW(); 
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("makePalit_MRW",50, ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 119: // utos_likeHabang ::= LIKE_HABANG LEFT_PAREN sabi_sabi RIGHT_PAREN utos_block 
            {
              utos_likeHabang RESULT =null;
		int sleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)).left;
		int sright = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)).right;
		sabi_sabi s = (sabi_sabi)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-2)).value;
		int uleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).left;
		int uright = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).right;
		utos_block u = (utos_block)((java_cup.runtime.Symbol) CUP$Parser$stack.peek()).value;
		 RESULT = new likeHabang(s, u); 
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("utos_likeHabang",51, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-4)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 120: // utos_likeHabang ::= LIKE_HABANG LEFT_PAREN sabi_sabi RIGHT_PAREN DB 
            {
              utos_likeHabang RESULT =null;
		int sleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)).left;
		int sright = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)).right;
		sabi_sabi s = (sabi_sabi)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-2)).value;
		 RESULT = new likeHabang(s); 
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("utos_likeHabang",51, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-4)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 121: // utos_makeGawaHabang ::= MAKE_GAWA utos_block LIKE_HABANG LEFT_PAREN sabi_sabi RIGHT_PAREN DB 
            {
              utos_makeGawaHabang RESULT =null;
		int uleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-5)).left;
		int uright = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-5)).right;
		utos_block u = (utos_block)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-5)).value;
		int sleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)).left;
		int sright = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)).right;
		sabi_sabi s = (sabi_sabi)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-2)).value;
		 RESULT = new makeGawaHabang(u, s); 
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("utos_makeGawaHabang",52, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-6)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 122: // utos_makeUlit ::= MAKE_ULIT LEFT_PAREN utos_makeKuha DB sabi_sabi_for utos_makeKuha RIGHT_PAREN utos_block 
            {
              utos_makeUlit RESULT =null;
		int m1left = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-5)).left;
		int m1right = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-5)).right;
		utos_makeKuha m1 = (utos_makeKuha)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-5)).value;
		int sleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-3)).left;
		int sright = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-3)).right;
		sabi_sabi_for s = (sabi_sabi_for)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-3)).value;
		int m2left = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)).left;
		int m2right = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)).right;
		utos_makeKuha m2 = (utos_makeKuha)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-2)).value;
		int uleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).left;
		int uright = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).right;
		utos_block u = (utos_block)((java_cup.runtime.Symbol) CUP$Parser$stack.peek()).value;
		 RESULT = new makeUlit(m1, s1, m2, u); 
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("utos_makeUlit",53, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-7)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 123: // utos_makeUlit ::= MAKE_ULIT LEFT_PAREN utos_makeKuha DB sabi_sabi_for sabi_sabi_for RIGHT_PAREN utos_block 
            {
              utos_makeUlit RESULT =null;
		int mleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-5)).left;
		int mright = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-5)).right;
		utos_makeKuha m = (utos_makeKuha)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-5)).value;
		int s1left = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-3)).left;
		int s1right = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-3)).right;
		sabi_sabi_for s1 = (sabi_sabi_for)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-3)).value;
		int s2left = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)).left;
		int s2right = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)).right;
		sabi_sabi_for s2 = (sabi_sabi_for)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-2)).value;
		int uleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).left;
		int uright = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).right;
		utos_block u = (utos_block)((java_cup.runtime.Symbol) CUP$Parser$stack.peek()).value;
		 RESULT = new makeUlit(m1, s1, s2, u); 
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("utos_makeUlit",53, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-7)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 124: // utos_makeArte ::= arte_dec 
            {
              utos_makeArte RESULT =null;
		int aleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).left;
		int aright = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).right;
		arte_dec a = (arte_dec)((java_cup.runtime.Symbol) CUP$Parser$stack.peek()).value;
		 RESULT = makeArte(a); 
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("utos_makeArte",54, ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 125: // utos_makeSabi ::= MAKE_SABI sabi_sabi 
            {
              utos_makeSabi RESULT =null;
		int sleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).left;
		int sright = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).right;
		sabi_sabi s = (sabi_sabi)((java_cup.runtime.Symbol) CUP$Parser$stack.peek()).value;
		 RESULT = new makeSabi(s); 
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("utos_makeSabi",55, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 126: // sabi_sabi_end ::= valid_var 
            {
              sabi_sabi_end RESULT =null;
		int vleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).left;
		int vright = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).right;
		valid_var v = (valid_var)((java_cup.runtime.Symbol) CUP$Parser$stack.peek()).value;
		 RESULT = new ssEndValidVar(v); 
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("sabi_sabi_end",57, ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 127: // sabi_sabi_end ::= utos_dec_val 
            {
              sabi_sabi_end RESULT =null;
		int uleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).left;
		int uright = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).right;
		utos_dec_val u = (utos_dec_val)((java_cup.runtime.Symbol) CUP$Parser$stack.peek()).value;
		 RESULT = new ssEndUtos(u); 
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("sabi_sabi_end",57, ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 128: // sabi_sabi_end ::= literal 
            {
              sabi_sabi_end RESULT =null;
		int lleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).left;
		int lright = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).right;
		literal l = (literal)((java_cup.runtime.Symbol) CUP$Parser$stack.peek()).value;
		 RESULT = new ssEndLiteral(l); 
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("sabi_sabi_end",57, ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 129: // sabi_sabi_for ::= sabi_sabi DB 
            {
              sabi_sabi_for RESULT =null;
		int sleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)).left;
		int sright = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)).right;
		sabi_sabi s = (sabi_sabi)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-1)).value;
		 RESULT = new SabiSabiFor(s); 
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("sabi_sabi_for",58, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 130: // sabi_sabi ::= ss_OR 
            {
              sabi_sabi RESULT =null;
		int oleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).left;
		int oright = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).right;
		ss_OR o = (ss_OR)((java_cup.runtime.Symbol) CUP$Parser$stack.peek()).value;
		 RESULT = new SabiSabi(o); 
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("sabi_sabi",56, ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 131: // ss_OR ::= ss_AND OR OR ss_OR 
            {
              ss_OR RESULT =null;
		int aleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-3)).left;
		int aright = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-3)).right;
		ss_AND a = (ss_AND)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-3)).value;
		int oleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).left;
		int oright = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).right;
		ss_OR o = (ss_OR)((java_cup.runtime.Symbol) CUP$Parser$stack.peek()).value;
		 RESULT = new ssORExpansion(a, o); 
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("ss_OR",59, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-3)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 132: // ss_OR ::= ss_AND 
            {
              ss_OR RESULT =null;
		int aleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).left;
		int aright = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).right;
		ss_AND a = (ss_AND)((java_cup.runtime.Symbol) CUP$Parser$stack.peek()).value;
		 RESULT = new ssOR(a); 
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("ss_OR",59, ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 133: // ss_AND ::= ss_equality AND AND ss_AND 
            {
              ss_AND RESULT =null;
		int eleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-3)).left;
		int eright = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-3)).right;
		ss_equality e = (ss_equality)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-3)).value;
		int aleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).left;
		int aright = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).right;
		ss_AND a = (ss_AND)((java_cup.runtime.Symbol) CUP$Parser$stack.peek()).value;
		 RESULT = new ssANDExpansion(e, a); 
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("ss_AND",60, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-3)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 134: // ss_AND ::= ss_equality 
            {
              ss_AND RESULT =null;
		int eleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).left;
		int eright = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).right;
		ss_equality e = (ss_equality)((java_cup.runtime.Symbol) CUP$Parser$stack.peek()).value;
		 RESULT = new ssAND(e); 
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("ss_AND",60, ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 135: // ss_equality ::= ss_comparison equality ss_equality 
            {
              ss_equality RESULT =null;
		int cleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)).left;
		int cright = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)).right;
		ss_comparison c = (ss_comparison)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-2)).value;
		int eqleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)).left;
		int eqright = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)).right;
		equality eq = (equality)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-1)).value;
		int eleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).left;
		int eright = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).right;
		ss_equality e = (ss_equality)((java_cup.runtime.Symbol) CUP$Parser$stack.peek()).value;
		 RESULT = new ssEqualityExpansion(c, eq, e); 
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("ss_equality",61, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 136: // ss_equality ::= ss_comparison 
            {
              ss_equality RESULT =null;
		int cleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).left;
		int cright = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).right;
		ss_comparison c = (ss_comparison)((java_cup.runtime.Symbol) CUP$Parser$stack.peek()).value;
		 RESULT = new ssEquality(c); 
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("ss_equality",61, ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 137: // ss_comparison ::= ss_a1 comparison ss_comparison 
            {
              ss_comparison RESULT =null;
		int aleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)).left;
		int aright = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)).right;
		ss_a1 a = (ss_a1)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-2)).value;
		int coleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)).left;
		int coright = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)).right;
		comparison co = (comparison)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-1)).value;
		int cleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).left;
		int cright = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).right;
		ss_comparison c = (ss_comparison)((java_cup.runtime.Symbol) CUP$Parser$stack.peek()).value;
		 RESULT = new ssComparisonExpansion(a, co, c); 
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("ss_comparison",62, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 138: // ss_comparison ::= ss_a1 
            {
              ss_comparison RESULT =null;
		int aleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).left;
		int aright = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).right;
		ss_a1 a = (ss_a1)((java_cup.runtime.Symbol) CUP$Parser$stack.peek()).value;
		 RESULT = new ssComparison(a); 
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("ss_comparison",62, ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 139: // ss_a1 ::= ss_a2 arithmetic_1 ss_a1 
            {
              ss_a1 RESULT =null;
		int a2left = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)).left;
		int a2right = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)).right;
		ss_a2 a2 = (ss_a2)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-2)).value;
		int arleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)).left;
		int arright = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)).right;
		arithmetic1 ar = (arithmetic1)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-1)).value;
		int a1left = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).left;
		int a1right = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).right;
		ss_a1 a1 = (ss_a1)((java_cup.runtime.Symbol) CUP$Parser$stack.peek()).value;
		 RESULT = new ssA1Expansion(a2, ar, a1); 
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("ss_a1",63, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 140: // ss_a1 ::= ss_a2 
            {
              ss_a1 RESULT =null;
		int a2left = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).left;
		int a2right = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).right;
		ss_a2 a2 = (ss_a2)((java_cup.runtime.Symbol) CUP$Parser$stack.peek()).value;
		 RESULT = new ssA1(a2); 
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("ss_a1",63, ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 141: // ss_a2 ::= ss_unary_1 arithmetic_2 ss_a2 
            {
              ss_a2 RESULT =null;
		int uleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)).left;
		int uright = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)).right;
		ss_unary_1 u = (ss_unary_1)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-2)).value;
		int arleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)).left;
		int arright = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)).right;
		arithmetic2 ar = (arithmetic2)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-1)).value;
		int aleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).left;
		int aright = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).right;
		ss_a2 a = (ss_a2)((java_cup.runtime.Symbol) CUP$Parser$stack.peek()).value;
		 RESULT = new ssA2Expansion(u, ar, a); 
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("ss_a2",64, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 142: // ss_a2 ::= ss_unary_1 
            {
              ss_a2 RESULT =null;
		int uleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).left;
		int uright = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).right;
		ss_unary_1 u = (ss_unary_1)((java_cup.runtime.Symbol) CUP$Parser$stack.peek()).value;
		 RESULT = new ssA2(u); 
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("ss_a2",64, ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 143: // ss_unary_1 ::= NOT ss_unary_1 
            {
              ss_unary_1 RESULT =null;
		int uleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).left;
		int uright = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).right;
		ss_unary_1 u = (ss_unary_1)((java_cup.runtime.Symbol) CUP$Parser$stack.peek()).value;
		 RESULT = new ssU1Not(u); 
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("ss_unary_1",65, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 144: // ss_unary_1 ::= POS_INC ss_unary_1 
            {
              ss_unary_1 RESULT =null;
		int uleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).left;
		int uright = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).right;
		ss_unary_1 u = (ss_unary_1)((java_cup.runtime.Symbol) CUP$Parser$stack.peek()).value;
		 RESULT = new ssU1PlusPlus(u); 
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("ss_unary_1",65, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 145: // ss_unary_1 ::= NEG_INC ss_unary_1 
            {
              ss_unary_1 RESULT =null;
		int uleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).left;
		int uright = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).right;
		ss_unary_1 u = (ss_unary_1)((java_cup.runtime.Symbol) CUP$Parser$stack.peek()).value;
		 RESULT = new ssU1MinusMinus(u); 
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("ss_unary_1",65, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 146: // ss_unary_1 ::= ss_unary_2 
            {
              ss_unary_1 RESULT =null;
		int uleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).left;
		int uright = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).right;
		ss_unary_2 u = (ss_unary_2)((java_cup.runtime.Symbol) CUP$Parser$stack.peek()).value;
		 RESULT = new ssU1(u); 
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("ss_unary_1",65, ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 147: // ss_unary_2 ::= ss_unary_2 POS_INC 
            {
              ss_unary_2 RESULT =null;
		int uleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)).left;
		int uright = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)).right;
		ss_unary_2 u = (ss_unary_2)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-1)).value;
		 RESULT = new ssU2PlusPlus(u); 
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("ss_unary_2",66, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 148: // ss_unary_2 ::= ss_unary_2 NEG_INC 
            {
              ss_unary_2 RESULT =null;
		int uleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)).left;
		int uright = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)).right;
		ss_unary_2 u = (ss_unary_2)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-1)).value;
		 RESULT = new ssU2MinusMinus(u); 
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("ss_unary_2",66, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 149: // ss_unary_2 ::= ss_paren 
            {
              ss_unary_2 RESULT =null;
		int pleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).left;
		int pright = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).right;
		ss_paren p = (ss_paren)((java_cup.runtime.Symbol) CUP$Parser$stack.peek()).value;
		 RESULT = new ssU2(p); 
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("ss_unary_2",66, ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 150: // ss_paren ::= LEFT_PAREN ss_paren RIGHT_PAREN 
            {
              ss_paren RESULT =null;
		int pleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)).left;
		int pright = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)).right;
		ss_paren p = (ss_paren)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-1)).value;
		 RESULT = new ssParen(p); 
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("ss_paren",67, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 151: // ss_paren ::= sabi_sabi_end 
            {
              ss_paren RESULT =null;
		int eleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).left;
		int eright = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).right;
		sabi_sabi_end e = (sabi_sabi_end)((java_cup.runtime.Symbol) CUP$Parser$stack.peek()).value;
		 RESULT = new ssParenEnd(e); 
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("ss_paren",67, ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 152: // equality ::= EQUAL_EQUAL 
            {
              equality RESULT =null;
		 RESULT = new equal("=="); 
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("equality",68, ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 153: // equality ::= NOT_EQUAL 
            {
              equality RESULT =null;
		 RESULT = new equal("!="); 
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("equality",68, ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 154: // comparison ::= GT_EQUAL 
            {
              comparison RESULT =null;
		 RESULT = new compare(">="); 
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("comparison",69, ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 155: // comparison ::= LT_EQUAL 
            {
              comparison RESULT =null;
		 RESULT = new compare("<="); 
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("comparison",69, ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 156: // comparison ::= GREATER_THAN 
            {
              comparison RESULT =null;
		 RESULT = new compare(">"); 
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("comparison",69, ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 157: // comparison ::= LESS_THAN 
            {
              comparison RESULT =null;
		 RESULT = new compare("<"); 
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("comparison",69, ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 158: // arithmetic_1 ::= PLUS 
            {
              arithmetic1 RESULT =null;
		 RESULT = new arithmetic1("+"); 
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("arithmetic_1",70, ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 159: // arithmetic_1 ::= MINUS 
            {
              arithmetic1 RESULT =null;
		 RESULT = new arithmetic1("-"); 
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("arithmetic_1",70, ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 160: // arithmetic_2 ::= TIMES 
            {
              arithmetic2 RESULT =null;
		 RESULT = new arithmetic2("*"); 
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("arithmetic_2",71, ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 161: // arithmetic_2 ::= DIVIDE 
            {
              arithmetic2 RESULT =null;
		 RESULT = new arithmetic2("/"); 
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("arithmetic_2",71, ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 162: // arithmetic_2 ::= MODULO 
            {
              arithmetic2 RESULT =null;
		 RESULT = new arithmetic2("%"); 
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("arithmetic_2",71, ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /* . . . . . .*/
          default:
            throw new Exception(
               "Invalid action number "+CUP$Parser$act_num+"found in internal parse table");

        }
    } /* end of method */

  /** Method splitting the generated action code into several parts. */
  public final java_cup.runtime.Symbol CUP$Parser$do_action(
    int                        CUP$Parser$act_num,
    java_cup.runtime.lr_parser CUP$Parser$parser,
    java.util.Stack            CUP$Parser$stack,
    int                        CUP$Parser$top)
    throws java.lang.Exception
    {
              return CUP$Parser$do_action_part00000000(
                               CUP$Parser$act_num,
                               CUP$Parser$parser,
                               CUP$Parser$stack,
                               CUP$Parser$top);
    }
}

}
